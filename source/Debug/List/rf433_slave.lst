
AVRASM ver. 2.1.30  E:\Project\RF433\source\Debug\List\rf433_slave.asm Fri May 20 23:04:54 2022

E:\Project\RF433\source\Debug\List\rf433_slave.asm(1086): warning: Register r5 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : float, width, precision
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8A
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _lcd=R5
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c098      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 c1cc      	RJMP _twi_int_handler
000012 cfed      	RJMP 0x00
                 
                 _conv_delay_G103:
000013 0064
000014 00c8
000015 0190
000016 0320      	.DB  0x64,0x0,0xC8,0x0,0x90,0x1,0x20,0x3
                 _bit_mask_G103:
000017 fff8
000018 fffc
000019 fffe
00001a ffff      	.DB  0xF8,0xFF,0xFC,0xFF,0xFE,0xFF,0xFF,0xFF
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00001b 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
E:\Project\RF433\source\Debug\List\rf433_slave.asm(1126): warning: .cseg .db misalignment - padding zero byte
00001c 0000      	.DB  0x0
                 
                 _0x0:
00001d 434c
00001e 2044
00001f 3249
000020 2043      	.DB  0x4C,0x43,0x44,0x20,0x49,0x32,0x43,0x20
000021 4e49
000022 5449
000023 2d2d
000024 002d      	.DB  0x49,0x4E,0x49,0x54,0x2D,0x2D,0x2D,0x0
000025 4652
000026 3334
000027 0033      	.DB  0x52,0x46,0x34,0x33,0x33,0x0
                 _0x20000:
000028 3249
000029 2043
00002a 4e49
00002b 5449      	.DB  0x49,0x32,0x43,0x20,0x49,0x4E,0x49,0x54
00002c 003a
00002d 7453
00002e 7261
00002f 2074      	.DB  0x3A,0x0,0x53,0x74,0x61,0x72,0x74,0x20
000030 7845
000031 2e65
000032 4100
000033 4b43      	.DB  0x45,0x78,0x65,0x2E,0x0,0x41,0x43,0x4B
000034 5220
000035 6365
000036 6965
000037 6576      	.DB  0x20,0x52,0x65,0x63,0x65,0x69,0x76,0x65
000038 2064
000039 6f66
00003a 2072
00003b 544d      	.DB  0x64,0x20,0x66,0x6F,0x72,0x20,0x4D,0x54
00003c 5320
00003d 414c
00003e 4100
00003f 4b43      	.DB  0x20,0x53,0x4C,0x41,0x0,0x41,0x43,0x4B
000040 5220
000041 6365
000042 6965
000043 6576      	.DB  0x20,0x52,0x65,0x63,0x65,0x69,0x76,0x65
000044 2064
000045 6f66
000046 2072
000047 544d      	.DB  0x64,0x20,0x66,0x6F,0x72,0x20,0x4D,0x54
000048 4420
000049 7461
00004a 2061
00004b 7774      	.DB  0x20,0x44,0x61,0x74,0x61,0x20,0x74,0x77
00004c 5f69
00004d 7277
00004e 7469
00004f 5f65      	.DB  0x69,0x5F,0x77,0x72,0x69,0x74,0x65,0x5F
000050 7764
000051 2072
000052 5200
000053 6365      	.DB  0x64,0x77,0x72,0x20,0x0,0x52,0x65,0x63
000054 6965
000055 6976
000056 676e
000057 4d20      	.DB  0x65,0x69,0x76,0x69,0x6E,0x67,0x20,0x4D
000058 2052
000059 6164
00005a 6174
00005b 4120      	.DB  0x52,0x20,0x64,0x61,0x74,0x61,0x20,0x41
00005c 4b43
00005d 0020
00005e 6552
00005f 6563      	.DB  0x43,0x4B,0x20,0x0,0x52,0x65,0x63,0x65
000060 7669
000061 6e69
000062 2067
000063 524d      	.DB  0x69,0x76,0x69,0x6E,0x67,0x20,0x4D,0x52
000064 4420
000065 7461
000066 2061
000067 414e      	.DB  0x20,0x44,0x61,0x74,0x61,0x20,0x4E,0x41
000068 4b43
E:\Project\RF433\source\Debug\List\rf433_slave.asm(1149): warning: .cseg .db misalignment - padding zero byte
000069 0000      	.DB  0x43,0x4B,0x0
                 _0x2000003:
E:\Project\RF433\source\Debug\List\rf433_slave.asm(1151): warning: .cseg .db misalignment - padding zero byte
00006a 0007      	.DB  0x7
                 _0x2040000:
00006b 4e2d
00006c 4e41
E:\Project\RF433\source\Debug\List\rf433_slave.asm(1153): warning: .cseg .db misalignment - padding zero byte
00006d 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x20A0060:
E:\Project\RF433\source\Debug\List\rf433_slave.asm(1155): warning: .cseg .db misalignment - padding zero byte
00006e 0001      	.DB  0x1
                 _0x20A0000:
00006f 4e2d
000070 4e41
000071 4900
000072 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\Project\RF433\source\Debug\List\rf433_slave.asm(1158): warning: .cseg .db misalignment - padding zero byte
000073 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000074 0001      	.DW  0x01
000075 0002      	.DW  0x02
000076 0036      	.DW  __REG_BIT_VARS*2
                 
000077 0001      	.DW  0x01
000078 0005      	.DW  0x05
000079 0038      	.DW  __REG_VARS*2
                 
00007a 0010      	.DW  0x10
00007b 0160      	.DW  _0x6
00007c 003a      	.DW  _0x0*2
                 
00007d 0006      	.DW  0x06
00007e 0170      	.DW  _0x7
00007f 004a      	.DW  _0x0*2+16
                 
000080 000a      	.DW  0x0A
000081 0176      	.DW  _0x20003
000082 0050      	.DW  _0x20000*2
                 
000083 000b      	.DW  0x0B
000084 0180      	.DW  _0x2000B
000085 005a      	.DW  _0x20000*2+10
                 
000086 0018      	.DW  0x18
000087 018b      	.DW  _0x20010
000088 0065      	.DW  _0x20000*2+21
                 
000089 0028      	.DW  0x28
00008a 01a3      	.DW  _0x20015
00008b 007d      	.DW  _0x20000*2+45
                 
00008c 0017      	.DW  0x17
00008d 01cb      	.DW  _0x2001D
00008e 00a5      	.DW  _0x20000*2+85
                 
00008f 0017      	.DW  0x17
000090 01e2      	.DW  _0x20021
000091 00bc      	.DW  _0x20000*2+108
                 
000092 0001      	.DW  0x01
000093 01fb      	.DW  _twi_result
000094 00d4      	.DW  _0x2000003*2
                 
000095 0001      	.DW  0x01
000096 0215      	.DW  __seed_G105
000097 00dc      	.DW  _0x20A0060*2
                 
                 _0xFFFFFFFF:
000098 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000099 94f8      	CLI
00009a 27ee      	CLR  R30
00009b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00009c e0f1      	LDI  R31,1
00009d bffb      	OUT  GICR,R31
00009e bfeb      	OUT  GICR,R30
00009f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000a0 e08d      	LDI  R24,(14-2)+1
0000a1 e0a2      	LDI  R26,2
0000a2 27bb      	CLR  R27
                 __CLEAR_REG:
0000a3 93ed      	ST   X+,R30
0000a4 958a      	DEC  R24
0000a5 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000a6 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000a7 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000a8 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000a9 93ed      	ST   X+,R30
0000aa 9701      	SBIW R24,1
0000ab f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000ac eee8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000ad e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000ae 9185      	LPM  R24,Z+
0000af 9195      	LPM  R25,Z+
0000b0 9700      	SBIW R24,0
0000b1 f061      	BREQ __GLOBAL_INI_END
0000b2 91a5      	LPM  R26,Z+
0000b3 91b5      	LPM  R27,Z+
0000b4 9005      	LPM  R0,Z+
0000b5 9015      	LPM  R1,Z+
0000b6 01bf      	MOVW R22,R30
0000b7 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000b8 9005      	LPM  R0,Z+
0000b9 920d      	ST   X+,R0
0000ba 9701      	SBIW R24,1
0000bb f7e1      	BRNE __GLOBAL_INI_LOOP
0000bc 01fb      	MOVW R30,R22
0000bd cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000be e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000bf bfed      	OUT  SPL,R30
0000c0 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000c1 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000c2 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000c3 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000c4 c084      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * i2c_lcd.c
                 ; *
                 ; *
                 ; * Author : vigne
                 ; */
                 ;
                 ;//#include <avr/io.h>
                 ;//#include <util/twi.h>			//--- Give Status of I2C Bus will operation
                 ;//#define F_CPU	100000UL
                 ;#include <delay.h>
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include "twi_i2c.h"
                 ;#include "twi_lcd.h"
                 
                 	.CSEG
                 _PCF8574_write:
                 ; .FSTART _PCF8574_write
0000c5 93aa      	ST   -Y,R26
                 ;	x -> Y+0
0000c6 d0d0      	RCALL _twi_start
0000c7 e4a0      	LDI  R26,LOW(64)
0000c8 d0dd      	RCALL _twi_write_cmd
0000c9 81a8      	LD   R26,Y
0000ca d0e8      	RCALL _twi_write_dwr
0000cb d0f4      	RCALL _twi_stop
0000cc c105      	RJMP _0x20E000A
                 ; .FEND
                 _twi_lcd_4bit_send:
                 ; .FSTART _twi_lcd_4bit_send
0000cd 93aa      	ST   -Y,R26
0000ce 931a      	ST   -Y,R17
                 ;	x -> Y+1
                 ;	temp -> R17
0000cf e010      	LDI  R17,0
0000d0 e0ef      	LDI  R30,LOW(15)
0000d1 225e      	AND  R5,R30
0000d2 81e9      	LDD  R30,Y+1
0000d3 7fe0      	ANDI R30,LOW(0xF0)
0000d4 2f1e      	MOV  R17,R30
0000d5 d45c      	RCALL SUBOPT_0x0
0000d6 81e9      	LDD  R30,Y+1
0000d7 70ef      	ANDI R30,LOW(0xF)
0000d8 95e2      	SWAP R30
0000d9 7fe0      	ANDI R30,0xF0
0000da 2f1e      	MOV  R17,R30
0000db e0ef      	LDI  R30,LOW(15)
0000dc 225e      	AND  R5,R30
0000dd d454      	RCALL SUBOPT_0x0
0000de 8118      	LDD  R17,Y+0
0000df c0fc      	RJMP _0x20E0009
                 ; .FEND
                 _twi_lcd_cmd:
                 ; .FSTART _twi_lcd_cmd
0000e0 93aa      	ST   -Y,R26
                 ;	x -> Y+0
0000e1 e0e8      	LDI  R30,LOW(8)
0000e2 2e5e      	MOV  R5,R30
0000e3 efee      	LDI  R30,LOW(254)
0000e4 225e      	AND  R5,R30
0000e5 d45c      	RCALL SUBOPT_0x1
0000e6 c0eb      	RJMP _0x20E000A
                 ; .FEND
                 _twi_lcd_dwr:
                 ; .FSTART _twi_lcd_dwr
0000e7 93aa      	ST   -Y,R26
                 ;	x -> Y+0
0000e8 e0e9      	LDI  R30,LOW(9)
0000e9 2a5e      	OR   R5,R30
0000ea d457      	RCALL SUBOPT_0x1
0000eb c0e6      	RJMP _0x20E000A
                 ; .FEND
                 _twi_lcd_msg:
                 ; .FSTART _twi_lcd_msg
0000ec d459      	RCALL SUBOPT_0x2
                 ;	*c -> Y+0
                 _0x3:
0000ed d45b      	RCALL SUBOPT_0x3
0000ee 91ec      	LD   R30,X
0000ef 30e0      	CPI  R30,0
0000f0 f019      	BREQ _0x5
0000f1 d45a      	RCALL SUBOPT_0x4
0000f2 dff4      	RCALL _twi_lcd_dwr
0000f3 cff9      	RJMP _0x3
                 _0x5:
0000f4 c0e7      	RJMP _0x20E0009
                 ; .FEND
                 ;	c -> Y+6
                 ;	num_integer -> R16,R17
                 ;	tram -> R19
                 ;	chuc -> R18
                 ;	donvi -> R21
                 _twi_lcd_num:
                 ; .FSTART _twi_lcd_num
0000f5 d779      	RCALL __PUTPARD2
0000f6 d799      	RCALL __SAVELOCR6
                 ;	c -> Y+6
                 ;	num_integer -> R16,R17
                 ;	tram -> R19
                 ;	chuc -> R18
                 ;	donvi -> R21
0000f7 d45a      	RCALL SUBOPT_0x5
                +
0000f8 e0e0     +LDI R30 , LOW ( 0x41200000 )
0000f9 e0f0     +LDI R31 , HIGH ( 0x41200000 )
0000fa e260     +LDI R22 , BYTE3 ( 0x41200000 )
0000fb e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0000fc d64f      	RCALL __MULF12
0000fd d58b      	RCALL __CFD1U
0000fe 018f      	MOVW R16,R30
0000ff 01d8      	MOVW R26,R16
000100 e6e4      	LDI  R30,LOW(100)
000101 e0f0      	LDI  R31,HIGH(100)
000102 d72b      	RCALL __DIVW21
000103 2f3e      	MOV  R19,R30
000104 01d8      	MOVW R26,R16
000105 e0ea      	LDI  R30,LOW(10)
000106 e0f0      	LDI  R31,HIGH(10)
000107 d726      	RCALL __DIVW21
000108 01df      	MOVW R26,R30
000109 e0ea      	LDI  R30,LOW(10)
00010a e0f0      	LDI  R31,HIGH(10)
00010b d727      	RCALL __MODW21
00010c 2f2e      	MOV  R18,R30
00010d 01d8      	MOVW R26,R16
00010e e0ea      	LDI  R30,LOW(10)
00010f e0f0      	LDI  R31,HIGH(10)
000110 d722      	RCALL __MODW21
000111 2f5e      	MOV  R21,R30
000112 e6a1      	LDI  R26,LOW(97)
000113 d443      	RCALL SUBOPT_0x6
000114 2fa3      	MOV  R26,R19
000115 5da0      	SUBI R26,-LOW(48)
000116 d440      	RCALL SUBOPT_0x6
000117 2fa2      	MOV  R26,R18
000118 5da0      	SUBI R26,-LOW(48)
000119 d43d      	RCALL SUBOPT_0x6
00011a 2fa5      	MOV  R26,R21
00011b 5da0      	SUBI R26,-LOW(48)
00011c d43a      	RCALL SUBOPT_0x6
00011d e6a5      	LDI  R26,LOW(101)
00011e d0ae      	RCALL _usart_tx
00011f eca8      	LDI  R26,LOW(200)
000120 e0b0      	LDI  R27,0
000121 d4a7      	RCALL _delay_ms
000122 d774      	RCALL __LOADLOCR6
000123 c2bc      	RJMP _0x20E0007
                 ; .FEND
                 _twi_lcd_clear:
                 ; .FSTART _twi_lcd_clear
000124 e0a1      	LDI  R26,LOW(1)
000125 c021      	RJMP _0x20E000C
                 ; .FEND
                 _twi_lcd_init:
                 ; .FSTART _twi_lcd_init
000126 e0e4      	LDI  R30,LOW(4)
000127 2e5e      	MOV  R5,R30
000128 2da5      	MOV  R26,R5
000129 df9b      	RCALL _PCF8574_write
                +
00012a e483     +LDI R24 , LOW ( 67 )
                +__DELAY_USB_LOOP :
00012b 958a     +DEC R24
00012c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 67
00012d e0a3      	LDI  R26,LOW(3)
00012e dfb1      	RCALL _twi_lcd_cmd
00012f e0a3      	LDI  R26,LOW(3)
000130 dfaf      	RCALL _twi_lcd_cmd
000131 e0a3      	LDI  R26,LOW(3)
000132 dfad      	RCALL _twi_lcd_cmd
000133 e0a2      	LDI  R26,LOW(2)
000134 dfab      	RCALL _twi_lcd_cmd
000135 e2a8      	LDI  R26,LOW(40)
000136 dfa9      	RCALL _twi_lcd_cmd
000137 e0af      	LDI  R26,LOW(15)
000138 dfa7      	RCALL _twi_lcd_cmd
000139 e0a1      	LDI  R26,LOW(1)
00013a dfa5      	RCALL _twi_lcd_cmd
00013b e0a6      	LDI  R26,LOW(6)
00013c dfa3      	RCALL _twi_lcd_cmd
00013d e8a0      	LDI  R26,LOW(128)
00013e dfa1      	RCALL _twi_lcd_cmd
                +
00013f e6a0     +LDI R26 , LOW ( _0x6 + ( 0 ) )
000140 e0b1     +LDI R27 , HIGH ( _0x6 + ( 0 ) )
                 	__POINTW2MN _0x6,0
000141 dfaa      	RCALL _twi_lcd_msg
000142 eea8      	LDI  R26,LOW(1000)
000143 e0b3      	LDI  R27,HIGH(1000)
000144 d484      	RCALL _delay_ms
000145 dfde      	RCALL _twi_lcd_clear
000146 e8a0      	LDI  R26,LOW(128)
                 _0x20E000C:
000147 df98      	RCALL _twi_lcd_cmd
000148 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x6:
000160           	.BYTE 0x10
                 ;// 1 Wire Bus interface functions
                 ;#include <1wire.h>
                 ;
                 ;// DS1820 Temperature Sensor functions
                 ;#include <ds18b20.h>
                 ;#include <stdio.h>
                 ;
                 ;float temp =0;
                 ;
                 ;void main(void)
                 ; 0000 0019 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 001A     // Port C initialization
                 ; 0000 001B //// Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 001C //DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
                 ; 0000 001D //// State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 001E //PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
                 ; 0000 001F 
                 ; 0000 0020     twi_init();                                    //--- TWI Initialize
000149 d025      	RCALL _twi_init
                 ; 0000 0021    twi_lcd_init();                                //--- TWI LCD Initialize
00014a dfdb      	RCALL _twi_lcd_init
                 ; 0000 0022    twi_lcd_msg("RF433");                        //--- Send a String to LCD
                +
00014b e7a0     +LDI R26 , LOW ( _0x7 + ( 0 ) )
00014c e0b1     +LDI R27 , HIGH ( _0x7 + ( 0 ) )
                 	__POINTW2MN _0x7,0
00014d df9e      	RCALL _twi_lcd_msg
                 ; 0000 0023     /* Replace with your application code */
                 ; 0000 0024 
                 ; 0000 0025     w1_init();
00014e d484      	RCALL _w1_init
                 ; 0000 0026     ds18b20_init(NULL, 0 , 0 ,DS18B20_10BIT_RES )  ;
00014f e0e0      	LDI  R30,LOW(0)
000150 e0f0      	LDI  R31,HIGH(0)
000151 93fa      	ST   -Y,R31
000152 93ea      	ST   -Y,R30
000153 93ea      	ST   -Y,R30
000154 93ea      	ST   -Y,R30
000155 e0a1      	LDI  R26,LOW(1)
000156 d3a0      	RCALL _ds18b20_init
                 ; 0000 0027     while (1)
                 _0x8:
                 ; 0000 0028     {
                 ; 0000 0029       temp = ds18b20_temperature(NULL)  ;
000157 e0a0      	LDI  R26,LOW(0)
000158 e0b0      	LDI  R27,0
000159 d366      	RCALL _ds18b20_temperature
00015a 93e0 0205 	STS  _temp,R30
00015c 93f0 0206 	STS  _temp+1,R31
00015e 9360 0207 	STS  _temp+2,R22
000160 9370 0208 	STS  _temp+3,R23
                 ; 0000 002A 
                 ; 0000 002B    //     twi_lcd_cmd(0xC0);
                 ; 0000 002C      //   printf("Nhiet do: %f\r\n", temp);
                 ; 0000 002D   //     twi_lcd_cmd(0xC0);                        //--- Select 2nd Row
                 ; 0000 002E    //  twi_lcd_msg("nhiet do:");            //--- Send a String to LCD
                 ; 0000 002F      //   twi_lcd_num_display(temp)  ;
                 ; 0000 0030  //        usart_msg("uart:");
                 ; 0000 0031 
                 ; 0000 0032         if(PINB.0 == 0)
000162 99b0      	SBIC 0x16,0
000163 c009      	RJMP _0xB
                 ; 0000 0033         {
                 ; 0000 0034 //        twi_lcd_num(temp)
                 ; 0000 0035 //         temp = ds18b20_temperature(NULL)  ;
                 ; 0000 0036 //         usart_msg("uart:");
                 ; 0000 0037 //            usart_tx('a');
                 ; 0000 0038 //            usart_tx('1');
                 ; 0000 0039 //            usart_tx('4');
                 ; 0000 003A //            printf("%f\r\n", temp);
                 ; 0000 003B             twi_lcd_num(temp);
000164 91a0 0205 	LDS  R26,_temp
000166 91b0 0206 	LDS  R27,_temp+1
000168 9180 0207 	LDS  R24,_temp+2
00016a 9190 0208 	LDS  R25,_temp+3
00016c df88      	RCALL _twi_lcd_num
                 ; 0000 003C         }
                 ; 0000 003D     }
                 _0xB:
00016d cfe9      	RJMP _0x8
                 ; 0000 003E }
                 _0xC:
00016e cfff      	RJMP _0xC
                 ; .FEND
                 
                 	.DSEG
                 _0x7:
000170           	.BYTE 0x6
                 ;/*
                 ;
                 ;		TWI MAIN FILE
                 ;		twi.c
                 ;*/
                 ;
                 ;#include "twi_i2c.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <mega8.h>
                 ;#include <delay.h>
                 ;#define F_CPU 8000000UL
                 ;
                 ;void twi_init()
                 ; 0001 000D {
                 
                 	.CSEG
                 _twi_init:
                 ; .FSTART _twi_init
                 ; 0001 000E 	DDRC = 0x30;								//--- PORTC Last two bit as Output
00016f e3e0      	LDI  R30,LOW(48)
000170 bbe4      	OUT  0x14,R30
                 ; 0001 000F 	PORTC = 0x30;
000171 bbe5      	OUT  0x15,R30
                 ; 0001 0010 
                 ; 0001 0011 	usart_init();								//--- Usart Initialization
000172 d050      	RCALL _usart_init
                 ; 0001 0012 	usart_msg("I2C INIT:");				//--- Send String to Com Port of PC
                +
000173 e7a6     +LDI R26 , LOW ( _0x20003 + ( 0 ) )
000174 e0b1     +LDI R27 , HIGH ( _0x20003 + ( 0 ) )
                 	__POINTW2MN _0x20003,0
000175 d3e5      	RCALL SUBOPT_0x7
                 ; 0001 0013 	usart_tx(0x0d);								//--- Next Line
                 ; 0001 0014 
                 ; 0001 0015 	TWCR &= ~(1<<TWEN);							//--- Diable TWI
000176 b7e6      	IN   R30,0x36
000177 7feb      	ANDI R30,0xFB
000178 bfe6      	OUT  0x36,R30
                 ; 0001 0016 	TWBR = BITRATE(TWSR = 0x00);	 			//--- Bit rate with prescaler 4
                +
000179 e0e0     +LDI R30 , LOW ( 0x40800000 )
00017a e0f0     +LDI R31 , HIGH ( 0x40800000 )
00017b e860     +LDI R22 , BYTE3 ( 0x40800000 )
00017c e470     +LDI R23 , BYTE4 ( 0x40800000 )
                 	__GETD1N 0x40800000
00017d d6ec      	RCALL __PUTPARD1
00017e b9e1      	OUT  0x1,R30
00017f 27ff      	CLR  R31
000180 2766      	CLR  R22
000181 2777      	CLR  R23
000182 d53f      	RCALL __CDF1
000183 d3da      	RCALL SUBOPT_0x8
000184 d2cd      	RCALL _pow
                +
000185 e0a0     +LDI R26 , LOW ( 0x40000000 )
000186 e0b0     +LDI R27 , HIGH ( 0x40000000 )
000187 e080     +LDI R24 , BYTE3 ( 0x40000000 )
000188 e490     +LDI R25 , BYTE4 ( 0x40000000 )
                 	__GETD2N 0x40000000
000189 d5c2      	RCALL __MULF12
                +
00018a e0a0     +LDI R26 , LOW ( 0x41C00000 )
00018b e0b0     +LDI R27 , HIGH ( 0x41C00000 )
00018c ec80     +LDI R24 , BYTE3 ( 0x41C00000 )
00018d e491     +LDI R25 , BYTE4 ( 0x41C00000 )
                 	__GETD2N 0x41C00000
00018e d60b      	RCALL __DIVF21
00018f d4f9      	RCALL __CFD1U
000190 b9e0      	OUT  0x0,R30
                 ; 0001 0017 	TWCR = (1<<TWEN);							//--- Enable TWI
000191 e0e4      	LDI  R30,LOW(4)
000192 bfe6      	OUT  0x36,R30
                 ; 0001 0018 	delay_us(10);								//--- Delay
                +
000193 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000194 958a     +DEC R24
000195 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0001 0019 }
000196 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x20003:
000176           	.BYTE 0xA
                 ;
                 ;/* Function to Send Start Condition */
                 ;
                 ;void twi_start()
                 ; 0001 001E {
                 
                 	.CSEG
                 _twi_start:
                 ; .FSTART _twi_start
                 ; 0001 001F     char status;
                 ; 0001 0020 	TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		//--- Start Condition as per Datasheet
000197 931a      	ST   -Y,R17
                 ;	status -> R17
000198 eae4      	LDI  R30,LOW(164)
000199 bfe6      	OUT  0x36,R30
                 ; 0001 0021 	while(!(TWCR & (1<<TWINT)));				//--- Wait till start condition is transmitted to Slave
                 _0x20004:
00019a d3c6      	RCALL SUBOPT_0x9
00019b f3f1      	BREQ _0x20004
                 ; 0001 0022     while(!(TWCR&(1<<TWINT)));	                /* Wait until TWI finish its current job */
                 _0x20007:
00019c d3c4      	RCALL SUBOPT_0x9
00019d f3f1      	BREQ _0x20007
                 ; 0001 0023     status=TWSR&0xF8;		                    /* Read TWI status register */
00019e d3c5      	RCALL SUBOPT_0xA
                 ; 0001 0024     if(status!=0x10) return ;		            /* Check for repeated start transmitted */
00019f 3110      	CPI  R17,16
0001a0 f419      	BRNE _0x20E000B
                 ; 0001 0025 
                 ; 0001 0026 	usart_msg("Start Exe.");					//--- Feedback msg to check for error
                +
0001a1 e8a0     +LDI R26 , LOW ( _0x2000B + ( 0 ) )
0001a2 e0b1     +LDI R27 , HIGH ( _0x2000B + ( 0 ) )
                 	__POINTW2MN _0x2000B,0
0001a3 d3b7      	RCALL SUBOPT_0x7
                 ; 0001 0027 	usart_tx(0x0D);								//--- Next Line
                 ; 0001 0028 }
                 _0x20E000B:
0001a4 9119      	LD   R17,Y+
0001a5 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x2000B:
000180           	.BYTE 0xB
                 ;
                 ;/* Function to Send Slave Address for Write operation */
                 ;
                 ;void twi_write_cmd(unsigned char address)
                 ; 0001 002D {
                 
                 	.CSEG
                 _twi_write_cmd:
                 ; .FSTART _twi_write_cmd
                 ; 0001 002E     char status;
                 ; 0001 002F 	TWDR=address;								//--- SLA Address and write instruction
0001a6 d3c1      	RCALL SUBOPT_0xB
                 ;	address -> Y+1
                 ;	status -> R17
                 ; 0001 0030 	TWCR=(1<<TWINT)|(1<<TWEN);					//--- Clear TWI interrupt flag,Enable TWI
                 ; 0001 0031 	while (!(TWCR & (1<<TWINT)));				//--- Wait till complete TWDR byte transmitted to Slave
                 _0x2000C:
0001a7 d3b9      	RCALL SUBOPT_0x9
0001a8 f3f1      	BREQ _0x2000C
                 ; 0001 0032     status=TWSR&0xF8;		    /* Read TWI status register */
0001a9 d3ba      	RCALL SUBOPT_0xA
                 ; 0001 0033     if(status== 0x28) return ;	/* Check for data transmitted &ack received */
0001aa 3218      	CPI  R17,40
0001ab f411      	BRNE _0x2000F
0001ac 8118      	LDD  R17,Y+0
0001ad c02e      	RJMP _0x20E0009
                 ; 0001 0034 
                 ; 0001 0035 	usart_msg("ACK Received for MT SLA");		//--- Feedback msg to check for error
                 _0x2000F:
                +
0001ae e8ab     +LDI R26 , LOW ( _0x20010 + ( 0 ) )
0001af e0b1     +LDI R27 , HIGH ( _0x20010 + ( 0 ) )
                 	__POINTW2MN _0x20010,0
0001b0 d3aa      	RCALL SUBOPT_0x7
                 ; 0001 0036 	usart_tx(0x0D);								//--- Next Line
                 ; 0001 0037 }
0001b1 8118      	LDD  R17,Y+0
0001b2 c029      	RJMP _0x20E0009
                 ; .FEND
                 
                 	.DSEG
                 _0x20010:
00018b           	.BYTE 0x18
                 ;
                 ;/* Function to Send Data to Slave Device  */
                 ;
                 ;void twi_write_dwr(unsigned char data)
                 ; 0001 003C {
                 
                 	.CSEG
                 _twi_write_dwr:
                 ; .FSTART _twi_write_dwr
                 ; 0001 003D     char status;
                 ; 0001 003E 	TWDR=data;									//--- Put data in TWDR
0001b3 d3b4      	RCALL SUBOPT_0xB
                 ;	data -> Y+1
                 ;	status -> R17
                 ; 0001 003F 	TWCR=(1<<TWINT)|(1<<TWEN);					//--- Clear TWI interrupt flag,Enable TWI
                 ; 0001 0040 	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
                 _0x20011:
0001b4 d3ac      	RCALL SUBOPT_0x9
0001b5 f3f1      	BREQ _0x20011
                 ; 0001 0041     status=TWSR&0xF8;		    /* Read TWI status register */
0001b6 d3ad      	RCALL SUBOPT_0xA
                 ; 0001 0042     if(status==0x28) return ;	/* Check for data transmitted &ack received */
0001b7 3218      	CPI  R17,40
0001b8 f411      	BRNE _0x20014
0001b9 8118      	LDD  R17,Y+0
0001ba c021      	RJMP _0x20E0009
                 ; 0001 0043 
                 ; 0001 0044 	usart_msg("ACK Received for MT Data twi_write_dwr ");		//--- Feedback msg to check error
                 _0x20014:
                +
0001bb eaa3     +LDI R26 , LOW ( _0x20015 + ( 0 ) )
0001bc e0b1     +LDI R27 , HIGH ( _0x20015 + ( 0 ) )
                 	__POINTW2MN _0x20015,0
0001bd d39d      	RCALL SUBOPT_0x7
                 ; 0001 0045 	usart_tx(0x0D);								//--- Next Line
                 ; 0001 0046 
                 ; 0001 0047 }
0001be 8118      	LDD  R17,Y+0
0001bf c01c      	RJMP _0x20E0009
                 ; .FEND
                 
                 	.DSEG
                 _0x20015:
0001a3           	.BYTE 0x28
                 ;
                 ;/* Function to Send Stop Condition */
                 ;
                 ;void twi_stop()
                 ; 0001 004C {
                 
                 	.CSEG
                 _twi_stop:
                 ; .FSTART _twi_stop
                 ; 0001 004D 	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);		//--- Stop Condition as per Datasheet
0001c0 e9e4      	LDI  R30,LOW(148)
0001c1 bfe6      	OUT  0x36,R30
                 ; 0001 004E }
0001c2 9508      	RET
                 ; .FEND
                 ;
                 ;/* Function to Send Repeated Start Condition */
                 ;
                 ;
                 ;void twi_repeated_start()
                 ; 0001 0054 {
                 ; 0001 0055     char status;
                 ; 0001 0056 	TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		//--- Repeated Start Condition as per Datasheet
                 ;	status -> R17
                 ; 0001 0057 	while(!(TWCR & (1<<TWINT)));				//--- Wait till restart condition is transmitted to Slave
                 ; 0001 0058 	status=TWSR&0xF8;		/* Read TWI status register */
                 ; 0001 0059     if(status!=0x10)     return ;		/* Check for repeated start transmitted */
                 ; 0001 005A 
                 ; 0001 005B //	usart_msg("Repeated Start Exe.");			//--- Feedback msg to check error
                 ; 0001 005C //	usart_tx(0x0D);								//--- Next Line
                 ; 0001 005D }
                 ;
                 ;
                 ;/* Function to Send Read Acknowledgment */
                 ;
                 ;char twi_read_ack()
                 ; 0001 0063 {
                 ; 0001 0064 	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);		//--- Acknowledgment Condition as per Datasheet
                 ; 0001 0065 	while (!(TWCR & (1<<TWINT)));				//--- Wait until Acknowledgment Condition is transmitted to Slave
                 ; 0001 0066 //	while(TW_STATUS != TW_MR_DATA_ACK);			//--- Check for Acknowledgment
                 ; 0001 0067 	usart_msg("Receiving MR data ACK ");		//--- Feedback msg to check error
                 ; 0001 0068 	usart_tx(0x0D);								//--- Next Line
                 ; 0001 0069 	return TWDR;								//--- Return received data from Slave
                 ; 0001 006A }
                 
                 	.DSEG
                 _0x2001D:
0001cb           	.BYTE 0x17
                 ;
                 ;/* Function to Send Read No Acknowledgment */
                 ;
                 ;char twi_read_nack()
                 ; 0001 006F {
                 
                 	.CSEG
                 ; 0001 0070 	TWCR=(1<<TWEN)|(1<<TWINT);					//--- No Acknowledgment Condition as per Datasheet
                 ; 0001 0071 	while (!(TWCR & (1<<TWINT)));				//--- Wait until No Acknowledgment Condition is transmitted to Slave
                 ; 0001 0072 //	while(TW_STATUS != TW_MR_DATA_NACK);		--- Check for Acknowledgment
                 ; 0001 0073 	usart_msg("Receiving MR Data NACK");		//--- Feedback msg to check error
                 ; 0001 0074 	usart_tx(0x0D);								//--- Next Line
                 ; 0001 0075 	return TWDR;								//--- Return received data
                 ; 0001 0076 }
                 
                 	.DSEG
                 _0x20021:
0001e2           	.BYTE 0x17
                 ;
                 ;/* Function to Initialize USART */
                 ;
                 ;void usart_init()
                 ; 0001 007B {
                 
                 	.CSEG
                 _usart_init:
                 ; .FSTART _usart_init
                 ; 0001 007C 	UBRRH = 0;										//--- USART Baud Rate is set to 115200
0001c3 e0e0      	LDI  R30,LOW(0)
0001c4 bde0      	OUT  0x20,R30
                 ; 0001 007D 	UBRRL = UBRRL=0x33;//0x08;
0001c5 e3e3      	LDI  R30,LOW(51)
0001c6 b9e9      	OUT  0x9,R30
0001c7 b9e9      	OUT  0x9,R30
                 ; 0001 007E 	UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);	//--- 8-Bit Data Selected
0001c8 e8e6      	LDI  R30,LOW(134)
0001c9 bde0      	OUT  0x20,R30
                 ; 0001 007F 	UCSRB = (1<<TXEN) | (1<<RXEN);					//--- Enable TX & RX
0001ca e1e8      	LDI  R30,LOW(24)
0001cb b9ea      	OUT  0xA,R30
                 ; 0001 0080 }
0001cc 9508      	RET
                 ; .FEND
                 ;
                 ;/* Function to Transmit data */
                 ;
                 ;void usart_tx(char x)
                 ; 0001 0085 {
                 _usart_tx:
                 ; .FSTART _usart_tx
                 ; 0001 0086 	while (!( UCSRA & (1<<UDRE)));					//--- Check for Buffer is empty
0001cd 93aa      	ST   -Y,R26
                 ;	x -> Y+0
                 _0x20022:
0001ce 9b5d      	SBIS 0xB,5
0001cf cffe      	RJMP _0x20022
                 ; 0001 0087 	UDR = x;										//--- Send data to USART Buffer
0001d0 81e8      	LD   R30,Y
0001d1 b9ec      	OUT  0xC,R30
                 ; 0001 0088 }
                 _0x20E000A:
0001d2 9621      	ADIW R28,1
0001d3 9508      	RET
                 ; .FEND
                 ;
                 ;/* Function to Receive data */
                 ;
                 ;unsigned char usart_rx()
                 ; 0001 008D {
                 ; 0001 008E 	while(!(UCSRA & (1<<RXC)));						//--- Check for data received completed
                 ; 0001 008F 	return(UDR);									//--- Return the received data
                 ; 0001 0090 }
                 ;
                 ;/* Function to transmit string */
                 ;
                 ;void usart_msg(char *c)
                 ; 0001 0095 {
                 _usart_msg:
                 ; .FSTART _usart_msg
                 ; 0001 0096 	while(*c != '\0')								//--- Check for Null
0001d4 d371      	RCALL SUBOPT_0x2
                 ;	*c -> Y+0
                 _0x20028:
0001d5 d373      	RCALL SUBOPT_0x3
0001d6 91ec      	LD   R30,X
0001d7 30e0      	CPI  R30,0
0001d8 f019      	BREQ _0x2002A
                 ; 0001 0097 	usart_tx(*c++);									//--- Send the String
0001d9 d372      	RCALL SUBOPT_0x4
0001da dff2      	RCALL _usart_tx
0001db cff9      	RJMP _0x20028
                 _0x2002A:
                 ; 0001 0098 }
                 _0x20E0009:
0001dc 9622      	ADIW R28,2
0001dd 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;/****** END of Program ******/
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 _twi_int_handler:
                 ; .FSTART _twi_int_handler
0001de 920a      	ST   -Y,R0
0001df 921a      	ST   -Y,R1
0001e0 92fa      	ST   -Y,R15
0001e1 936a      	ST   -Y,R22
0001e2 937a      	ST   -Y,R23
0001e3 938a      	ST   -Y,R24
0001e4 939a      	ST   -Y,R25
0001e5 93aa      	ST   -Y,R26
0001e6 93ba      	ST   -Y,R27
0001e7 93ea      	ST   -Y,R30
0001e8 93fa      	ST   -Y,R31
0001e9 b7ef      	IN   R30,SREG
0001ea 93ea      	ST   -Y,R30
0001eb d6a4      	RCALL __SAVELOCR6
0001ec 9110 01fa 	LDS  R17,_twi_rx_index
0001ee 9100 01f9 	LDS  R16,_twi_tx_index
0001f0 9130 020c 	LDS  R19,_bytes_to_tx_G100
0001f2 9120 01fb 	LDS  R18,_twi_result
0001f4 2fe1      	MOV  R30,R17
0001f5 91a0 020d 	LDS  R26,_twi_rx_buffer_G100
0001f7 91b0 020e 	LDS  R27,_twi_rx_buffer_G100+1
0001f9 e0f0      	LDI  R31,0
0001fa 0fea      	ADD  R30,R26
0001fb 1ffb      	ADC  R31,R27
0001fc 01af      	MOVW R20,R30
0001fd b1e1      	IN   R30,0x1
0001fe 7fe8      	ANDI R30,LOW(0xF8)
0001ff 30e8      	CPI  R30,LOW(0x8)
000200 f411      	BRNE _0x2000017
000201 e020      	LDI  R18,LOW(0)
000202 c002      	RJMP _0x2000018
                 _0x2000017:
000203 31e0      	CPI  R30,LOW(0x10)
000204 f419      	BRNE _0x2000019
                 _0x2000018:
000205 91e0 0209 	LDS  R30,_slave_address_G100
000207 c010      	RJMP _0x2000067
                 _0x2000019:
000208 31e8      	CPI  R30,LOW(0x18)
000209 f011      	BREQ _0x200001D
00020a 32e8      	CPI  R30,LOW(0x28)
00020b f521      	BRNE _0x200001E
                 _0x200001D:
00020c 1703      	CP   R16,R19
00020d f480      	BRSH _0x200001F
00020e 2fe0      	MOV  R30,R16
00020f 5f0f      	SUBI R16,-1
000210 91a0 020a 	LDS  R26,_twi_tx_buffer_G100
000212 91b0 020b 	LDS  R27,_twi_tx_buffer_G100+1
000214 e0f0      	LDI  R31,0
000215 0fae      	ADD  R26,R30
000216 1fbf      	ADC  R27,R31
000217 91ec      	LD   R30,X
                 _0x2000067:
000218 b9e3      	OUT  0x3,R30
000219 b7e6      	IN   R30,0x36
00021a 70ef      	ANDI R30,LOW(0xF)
00021b 68e0      	ORI  R30,0x80
00021c bfe6      	OUT  0x36,R30
00021d c011      	RJMP _0x2000020
                 _0x200001F:
00021e 91e0 020f 	LDS  R30,_bytes_to_rx_G100
000220 171e      	CP   R17,R30
000221 f460      	BRSH _0x2000021
000222 91e0 0209 	LDS  R30,_slave_address_G100
000224 60e1      	ORI  R30,1
000225 93e0 0209 	STS  _slave_address_G100,R30
000227 94e8      	CLT
000228 f820      	BLD  R2,0
000229 b7e6      	IN   R30,0x36
00022a 70ef      	ANDI R30,LOW(0xF)
00022b 6ae0      	ORI  R30,LOW(0xA0)
00022c bfe6      	OUT  0x36,R30
00022d c0fb      	RJMP _0x2000016
                 _0x2000021:
00022e c033      	RJMP _0x2000022
                 _0x2000020:
00022f c0f9      	RJMP _0x2000016
                 _0x200001E:
000230 35e0      	CPI  R30,LOW(0x50)
000231 f429      	BRNE _0x2000023
000232 b1e3      	IN   R30,0x3
000233 01da      	MOVW R26,R20
000234 93ec      	ST   X,R30
000235 5f1f      	SUBI R17,-LOW(1)
000236 c002      	RJMP _0x2000024
                 _0x2000023:
000237 34e0      	CPI  R30,LOW(0x40)
000238 f471      	BRNE _0x2000025
                 _0x2000024:
000239 91e0 020f 	LDS  R30,_bytes_to_rx_G100
00023b 50e1      	SUBI R30,LOW(1)
00023c 171e      	CP   R17,R30
00023d f020      	BRLO _0x2000026
00023e b7e6      	IN   R30,0x36
00023f 70ef      	ANDI R30,LOW(0xF)
000240 68e0      	ORI  R30,0x80
000241 c003      	RJMP _0x2000068
                 _0x2000026:
000242 b7e6      	IN   R30,0x36
000243 70ef      	ANDI R30,LOW(0xF)
000244 6ce0      	ORI  R30,LOW(0xC0)
                 _0x2000068:
000245 bfe6      	OUT  0x36,R30
000246 c0e2      	RJMP _0x2000016
                 _0x2000025:
000247 35e8      	CPI  R30,LOW(0x58)
000248 f429      	BRNE _0x2000028
000249 b1e3      	IN   R30,0x3
00024a 01da      	MOVW R26,R20
00024b 93ec      	ST   X,R30
00024c 5f1f      	SUBI R17,-LOW(1)
00024d c002      	RJMP _0x2000029
                 _0x2000028:
00024e 32e0      	CPI  R30,LOW(0x20)
00024f f409      	BRNE _0x200002A
                 _0x2000029:
000250 c002      	RJMP _0x200002B
                 _0x200002A:
000251 33e0      	CPI  R30,LOW(0x30)
000252 f409      	BRNE _0x200002C
                 _0x200002B:
000253 c002      	RJMP _0x200002D
                 _0x200002C:
000254 34e8      	CPI  R30,LOW(0x48)
000255 f469      	BRNE _0x200002E
                 _0x200002D:
000256 3020      	CPI  R18,0
000257 f451      	BRNE _0x200002F
000258 fe20      	SBRS R2,0
000259 c003      	RJMP _0x2000030
00025a 1703      	CP   R16,R19
00025b f028      	BRLO _0x2000032
00025c c005      	RJMP _0x2000033
                 _0x2000030:
00025d 91e0 020f 	LDS  R30,_bytes_to_rx_G100
00025f 171e      	CP   R17,R30
000260 f408      	BRSH _0x2000034
                 _0x2000032:
000261 e024      	LDI  R18,LOW(4)
                 _0x2000034:
                 _0x2000033:
                 _0x200002F:
                 _0x2000022:
000262 c0c0      	RJMP _0x2000069
                 _0x200002E:
000263 33e8      	CPI  R30,LOW(0x38)
000264 f429      	BRNE _0x2000037
000265 e022      	LDI  R18,LOW(2)
000266 b7e6      	IN   R30,0x36
000267 70ef      	ANDI R30,LOW(0xF)
000268 68e0      	ORI  R30,0x80
000269 c0bc      	RJMP _0x200006A
                 _0x2000037:
00026a 36e8      	CPI  R30,LOW(0x68)
00026b f011      	BREQ _0x200003A
00026c 37e8      	CPI  R30,LOW(0x78)
00026d f411      	BRNE _0x200003B
                 _0x200003A:
00026e e022      	LDI  R18,LOW(2)
00026f c005      	RJMP _0x200003C
                 _0x200003B:
000270 36e0      	CPI  R30,LOW(0x60)
000271 f011      	BREQ _0x200003F
000272 37e0      	CPI  R30,LOW(0x70)
000273 f491      	BRNE _0x2000040
                 _0x200003F:
000274 e020      	LDI  R18,LOW(0)
                 _0x200003C:
000275 e010      	LDI  R17,LOW(0)
000276 94e8      	CLT
000277 f820      	BLD  R2,0
000278 91e0 0210 	LDS  R30,_twi_rx_buffer_size_G100
00027a 30e0      	CPI  R30,0
00027b f429      	BRNE _0x2000041
00027c e021      	LDI  R18,LOW(1)
00027d b7e6      	IN   R30,0x36
00027e 70ef      	ANDI R30,LOW(0xF)
00027f 68e0      	ORI  R30,0x80
000280 c003      	RJMP _0x200006B
                 _0x2000041:
000281 b7e6      	IN   R30,0x36
000282 70ef      	ANDI R30,LOW(0xF)
000283 6ce0      	ORI  R30,LOW(0xC0)
                 _0x200006B:
000284 bfe6      	OUT  0x36,R30
000285 c0a3      	RJMP _0x2000016
                 _0x2000040:
000286 38e0      	CPI  R30,LOW(0x80)
000287 f011      	BREQ _0x2000044
000288 39e0      	CPI  R30,LOW(0x90)
000289 f529      	BRNE _0x2000045
                 _0x2000044:
00028a fe20      	SBRS R2,0
00028b c002      	RJMP _0x2000046
00028c e021      	LDI  R18,LOW(1)
00028d c095      	RJMP _0x2000047
                 _0x2000046:
00028e b1e3      	IN   R30,0x3
00028f 01da      	MOVW R26,R20
000290 93ec      	ST   X,R30
000291 5f1f      	SUBI R17,-LOW(1)
000292 91e0 0210 	LDS  R30,_twi_rx_buffer_size_G100
000294 171e      	CP   R17,R30
000295 f4b0      	BRSH _0x2000048
000296 91e0 0211 	LDS  R30,_twi_slave_rx_handler_G100
000298 91f0 0212 	LDS  R31,_twi_slave_rx_handler_G100+1
00029a 9730      	SBIW R30,0
00029b f411      	BRNE _0x2000049
00029c e026      	LDI  R18,LOW(6)
00029d c085      	RJMP _0x2000047
                 _0x2000049:
00029e e0a0      	LDI  R26,LOW(0)
                +
00029f 91e0 0211+LDS R30 , _twi_slave_rx_handler_G100 + ( 0 )
0002a1 91f0 0212+LDS R31 , _twi_slave_rx_handler_G100 + ( 0 ) + 1
0002a3 9509     +ICALL
                 	__CALL1MN _twi_slave_rx_handler_G100,0
0002a4 30e0      	CPI  R30,0
0002a5 f029      	BREQ _0x200004A
0002a6 b7e6      	IN   R30,0x36
0002a7 70ef      	ANDI R30,LOW(0xF)
0002a8 6ce0      	ORI  R30,LOW(0xC0)
0002a9 bfe6      	OUT  0x36,R30
0002aa c07e      	RJMP _0x2000016
                 _0x200004A:
0002ab c002      	RJMP _0x200004B
                 _0x2000048:
0002ac 9468      	SET
0002ad f820      	BLD  R2,0
                 _0x200004B:
0002ae c002      	RJMP _0x200004C
                 _0x2000045:
0002af 38e8      	CPI  R30,LOW(0x88)
0002b0 f409      	BRNE _0x200004D
                 _0x200004C:
0002b1 c002      	RJMP _0x200004E
                 _0x200004D:
0002b2 39e8      	CPI  R30,LOW(0x98)
0002b3 f429      	BRNE _0x200004F
                 _0x200004E:
0002b4 b7e6      	IN   R30,0x36
0002b5 70ef      	ANDI R30,LOW(0xF)
0002b6 68e0      	ORI  R30,0x80
0002b7 bfe6      	OUT  0x36,R30
0002b8 c070      	RJMP _0x2000016
                 _0x200004F:
0002b9 3ae0      	CPI  R30,LOW(0xA0)
0002ba f4a9      	BRNE _0x2000050
0002bb b7e6      	IN   R30,0x36
0002bc 70ef      	ANDI R30,LOW(0xF)
0002bd 6ce0      	ORI  R30,LOW(0xC0)
0002be bfe6      	OUT  0x36,R30
0002bf 9468      	SET
0002c0 f821      	BLD  R2,1
0002c1 91e0 0211 	LDS  R30,_twi_slave_rx_handler_G100
0002c3 91f0 0212 	LDS  R31,_twi_slave_rx_handler_G100+1
0002c5 9730      	SBIW R30,0
0002c6 f039      	BREQ _0x2000051
0002c7 e0a1      	LDI  R26,LOW(1)
                +
0002c8 91e0 0211+LDS R30 , _twi_slave_rx_handler_G100 + ( 0 )
0002ca 91f0 0212+LDS R31 , _twi_slave_rx_handler_G100 + ( 0 ) + 1
0002cc 9509     +ICALL
                 	__CALL1MN _twi_slave_rx_handler_G100,0
0002cd c001      	RJMP _0x2000052
                 _0x2000051:
0002ce e026      	LDI  R18,LOW(6)
                 _0x2000052:
0002cf c059      	RJMP _0x2000016
                 _0x2000050:
0002d0 3be0      	CPI  R30,LOW(0xB0)
0002d1 f411      	BRNE _0x2000053
0002d2 e022      	LDI  R18,LOW(2)
0002d3 c002      	RJMP _0x2000054
                 _0x2000053:
0002d4 3ae8      	CPI  R30,LOW(0xA8)
0002d5 f4b9      	BRNE _0x2000055
                 _0x2000054:
0002d6 91e0 0213 	LDS  R30,_twi_slave_tx_handler_G100
0002d8 91f0 0214 	LDS  R31,_twi_slave_tx_handler_G100+1
0002da 9730      	SBIW R30,0
0002db f059      	BREQ _0x2000056
0002dc e0a0      	LDI  R26,LOW(0)
                +
0002dd 91e0 0213+LDS R30 , _twi_slave_tx_handler_G100 + ( 0 )
0002df 91f0 0214+LDS R31 , _twi_slave_tx_handler_G100 + ( 0 ) + 1
0002e1 9509     +ICALL
                 	__CALL1MN _twi_slave_tx_handler_G100,0
0002e2 2f3e      	MOV  R19,R30
0002e3 30e0      	CPI  R30,0
0002e4 f011      	BREQ _0x2000058
0002e5 e020      	LDI  R18,LOW(0)
0002e6 c002      	RJMP _0x2000059
                 _0x2000056:
                 _0x2000058:
0002e7 e026      	LDI  R18,LOW(6)
0002e8 c03a      	RJMP _0x2000047
                 _0x2000059:
0002e9 e000      	LDI  R16,LOW(0)
0002ea 94e8      	CLT
0002eb f820      	BLD  R2,0
0002ec c002      	RJMP _0x200005A
                 _0x2000055:
0002ed 3be8      	CPI  R30,LOW(0xB8)
0002ee f4e1      	BRNE _0x200005B
                 _0x200005A:
0002ef fe20      	SBRS R2,0
0002f0 c002      	RJMP _0x200005C
0002f1 e021      	LDI  R18,LOW(1)
0002f2 c030      	RJMP _0x2000047
                 _0x200005C:
0002f3 2fe0      	MOV  R30,R16
0002f4 5f0f      	SUBI R16,-1
0002f5 91a0 020a 	LDS  R26,_twi_tx_buffer_G100
0002f7 91b0 020b 	LDS  R27,_twi_tx_buffer_G100+1
0002f9 e0f0      	LDI  R31,0
0002fa 0fae      	ADD  R26,R30
0002fb 1fbf      	ADC  R27,R31
0002fc 91ec      	LD   R30,X
0002fd b9e3      	OUT  0x3,R30
0002fe 1703      	CP   R16,R19
0002ff f420      	BRSH _0x200005D
000300 b7e6      	IN   R30,0x36
000301 70ef      	ANDI R30,LOW(0xF)
000302 6ce0      	ORI  R30,LOW(0xC0)
000303 c005      	RJMP _0x200006C
                 _0x200005D:
000304 9468      	SET
000305 f820      	BLD  R2,0
000306 b7e6      	IN   R30,0x36
000307 70ef      	ANDI R30,LOW(0xF)
000308 68e0      	ORI  R30,0x80
                 _0x200006C:
000309 bfe6      	OUT  0x36,R30
00030a c01e      	RJMP _0x2000016
                 _0x200005B:
00030b 3ce0      	CPI  R30,LOW(0xC0)
00030c f011      	BREQ _0x2000060
00030d 3ce8      	CPI  R30,LOW(0xC8)
00030e f489      	BRNE _0x2000061
                 _0x2000060:
00030f b7e6      	IN   R30,0x36
000310 70ef      	ANDI R30,LOW(0xF)
000311 6ce0      	ORI  R30,LOW(0xC0)
000312 bfe6      	OUT  0x36,R30
000313 91e0 0213 	LDS  R30,_twi_slave_tx_handler_G100
000315 91f0 0214 	LDS  R31,_twi_slave_tx_handler_G100+1
000317 9730      	SBIW R30,0
000318 f031      	BREQ _0x2000062
000319 e0a1      	LDI  R26,LOW(1)
                +
00031a 91e0 0213+LDS R30 , _twi_slave_tx_handler_G100 + ( 0 )
00031c 91f0 0214+LDS R31 , _twi_slave_tx_handler_G100 + ( 0 ) + 1
00031e 9509     +ICALL
                 	__CALL1MN _twi_slave_tx_handler_G100,0
                 _0x2000062:
00031f c007      	RJMP _0x2000035
                 _0x2000061:
000320 30e0      	CPI  R30,0
000321 f439      	BRNE _0x2000016
000322 e023      	LDI  R18,LOW(3)
                 _0x2000047:
                 _0x2000069:
000323 b7e6      	IN   R30,0x36
000324 70ef      	ANDI R30,LOW(0xF)
000325 6de0      	ORI  R30,LOW(0xD0)
                 _0x200006A:
000326 bfe6      	OUT  0x36,R30
                 _0x2000035:
000327 9468      	SET
000328 f821      	BLD  R2,1
                 _0x2000016:
000329 9310 01fa 	STS  _twi_rx_index,R17
00032b 9300 01f9 	STS  _twi_tx_index,R16
00032d 9320 01fb 	STS  _twi_result,R18
00032f 9330 020c 	STS  _bytes_to_tx_G100,R19
000331 d565      	RCALL __LOADLOCR6
000332 9626      	ADIW R28,6
000333 91e9      	LD   R30,Y+
000334 bfef      	OUT  SREG,R30
000335 91f9      	LD   R31,Y+
000336 91e9      	LD   R30,Y+
000337 91b9      	LD   R27,Y+
000338 91a9      	LD   R26,Y+
000339 9199      	LD   R25,Y+
00033a 9189      	LD   R24,Y+
00033b 9179      	LD   R23,Y+
00033c 9169      	LD   R22,Y+
00033d 90f9      	LD   R15,Y+
00033e 9019      	LD   R1,Y+
00033f 9009      	LD   R0,Y+
000340 9518      	RETI
                 ; .FEND
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
000341 d52d      	RCALL __PUTPARD2
000342 817b         ldd  r23,y+3
000343 816a         ldd  r22,y+2
000344 81f9         ldd  r31,y+1
000345 81e8         ld   r30,y
000346 fb77         bst  r23,7
000347 0f77         lsl  r23
000348 fd67         sbrc r22,7
000349 6071         sbr  r23,1
00034a 2f97         mov  r25,r23
00034b 579e         subi r25,0x7e
00034c f081         breq __ftrunc0
00034d f078         brcs __ftrunc0
00034e 3198         cpi  r25,24
00034f f490         brsh __ftrunc1
000350 27aa         clr  r26
000351 27bb         clr  r27
000352 2788         clr  r24
                 __ftrunc2:
000353 9408         sec
000354 9587         ror  r24
000355 95b7         ror  r27
000356 95a7         ror  r26
000357 959a         dec  r25
000358 f7d1         brne __ftrunc2
000359 23ea         and  r30,r26
00035a 23fb         and  r31,r27
00035b 2368         and  r22,r24
00035c c005         rjmp __ftrunc1
                 __ftrunc0:
00035d 94e8         clt
00035e 2777         clr  r23
00035f 27ee         clr  r30
000360 27ff         clr  r31
000361 2766         clr  r22
                 __ftrunc1:
000362 776f         cbr  r22,0x80
000363 9576         lsr  r23
000364 f408         brcc __ftrunc3
000365 6860         sbr  r22,0x80
                 __ftrunc3:
000366 f977         bld  r23,7
000367 91a9         ld   r26,y+
000368 91b9         ld   r27,y+
000369 9189         ld   r24,y+
00036a 9199         ld   r25,y+
00036b 17ea         cp   r30,r26
00036c 07fb         cpc  r31,r27
00036d 0768         cpc  r22,r24
00036e 0779         cpc  r23,r25
00036f fb97         bst  r25,7
000370 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
000371 d4fd      	RCALL __PUTPARD2
000372 d4ed      	RCALL __GETD2S0
000373 dfcd      	RCALL _ftrunc
000374 d4f0      	RCALL __PUTD1S0
000375 f411          brne __floor1
                 __floor0:
000376 d1f8      	RCALL SUBOPT_0xC
000377 c003      	RJMP _0x20E0008
                 __floor1:
000378 f7ee          brtc __floor0
000379 d1f5      	RCALL SUBOPT_0xC
00037a d1f6      	RCALL SUBOPT_0xD
                 _0x20E0008:
00037b 9624      	ADIW R28,4
00037c 9508      	RET
                 ; .FEND
                 _log:
                 ; .FSTART _log
00037d d4f1      	RCALL __PUTPARD2
00037e 9724      	SBIW R28,4
00037f d514      	RCALL __SAVELOCR2
000380 d1d1      	RCALL SUBOPT_0x5
000381 d503      	RCALL __CPD02
000382 f02c      	BRLT _0x202000C
                +
000383 efef     +LDI R30 , LOW ( 0xFF7FFFFF )
000384 efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
000385 e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
000386 ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
000387 c057      	RJMP _0x20E0006
                 _0x202000C:
000388 d1ee      	RCALL SUBOPT_0xE
000389 d4e0      	RCALL __PUTPARD1
00038a b7ad      	IN   R26,SPL
00038b b7be      	IN   R27,SPH
00038c 9711      	SBIW R26,1
00038d 931f      	PUSH R17
00038e 930f      	PUSH R16
00038f d2a9      	RCALL _frexp
000390 910f      	POP  R16
000391 911f      	POP  R17
000392 d1e9      	RCALL SUBOPT_0xF
000393 d1be      	RCALL SUBOPT_0x5
                +
000394 efe3     +LDI R30 , LOW ( 0x3F3504F3 )
000395 e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
000396 e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
000397 e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
000398 d446      	RCALL __CMPF12
000399 f430      	BRSH _0x202000D
00039a d1dc      	RCALL SUBOPT_0xE
00039b d1b6      	RCALL SUBOPT_0x5
00039c d35f      	RCALL __ADDF12
00039d d1de      	RCALL SUBOPT_0xF
                +
00039e 5001     +SUBI R16 , LOW ( 1 )
00039f 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x202000D:
0003a0 d1d6      	RCALL SUBOPT_0xE
0003a1 d1cf      	RCALL SUBOPT_0xD
0003a2 937f      	PUSH R23
0003a3 936f      	PUSH R22
0003a4 93ff      	PUSH R31
0003a5 93ef      	PUSH R30
0003a6 d1d0      	RCALL SUBOPT_0xE
                +
0003a7 e0a0     +LDI R26 , LOW ( 0x3F800000 )
0003a8 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0003a9 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0003aa e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0003ab d350      	RCALL __ADDF12
0003ac 91af      	POP  R26
0003ad 91bf      	POP  R27
0003ae 918f      	POP  R24
0003af 919f      	POP  R25
0003b0 d3e9      	RCALL __DIVF21
0003b1 d1cf      	RCALL SUBOPT_0x10
                +
0003b2 e2a6     +LDI R26 , LOW ( 0x3F654226 )
0003b3 e4b2     +LDI R27 , HIGH ( 0x3F654226 )
0003b4 e685     +LDI R24 , BYTE3 ( 0x3F654226 )
0003b5 e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
0003b6 d395      	RCALL __MULF12
0003b7 d1a6      	RCALL SUBOPT_0x8
                +
0003b8 e4ee     +LDI R30 , LOW ( 0x4054114E )
0003b9 e1f1     +LDI R31 , HIGH ( 0x4054114E )
0003ba e564     +LDI R22 , BYTE3 ( 0x4054114E )
0003bb e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
0003bc d4b7      	RCALL __SWAPD12
0003bd d337      	RCALL __SUBF12
0003be d193      	RCALL SUBOPT_0x5
0003bf d38c      	RCALL __MULF12
0003c0 937f      	PUSH R23
0003c1 936f      	PUSH R22
0003c2 93ff      	PUSH R31
0003c3 93ef      	PUSH R30
0003c4 d1c5      	RCALL SUBOPT_0x11
                +
0003c5 e4ad     +LDI R26 , LOW ( 0x3FD4114D )
0003c6 e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
0003c7 ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
0003c8 e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
0003c9 d32b      	RCALL __SUBF12
0003ca 91af      	POP  R26
0003cb 91bf      	POP  R27
0003cc 918f      	POP  R24
0003cd 919f      	POP  R25
0003ce d3cb      	RCALL __DIVF21
0003cf 937f      	PUSH R23
0003d0 936f      	PUSH R22
0003d1 93ff      	PUSH R31
0003d2 93ef      	PUSH R30
0003d3 01f8      	MOVW R30,R16
0003d4 d1ba      	RCALL SUBOPT_0x12
                +
0003d5 e1a8     +LDI R26 , LOW ( 0x3F317218 )
0003d6 e7b2     +LDI R27 , HIGH ( 0x3F317218 )
0003d7 e381     +LDI R24 , BYTE3 ( 0x3F317218 )
0003d8 e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
0003d9 d372      	RCALL __MULF12
0003da 91af      	POP  R26
0003db 91bf      	POP  R27
0003dc 918f      	POP  R24
0003dd 919f      	POP  R25
0003de d31d      	RCALL __ADDF12
                 _0x20E0006:
0003df d4bb      	RCALL __LOADLOCR2
                 _0x20E0007:
0003e0 962a      	ADIW R28,10
0003e1 9508      	RET
                 ; .FEND
                 _exp:
                 ; .FSTART _exp
0003e2 d48c      	RCALL __PUTPARD2
0003e3 9728      	SBIW R28,8
0003e4 d4af      	RCALL __SAVELOCR2
0003e5 d1ac      	RCALL SUBOPT_0x13
                +
0003e6 e5e0     +LDI R30 , LOW ( 0xC2AEAC50 )
0003e7 eafc     +LDI R31 , HIGH ( 0xC2AEAC50 )
0003e8 ea6e     +LDI R22 , BYTE3 ( 0xC2AEAC50 )
0003e9 ec72     +LDI R23 , BYTE4 ( 0xC2AEAC50 )
                 	__GETD1N 0xC2AEAC50
0003ea d3f4      	RCALL __CMPF12
0003eb f410      	BRSH _0x202000F
0003ec d1aa      	RCALL SUBOPT_0x14
0003ed c061      	RJMP _0x20E0005
                 _0x202000F:
                +
0003ee 85ea     +LDD R30 , Y + 10
0003ef 85fb     +LDD R31 , Y + 10 + 1
0003f0 856c     +LDD R22 , Y + 10 + 2
0003f1 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
0003f2 d48e      	RCALL __CPD10
0003f3 f411      	BRNE _0x2020010
0003f4 d1a7      	RCALL SUBOPT_0x15
0003f5 c059      	RJMP _0x20E0005
                 _0x2020010:
0003f6 d19b      	RCALL SUBOPT_0x13
                +
0003f7 e1e8     +LDI R30 , LOW ( 0x42B17218 )
0003f8 e7f2     +LDI R31 , HIGH ( 0x42B17218 )
0003f9 eb61     +LDI R22 , BYTE3 ( 0x42B17218 )
0003fa e472     +LDI R23 , BYTE4 ( 0x42B17218 )
                 	__GETD1N 0x42B17218
0003fb d3e3      	RCALL __CMPF12
0003fc f009      	BREQ PC+2
0003fd f408      	BRCC PC+2
0003fe c005      	RJMP _0x2020011
                +
0003ff efef     +LDI R30 , LOW ( 0x7F7FFFFF )
000400 efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
000401 e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
000402 e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
000403 c04b      	RJMP _0x20E0005
                 _0x2020011:
000404 d18d      	RCALL SUBOPT_0x13
                +
000405 e3eb     +LDI R30 , LOW ( 0x3FB8AA3B )
000406 eafa     +LDI R31 , HIGH ( 0x3FB8AA3B )
000407 eb68     +LDI R22 , BYTE3 ( 0x3FB8AA3B )
000408 e37f     +LDI R23 , BYTE4 ( 0x3FB8AA3B )
                 	__GETD1N 0x3FB8AA3B
000409 d342      	RCALL __MULF12
                +
00040a 87ea     +STD Y + 10 , R30
00040b 87fb     +STD Y + 10 + 1 , R31
00040c 876c     +STD Y + 10 + 2 , R22
00040d 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
00040e d183      	RCALL SUBOPT_0x13
00040f df61      	RCALL _floor
000410 d27a      	RCALL __CFD1
000411 018f      	MOVW R16,R30
000412 d17f      	RCALL SUBOPT_0x13
000413 d17b      	RCALL SUBOPT_0x12
000414 d45f      	RCALL __SWAPD12
000415 d2df      	RCALL __SUBF12
000416 d147      	RCALL SUBOPT_0x8
                +
000417 e0e0     +LDI R30 , LOW ( 0x3F000000 )
000418 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
000419 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
00041a e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
00041b d458      	RCALL __SWAPD12
00041c d2d8      	RCALL __SUBF12
00041d d163      	RCALL SUBOPT_0x10
                +
00041e e6ad     +LDI R26 , LOW ( 0x3D6C4C6D )
00041f e4bc     +LDI R27 , HIGH ( 0x3D6C4C6D )
000420 e68c     +LDI R24 , BYTE3 ( 0x3D6C4C6D )
000421 e39d     +LDI R25 , BYTE4 ( 0x3D6C4C6D )
                 	__GETD2N 0x3D6C4C6D
000422 d329      	RCALL __MULF12
                +
000423 eaa6     +LDI R26 , LOW ( 0x40E6E3A6 )
000424 eeb3     +LDI R27 , HIGH ( 0x40E6E3A6 )
000425 ee86     +LDI R24 , BYTE3 ( 0x40E6E3A6 )
000426 e490     +LDI R25 , BYTE4 ( 0x40E6E3A6 )
                 	__GETD2N 0x40E6E3A6
000427 d2d4      	RCALL __ADDF12
000428 d129      	RCALL SUBOPT_0x5
000429 d322      	RCALL __MULF12
00042a d151      	RCALL SUBOPT_0xF
00042b d15e      	RCALL SUBOPT_0x11
                +
00042c e2a8     +LDI R26 , LOW ( 0x41A68D28 )
00042d e8bd     +LDI R27 , HIGH ( 0x41A68D28 )
00042e ea86     +LDI R24 , BYTE3 ( 0x41A68D28 )
00042f e491     +LDI R25 , BYTE4 ( 0x41A68D28 )
                 	__GETD2N 0x41A68D28
000430 d2cb      	RCALL __ADDF12
                +
000431 83ea     +STD Y + 2 , R30
000432 83fb     +STD Y + 2 + 1 , R31
000433 836c     +STD Y + 2 + 2 , R22
000434 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000435 d141      	RCALL SUBOPT_0xE
                +
000436 81aa     +LDD R26 , Y + 2
000437 81bb     +LDD R27 , Y + 2 + 1
000438 818c     +LDD R24 , Y + 2 + 2
000439 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
00043a d2c1      	RCALL __ADDF12
                +
00043b efa3     +LDI R26 , LOW ( 0x3FB504F3 )
00043c e0b4     +LDI R27 , HIGH ( 0x3FB504F3 )
00043d eb85     +LDI R24 , BYTE3 ( 0x3FB504F3 )
00043e e39f     +LDI R25 , BYTE4 ( 0x3FB504F3 )
                 	__GETD2N 0x3FB504F3
00043f d30c      	RCALL __MULF12
000440 937f      	PUSH R23
000441 936f      	PUSH R22
000442 93ff      	PUSH R31
000443 93ef      	PUSH R30
000444 d10d      	RCALL SUBOPT_0x5
000445 d144      	RCALL SUBOPT_0x11
000446 d2ae      	RCALL __SUBF12
000447 91af      	POP  R26
000448 91bf      	POP  R27
000449 918f      	POP  R24
00044a 919f      	POP  R25
00044b d34e      	RCALL __DIVF21
00044c d41d      	RCALL __PUTPARD1
00044d 01d8      	MOVW R26,R16
00044e d1fb      	RCALL _ldexp
                 _0x20E0005:
00044f d44b      	RCALL __LOADLOCR2
000450 962e      	ADIW R28,14
000451 9508      	RET
                 ; .FEND
                 _pow:
                 ; .FSTART _pow
000452 d41c      	RCALL __PUTPARD2
000453 9724      	SBIW R28,4
000454 d14c      	RCALL SUBOPT_0x16
000455 d42b      	RCALL __CPD10
000456 f411      	BRNE _0x2020012
000457 d13f      	RCALL SUBOPT_0x14
000458 c027      	RJMP _0x20E0004
                 _0x2020012:
000459 d14c      	RCALL SUBOPT_0x17
00045a d42a      	RCALL __CPD02
00045b f444      	BRGE _0x2020013
00045c d14e      	RCALL SUBOPT_0x18
00045d d423      	RCALL __CPD10
00045e f411      	BRNE _0x2020014
00045f d13c      	RCALL SUBOPT_0x15
000460 c01f      	RJMP _0x20E0004
                 _0x2020014:
000461 d144      	RCALL SUBOPT_0x17
000462 d14d      	RCALL SUBOPT_0x19
000463 c01c      	RJMP _0x20E0004
                 _0x2020013:
000464 d146      	RCALL SUBOPT_0x18
000465 01de      	MOVW R26,R28
000466 d224      	RCALL __CFD1
000467 d3e7      	RCALL __PUTDP1
000468 d106      	RCALL SUBOPT_0xC
000469 d258      	RCALL __CDF1
00046a 01df      	MOVW R26,R30
00046b 01cb      	MOVW R24,R22
00046c d13e      	RCALL SUBOPT_0x18
00046d d41d      	RCALL __CPD12
00046e f011      	BREQ _0x2020015
00046f d127      	RCALL SUBOPT_0x14
000470 c00f      	RJMP _0x20E0004
                 _0x2020015:
000471 d12f      	RCALL SUBOPT_0x16
000472 d1e3      	RCALL __ANEGF1
000473 d0ea      	RCALL SUBOPT_0x8
000474 d13b      	RCALL SUBOPT_0x19
                +
000475 87e8     +STD Y + 8 , R30
000476 87f9     +STD Y + 8 + 1 , R31
000477 876a     +STD Y + 8 + 2 , R22
000478 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
000479 81e8      	LD   R30,Y
00047a 70e1      	ANDI R30,LOW(0x1)
00047b f411      	BRNE _0x2020016
00047c d124      	RCALL SUBOPT_0x16
00047d c002      	RJMP _0x20E0004
                 _0x2020016:
00047e d122      	RCALL SUBOPT_0x16
00047f d1d6      	RCALL __ANEGF1
                 _0x20E0004:
000480 962c      	ADIW R28,12
000481 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 _ds18b20_select:
                 ; .FSTART _ds18b20_select
000482 d0c3      	RCALL SUBOPT_0x2
000483 931a      	ST   -Y,R17
000484 d14e      	RCALL _w1_init
000485 30e0      	CPI  R30,0
000486 f411      	BRNE _0x2060003
000487 e0e0      	LDI  R30,LOW(0)
000488 c06b      	RJMP _0x20E0002
                 _0x2060003:
000489 81e9      	LDD  R30,Y+1
00048a 81fa      	LDD  R31,Y+1+1
00048b 9730      	SBIW R30,0
00048c f069      	BREQ _0x2060004
00048d e5a5      	LDI  R26,LOW(85)
00048e d18a      	RCALL _w1_write
00048f e010      	LDI  R17,LOW(0)
                 _0x2060006:
000490 d127      	RCALL SUBOPT_0x1A
000491 91ed      	LD   R30,X+
000492 83a9      	STD  Y+1,R26
000493 83ba      	STD  Y+1+1,R27
000494 2fae      	MOV  R26,R30
000495 d183      	RCALL _w1_write
000496 5f1f      	SUBI R17,-LOW(1)
000497 3018      	CPI  R17,8
000498 f3b8      	BRLO _0x2060006
000499 c002      	RJMP _0x2060008
                 _0x2060004:
00049a ecac      	LDI  R26,LOW(204)
00049b d17d      	RCALL _w1_write
                 _0x2060008:
00049c e0e1      	LDI  R30,LOW(1)
00049d c056      	RJMP _0x20E0002
                 ; .FEND
                 _ds18b20_read_spd:
                 ; .FSTART _ds18b20_read_spd
00049e d0a7      	RCALL SUBOPT_0x2
00049f d3f2      	RCALL __SAVELOCR4
0004a0 81ac      	LDD  R26,Y+4
0004a1 81bd      	LDD  R27,Y+4+1
0004a2 d118      	RCALL SUBOPT_0x1B
0004a3 f411      	BRNE _0x2060009
0004a4 e0e0      	LDI  R30,LOW(0)
0004a5 c017      	RJMP _0x20E0003
                 _0x2060009:
0004a6 ebae      	LDI  R26,LOW(190)
0004a7 d171      	RCALL _w1_write
0004a8 e010      	LDI  R17,LOW(0)
                +
0004a9 ef2c     +LDI R18 , LOW ( ___ds18b20_scratch_pad )
0004aa e031     +LDI R19 , HIGH ( ___ds18b20_scratch_pad )
                 	__POINTWRM 18,19,___ds18b20_scratch_pad
                 _0x206000B:
0004ab 933f      	PUSH R19
0004ac 932f      	PUSH R18
                +
0004ad 5f2f     +SUBI R18 , LOW ( - 1 )
0004ae 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0004af d164      	RCALL _w1_read
0004b0 91af      	POP  R26
0004b1 91bf      	POP  R27
0004b2 93ec      	ST   X,R30
0004b3 5f1f      	SUBI R17,-LOW(1)
0004b4 3019      	CPI  R17,9
0004b5 f3a8      	BRLO _0x206000B
0004b6 efec      	LDI  R30,LOW(___ds18b20_scratch_pad)
0004b7 e0f1      	LDI  R31,HIGH(___ds18b20_scratch_pad)
0004b8 93fa      	ST   -Y,R31
0004b9 93ea      	ST   -Y,R30
0004ba e0a9      	LDI  R26,LOW(9)
0004bb d167      	RCALL _w1_dow_crc8
0004bc d359      	RCALL __LNEGB1
                 _0x20E0003:
0004bd d3db      	RCALL __LOADLOCR4
0004be 9626      	ADIW R28,6
0004bf 9508      	RET
                 ; .FEND
                 _ds18b20_temperature:
                 ; .FSTART _ds18b20_temperature
0004c0 d085      	RCALL SUBOPT_0x2
0004c1 931a      	ST   -Y,R17
0004c2 d0f5      	RCALL SUBOPT_0x1A
0004c3 dfda      	RCALL _ds18b20_read_spd
0004c4 30e0      	CPI  R30,0
0004c5 f411      	BRNE _0x206000D
0004c6 d0f7      	RCALL SUBOPT_0x1C
0004c7 c02c      	RJMP _0x20E0002
                 _0x206000D:
                +
0004c8 91e0 0200+LDS R30 , ___ds18b20_scratch_pad + ( 4 )
                 	__GETB1MN ___ds18b20_scratch_pad,4
0004ca 95e2      	SWAP R30
0004cb 70ef      	ANDI R30,0xF
0004cc 95e6      	LSR  R30
0004cd 70e3      	ANDI R30,LOW(0x3)
0004ce 2f1e      	MOV  R17,R30
0004cf d0e8      	RCALL SUBOPT_0x1A
0004d0 d0ea      	RCALL SUBOPT_0x1B
0004d1 f411      	BRNE _0x206000E
0004d2 d0eb      	RCALL SUBOPT_0x1C
0004d3 c020      	RJMP _0x20E0002
                 _0x206000E:
0004d4 e4a4      	LDI  R26,LOW(68)
0004d5 d143      	RCALL _w1_write
0004d6 2fe1      	MOV  R30,R17
0004d7 e2a6      	LDI  R26,LOW(_conv_delay_G103*2)
0004d8 e0b0      	LDI  R27,HIGH(_conv_delay_G103*2)
0004d9 d0e9      	RCALL SUBOPT_0x1D
0004da d37d      	RCALL __GETW2PF
0004db d0ed      	RCALL _delay_ms
0004dc d0db      	RCALL SUBOPT_0x1A
0004dd dfc0      	RCALL _ds18b20_read_spd
0004de 30e0      	CPI  R30,0
0004df f411      	BRNE _0x206000F
0004e0 d0dd      	RCALL SUBOPT_0x1C
0004e1 c012      	RJMP _0x20E0002
                 _0x206000F:
0004e2 d0f0      	RCALL _w1_init
0004e3 2fe1      	MOV  R30,R17
0004e4 e2ae      	LDI  R26,LOW(_bit_mask_G103*2)
0004e5 e0b0      	LDI  R27,HIGH(_bit_mask_G103*2)
0004e6 d0dc      	RCALL SUBOPT_0x1D
0004e7 d36c      	RCALL __GETW1PF
0004e8 91a0 01fc 	LDS  R26,___ds18b20_scratch_pad
0004ea 91b0 01fd 	LDS  R27,___ds18b20_scratch_pad+1
0004ec 23ea      	AND  R30,R26
0004ed 23fb      	AND  R31,R27
0004ee d0a0      	RCALL SUBOPT_0x12
                +
0004ef e0a0     +LDI R26 , LOW ( 0x3D800000 )
0004f0 e0b0     +LDI R27 , HIGH ( 0x3D800000 )
0004f1 e880     +LDI R24 , BYTE3 ( 0x3D800000 )
0004f2 e39d     +LDI R25 , BYTE4 ( 0x3D800000 )
                 	__GETD2N 0x3D800000
0004f3 d258      	RCALL __MULF12
                 _0x20E0002:
0004f4 8118      	LDD  R17,Y+0
0004f5 9623      	ADIW R28,3
0004f6 9508      	RET
                 ; .FEND
                 _ds18b20_init:
                 ; .FSTART _ds18b20_init
0004f7 93aa      	ST   -Y,R26
0004f8 81ab      	LDD  R26,Y+3
0004f9 81bc      	LDD  R27,Y+3+1
0004fa d0c0      	RCALL SUBOPT_0x1B
0004fb f411      	BRNE _0x2060010
0004fc e0e0      	LDI  R30,LOW(0)
0004fd c032      	RJMP _0x20E0001
                 _0x2060010:
0004fe 81e8      	LD   R30,Y
0004ff 95e2      	SWAP R30
000500 7fe0      	ANDI R30,0xF0
000501 0fee      	LSL  R30
000502 61ef      	ORI  R30,LOW(0x1F)
000503 83e8      	ST   Y,R30
000504 e4ae      	LDI  R26,LOW(78)
000505 d113      	RCALL _w1_write
000506 81a9      	LDD  R26,Y+1
000507 d111      	RCALL _w1_write
000508 81aa      	LDD  R26,Y+2
000509 d10f      	RCALL _w1_write
00050a 81a8      	LD   R26,Y
00050b d10d      	RCALL _w1_write
00050c 81ab      	LDD  R26,Y+3
00050d 81bc      	LDD  R27,Y+3+1
00050e df8f      	RCALL _ds18b20_read_spd
00050f 30e0      	CPI  R30,0
000510 f411      	BRNE _0x2060011
000511 e0e0      	LDI  R30,LOW(0)
000512 c01d      	RJMP _0x20E0001
                 _0x2060011:
                +
000513 91a0 01ff+LDS R26 , ___ds18b20_scratch_pad + ( 3 )
                 	__GETB2MN ___ds18b20_scratch_pad,3
000515 81ea      	LDD  R30,Y+2
000516 17ea      	CP   R30,R26
000517 f451      	BRNE _0x2060013
                +
000518 91a0 01fe+LDS R26 , ___ds18b20_scratch_pad + ( 2 )
                 	__GETB2MN ___ds18b20_scratch_pad,2
00051a 81e9      	LDD  R30,Y+1
00051b 17ea      	CP   R30,R26
00051c f429      	BRNE _0x2060013
                +
00051d 91a0 0200+LDS R26 , ___ds18b20_scratch_pad + ( 4 )
                 	__GETB2MN ___ds18b20_scratch_pad,4
00051f 81e8      	LD   R30,Y
000520 17ea      	CP   R30,R26
000521 f011      	BREQ _0x2060012
                 _0x2060013:
000522 e0e0      	LDI  R30,LOW(0)
000523 c00c      	RJMP _0x20E0001
                 _0x2060012:
000524 81ab      	LDD  R26,Y+3
000525 81bc      	LDD  R27,Y+3+1
000526 d094      	RCALL SUBOPT_0x1B
000527 f411      	BRNE _0x2060015
000528 e0e0      	LDI  R30,LOW(0)
000529 c006      	RJMP _0x20E0001
                 _0x2060015:
00052a e4a8      	LDI  R26,LOW(72)
00052b d0ed      	RCALL _w1_write
00052c e0af      	LDI  R26,LOW(15)
00052d e0b0      	LDI  R27,0
00052e d09a      	RCALL _delay_ms
00052f d0a3      	RCALL _w1_init
                 _0x20E0001:
000530 9625      	ADIW R28,5
000531 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _twi_tx_index:
0001f9           	.BYTE 0x1
                 _twi_rx_index:
0001fa           	.BYTE 0x1
                 _twi_result:
0001fb           	.BYTE 0x1
                 ___ds18b20_scratch_pad:
0001fc           	.BYTE 0x9
                 _temp:
000205           	.BYTE 0x4
                 _slave_address_G100:
000209           	.BYTE 0x1
                 _twi_tx_buffer_G100:
00020a           	.BYTE 0x2
                 _bytes_to_tx_G100:
00020c           	.BYTE 0x1
                 _twi_rx_buffer_G100:
00020d           	.BYTE 0x2
                 _bytes_to_rx_G100:
00020f           	.BYTE 0x1
                 _twi_rx_buffer_size_G100:
000210           	.BYTE 0x1
                 _twi_slave_rx_handler_G100:
000211           	.BYTE 0x2
                 _twi_slave_tx_handler_G100:
000213           	.BYTE 0x2
                 __seed_G105:
000215           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x0:
000532 2a51      	OR   R5,R17
000533 e0e4      	LDI  R30,LOW(4)
000534 2a5e      	OR   R5,R30
000535 2da5      	MOV  R26,R5
000536 db8e      	RCALL _PCF8574_write
                +
000537 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000538 958a     +DEC R24
000539 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
00053a efeb      	LDI  R30,LOW(251)
00053b 225e      	AND  R5,R30
00053c 2da5      	MOV  R26,R5
00053d db87      	RCALL _PCF8574_write
                +
00053e e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00053f 958a     +DEC R24
000540 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000541 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000542 2da5      	MOV  R26,R5
000543 db81      	RCALL _PCF8574_write
000544 81a8      	LD   R26,Y
000545 cb87      	RJMP _twi_lcd_4bit_send
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
000546 93ba      	ST   -Y,R27
000547 93aa      	ST   -Y,R26
000548 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000549 81a8      	LD   R26,Y
00054a 81b9      	LDD  R27,Y+1
00054b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
00054c dffc      	RCALL SUBOPT_0x3
00054d 91ed      	LD   R30,X+
00054e 83a8      	ST   Y,R26
00054f 83b9      	STD  Y+1,R27
000550 2fae      	MOV  R26,R30
000551 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x5:
                +
000552 81ae     +LDD R26 , Y + 6
000553 81bf     +LDD R27 , Y + 6 + 1
000554 8588     +LDD R24 , Y + 6 + 2
000555 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
000556 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
000557 dc75      	RCALL _usart_tx
000558 e0aa      	LDI  R26,LOW(10)
000559 e0b0      	LDI  R27,0
00055a c06e      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
00055b dc78      	RCALL _usart_msg
00055c e0ad      	LDI  R26,LOW(13)
00055d cc6f      	RJMP _usart_tx
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
00055e 01df      	MOVW R26,R30
00055f 01cb      	MOVW R24,R22
000560 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
000561 b7e6      	IN   R30,0x36
000562 78e0      	ANDI R30,LOW(0x80)
000563 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
000564 b1e1      	IN   R30,0x1
000565 7fe8      	ANDI R30,LOW(0xF8)
000566 2f1e      	MOV  R17,R30
000567 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000568 93aa      	ST   -Y,R26
000569 931a      	ST   -Y,R17
00056a 81e9      	LDD  R30,Y+1
00056b b9e3      	OUT  0x3,R30
00056c e8e4      	LDI  R30,LOW(132)
00056d bfe6      	OUT  0x36,R30
00056e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xC:
00056f d2eb      	RCALL __GETD1S0
000570 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xD:
                +
000571 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000572 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000573 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000574 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000575 d17f      	RCALL __SUBF12
000576 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0xE:
                +
000577 81ee     +LDD R30 , Y + 6
000578 81ff     +LDD R31 , Y + 6 + 1
000579 8568     +LDD R22 , Y + 6 + 2
00057a 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
00057b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xF:
                +
00057c 83ee     +STD Y + 6 , R30
00057d 83ff     +STD Y + 6 + 1 , R31
00057e 8768     +STD Y + 6 + 2 , R22
00057f 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
000580 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x10:
000581 dffa      	RCALL SUBOPT_0xF
000582 dff4      	RCALL SUBOPT_0xE
000583 dfce      	RCALL SUBOPT_0x5
000584 d1c7      	RCALL __MULF12
                +
000585 83ea     +STD Y + 2 , R30
000586 83fb     +STD Y + 2 + 1 , R31
000587 836c     +STD Y + 2 + 2 , R22
000588 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000589 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x11:
                +
00058a 81ea     +LDD R30 , Y + 2
00058b 81fb     +LDD R31 , Y + 2 + 1
00058c 816c     +LDD R22 , Y + 2 + 2
00058d 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
00058e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x12:
00058f d281      	RCALL __CWD1
000590 d131      	RCALL __CDF1
000591 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x13:
                +
000592 85aa     +LDD R26 , Y + 10
000593 85bb     +LDD R27 , Y + 10 + 1
000594 858c     +LDD R24 , Y + 10 + 2
000595 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000596 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x14:
                +
000597 e0e0     +LDI R30 , LOW ( 0x0 )
000598 e0f0     +LDI R31 , HIGH ( 0x0 )
000599 e060     +LDI R22 , BYTE3 ( 0x0 )
00059a e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
00059b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
                +
00059c e0e0     +LDI R30 , LOW ( 0x3F800000 )
00059d e0f0     +LDI R31 , HIGH ( 0x3F800000 )
00059e e860     +LDI R22 , BYTE3 ( 0x3F800000 )
00059f e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0005a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x16:
                +
0005a1 85e8     +LDD R30 , Y + 8
0005a2 85f9     +LDD R31 , Y + 8 + 1
0005a3 856a     +LDD R22 , Y + 8 + 2
0005a4 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
0005a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
                +
0005a6 85a8     +LDD R26 , Y + 8
0005a7 85b9     +LDD R27 , Y + 8 + 1
0005a8 858a     +LDD R24 , Y + 8 + 2
0005a9 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0005aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x18:
                +
0005ab 81ec     +LDD R30 , Y + 4
0005ac 81fd     +LDD R31 , Y + 4 + 1
0005ad 816e     +LDD R22 , Y + 4 + 2
0005ae 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
0005af 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x19:
0005b0 ddcc      	RCALL _log
                +
0005b1 81ac     +LDD R26 , Y + 4
0005b2 81bd     +LDD R27 , Y + 4 + 1
0005b3 818e     +LDD R24 , Y + 4 + 2
0005b4 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0005b5 d196      	RCALL __MULF12
0005b6 dfa7      	RCALL SUBOPT_0x8
0005b7 ce2a      	RJMP _exp
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
0005b8 81a9      	LDD  R26,Y+1
0005b9 81ba      	LDD  R27,Y+1+1
0005ba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
0005bb dec6      	RCALL _ds18b20_select
0005bc 30e0      	CPI  R30,0
0005bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1C:
                +
0005be e0e0     +LDI R30 , LOW ( 0xC61C3C00 )
0005bf e3fc     +LDI R31 , HIGH ( 0xC61C3C00 )
0005c0 e16c     +LDI R22 , BYTE3 ( 0xC61C3C00 )
0005c1 ec76     +LDI R23 , BYTE4 ( 0xC61C3C00 )
                 	__GETD1N 0xC61C3C00
0005c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1D:
0005c3 e0f0      	LDI  R31,0
0005c4 0fee      	LSL  R30
0005c5 1fff      	ROL  R31
0005c6 0fea      	ADD  R30,R26
0005c7 1ffb      	ADC  R31,R27
0005c8 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0005c9 9610      	adiw r26,0
0005ca f039      	breq __delay_ms1
                 __delay_ms0:
                +
0005cb ed80     +LDI R24 , LOW ( 0x7D0 )
0005cc e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0005cd 9701     +SBIW R24 , 1
0005ce f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0005cf 95a8      	wdr
0005d0 9711      	sbiw r26,1
0005d1 f7c9      	brne __delay_ms0
                 __delay_ms1:
0005d2 9508      	ret
                 
                 	.equ __w1_port=0x15
                 	.equ __w1_bit=0x00
                 
                 _w1_init:
0005d3 27ee      	clr  r30
0005d4 98a8      	cbi  __w1_port,__w1_bit
0005d5 9aa0      	sbi  __w1_port-1,__w1_bit
                +
0005d6 ec80     +LDI R24 , LOW ( 0x3C0 )
0005d7 e093     +LDI R25 , HIGH ( 0x3C0 )
                +__DELAY_USW_LOOP :
0005d8 9701     +SBIW R24 , 1
0005d9 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x3C0
0005da 98a0      	cbi  __w1_port-1,__w1_bit
                +
0005db e285     +LDI R24 , LOW ( 0x25 )
                +__DELAY_USB_LOOP :
0005dc 958a     +DEC R24
0005dd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x25
0005de 9b98      	sbis __w1_port-2,__w1_bit
0005df 9508      	ret
                +
0005e0 ec8b     +LDI R24 , LOW ( 0xCB )
                +__DELAY_USB_LOOP :
0005e1 958a     +DEC R24
0005e2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0xCB
0005e3 9b98      	sbis __w1_port-2,__w1_bit
0005e4 e0e1      	ldi  r30,1
                +
0005e5 e08c     +LDI R24 , LOW ( 0x30C )
0005e6 e093     +LDI R25 , HIGH ( 0x30C )
                +__DELAY_USW_LOOP :
0005e7 9701     +SBIW R24 , 1
0005e8 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x30C
0005e9 9508      	ret
                 
                 __w1_read_bit:
0005ea 9aa0      	sbi  __w1_port-1,__w1_bit
                +
0005eb e085     +LDI R24 , LOW ( 0x5 )
                +__DELAY_USB_LOOP :
0005ec 958a     +DEC R24
0005ed f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x5
0005ee 98a0      	cbi  __w1_port-1,__w1_bit
                +
0005ef e18d     +LDI R24 , LOW ( 0x1D )
                +__DELAY_USB_LOOP :
0005f0 958a     +DEC R24
0005f1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x1D
0005f2 9488      	clc
0005f3 9998      	sbic __w1_port-2,__w1_bit
0005f4 9408      	sec
0005f5 95e7      	ror  r30
                +
0005f6 ed85     +LDI R24 , LOW ( 0xD5 )
                +__DELAY_USB_LOOP :
0005f7 958a     +DEC R24
0005f8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0xD5
0005f9 9508      	ret
                 
                 __w1_write_bit:
0005fa 94e8      	clt
0005fb 9aa0      	sbi  __w1_port-1,__w1_bit
                +
0005fc e085     +LDI R24 , LOW ( 0x5 )
                +__DELAY_USB_LOOP :
0005fd 958a     +DEC R24
0005fe f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x5
0005ff fd70      	sbrc r23,0
000600 98a0      	cbi  __w1_port-1,__w1_bit
                +
000601 e283     +LDI R24 , LOW ( 0x23 )
                +__DELAY_USB_LOOP :
000602 958a     +DEC R24
000603 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x23
000604 9998      	sbic __w1_port-2,__w1_bit
000605 c003      	rjmp __w1_write_bit0
000606 ff70      	sbrs r23,0
000607 c003      	rjmp __w1_write_bit1
000608 9508      	ret
                 __w1_write_bit0:
000609 ff70      	sbrs r23,0
00060a 9508      	ret
                 __w1_write_bit1:
                +
00060b ec88     +LDI R24 , LOW ( 0xC8 )
                +__DELAY_USB_LOOP :
00060c 958a     +DEC R24
00060d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0xC8
00060e 98a0      	cbi  __w1_port-1,__w1_bit
                +
00060f e08d     +LDI R24 , LOW ( 0xD )
                +__DELAY_USB_LOOP :
000610 958a     +DEC R24
000611 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0xD
000612 9468      	set
000613 9508      	ret
                 
                 _w1_read:
000614 e068      	ldi  r22,8
                 	__w1_read0:
000615 dfd4      	rcall __w1_read_bit
000616 956a      	dec  r22
000617 f7e9      	brne __w1_read0
000618 9508      	ret
                 
                 _w1_write:
000619 2f7a      	mov  r23,r26
00061a e068      	ldi  r22,8
00061b 27ee      	clr  r30
                 __w1_write0:
00061c dfdd      	rcall __w1_write_bit
00061d f426      	brtc __w1_write1
00061e 9577      	ror  r23
00061f 956a      	dec  r22
000620 f7d9      	brne __w1_write0
000621 95e3      	inc  r30
                 __w1_write1:
000622 9508      	ret
                 
                 _w1_dow_crc8:
000623 27ee      	clr  r30
000624 23aa      	tst  r26
000625 f089      	breq __w1_dow_crc83
000626 2f8a      	mov  r24,r26
000627 e168      	ldi  r22,0x18
000628 81a8      	ld   r26,y
000629 81b9      	ldd  r27,y+1
                 __w1_dow_crc80:
00062a e098      	ldi  r25,8
00062b 91fd      	ld   r31,x+
                 __w1_dow_crc81:
00062c 2f7f      	mov  r23,r31
00062d 277e      	eor  r23,r30
00062e 9577      	ror  r23
00062f f408      	brcc __w1_dow_crc82
000630 27e6      	eor  r30,r22
                 __w1_dow_crc82:
000631 95e7      	ror  r30
000632 95f6      	lsr  r31
000633 959a      	dec  r25
000634 f7b9      	brne __w1_dow_crc81
000635 958a      	dec  r24
000636 f799      	brne __w1_dow_crc80
                 __w1_dow_crc83:
000637 9622      	adiw r28,2
000638 9508      	ret
                 
                 _frexp:
000639 91e9      	LD   R30,Y+
00063a 91f9      	LD   R31,Y+
00063b 9169      	LD   R22,Y+
00063c 9179      	LD   R23,Y+
00063d fb77      	BST  R23,7
00063e 0f66      	LSL  R22
00063f 1f77      	ROL  R23
000640 2788      	CLR  R24
000641 577e      	SUBI R23,0x7E
000642 0b88      	SBC  R24,R24
000643 937d      	ST   X+,R23
000644 938c      	ST   X,R24
000645 e77e      	LDI  R23,0x7E
000646 9576      	LSR  R23
000647 9567      	ROR  R22
000648 f06e      	BRTS __ANEGF1
000649 9508      	RET
                 
                 _ldexp:
00064a 91e9      	LD   R30,Y+
00064b 91f9      	LD   R31,Y+
00064c 9169      	LD   R22,Y+
00064d 9179      	LD   R23,Y+
00064e fb77      	BST  R23,7
00064f 0f66      	LSL  R22
000650 1f77      	ROL  R23
000651 0f7a      	ADD  R23,R26
000652 9576      	LSR  R23
000653 9567      	ROR  R22
000654 f00e      	BRTS __ANEGF1
000655 9508      	RET
                 
                 __ANEGF1:
000656 9730      	SBIW R30,0
000657 4060      	SBCI R22,0
000658 4070      	SBCI R23,0
000659 f009      	BREQ __ANEGF10
00065a 5870      	SUBI R23,0x80
                 __ANEGF10:
00065b 9508      	RET
                 
                 __ROUND_REPACK:
00065c 2355      	TST  R21
00065d f442      	BRPL __REPACK
00065e 3850      	CPI  R21,0x80
00065f f411      	BRNE __ROUND_REPACK0
000660 ffe0      	SBRS R30,0
000661 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000662 9631      	ADIW R30,1
000663 1f69      	ADC  R22,R25
000664 1f79      	ADC  R23,R25
000665 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000666 e850      	LDI  R21,0x80
000667 2757      	EOR  R21,R23
000668 f411      	BRNE __REPACK0
000669 935f      	PUSH R21
00066a c0cf      	RJMP __ZERORES
                 __REPACK0:
00066b 3f5f      	CPI  R21,0xFF
00066c f031      	BREQ __REPACK1
00066d 0f66      	LSL  R22
00066e 0c00      	LSL  R0
00066f 9557      	ROR  R21
000670 9567      	ROR  R22
000671 2f75      	MOV  R23,R21
000672 9508      	RET
                 __REPACK1:
000673 935f      	PUSH R21
000674 2000      	TST  R0
000675 f00a      	BRMI __REPACK2
000676 c0cf      	RJMP __MAXRES
                 __REPACK2:
000677 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000678 e850      	LDI  R21,0x80
000679 2e19      	MOV  R1,R25
00067a 2215      	AND  R1,R21
00067b 0f88      	LSL  R24
00067c 1f99      	ROL  R25
00067d 2795      	EOR  R25,R21
00067e 0f55      	LSL  R21
00067f 9587      	ROR  R24
                 
                 __UNPACK1:
000680 e850      	LDI  R21,0x80
000681 2e07      	MOV  R0,R23
000682 2205      	AND  R0,R21
000683 0f66      	LSL  R22
000684 1f77      	ROL  R23
000685 2775      	EOR  R23,R21
000686 0f55      	LSL  R21
000687 9567      	ROR  R22
000688 9508      	RET
                 
                 __CFD1U:
000689 9468      	SET
00068a c001      	RJMP __CFD1U0
                 __CFD1:
00068b 94e8      	CLT
                 __CFD1U0:
00068c 935f      	PUSH R21
00068d dff2      	RCALL __UNPACK1
00068e 3870      	CPI  R23,0x80
00068f f018      	BRLO __CFD10
000690 3f7f      	CPI  R23,0xFF
000691 f408      	BRCC __CFD10
000692 c0a7      	RJMP __ZERORES
                 __CFD10:
000693 e156      	LDI  R21,22
000694 1b57      	SUB  R21,R23
000695 f4aa      	BRPL __CFD11
000696 9551      	NEG  R21
000697 3058      	CPI  R21,8
000698 f40e      	BRTC __CFD19
000699 3059      	CPI  R21,9
                 __CFD19:
00069a f030      	BRLO __CFD17
00069b efef      	SER  R30
00069c efff      	SER  R31
00069d ef6f      	SER  R22
00069e e77f      	LDI  R23,0x7F
00069f f977      	BLD  R23,7
0006a0 c01a      	RJMP __CFD15
                 __CFD17:
0006a1 2777      	CLR  R23
0006a2 2355      	TST  R21
0006a3 f0b9      	BREQ __CFD15
                 __CFD18:
0006a4 0fee      	LSL  R30
0006a5 1fff      	ROL  R31
0006a6 1f66      	ROL  R22
0006a7 1f77      	ROL  R23
0006a8 955a      	DEC  R21
0006a9 f7d1      	BRNE __CFD18
0006aa c010      	RJMP __CFD15
                 __CFD11:
0006ab 2777      	CLR  R23
                 __CFD12:
0006ac 3058      	CPI  R21,8
0006ad f028      	BRLO __CFD13
0006ae 2fef      	MOV  R30,R31
0006af 2ff6      	MOV  R31,R22
0006b0 2f67      	MOV  R22,R23
0006b1 5058      	SUBI R21,8
0006b2 cff9      	RJMP __CFD12
                 __CFD13:
0006b3 2355      	TST  R21
0006b4 f031      	BREQ __CFD15
                 __CFD14:
0006b5 9576      	LSR  R23
0006b6 9567      	ROR  R22
0006b7 95f7      	ROR  R31
0006b8 95e7      	ROR  R30
0006b9 955a      	DEC  R21
0006ba f7d1      	BRNE __CFD14
                 __CFD15:
0006bb 2000      	TST  R0
0006bc f40a      	BRPL __CFD16
0006bd d145      	RCALL __ANEGD1
                 __CFD16:
0006be 915f      	POP  R21
0006bf 9508      	RET
                 
                 __CDF1U:
0006c0 9468      	SET
0006c1 c001      	RJMP __CDF1U0
                 __CDF1:
0006c2 94e8      	CLT
                 __CDF1U0:
0006c3 9730      	SBIW R30,0
0006c4 4060      	SBCI R22,0
0006c5 4070      	SBCI R23,0
0006c6 f0b1      	BREQ __CDF10
0006c7 2400      	CLR  R0
0006c8 f026      	BRTS __CDF11
0006c9 2377      	TST  R23
0006ca f412      	BRPL __CDF11
0006cb 9400      	COM  R0
0006cc d136      	RCALL __ANEGD1
                 __CDF11:
0006cd 2e17      	MOV  R1,R23
0006ce e17e      	LDI  R23,30
0006cf 2011      	TST  R1
                 __CDF12:
0006d0 f032      	BRMI __CDF13
0006d1 957a      	DEC  R23
0006d2 0fee      	LSL  R30
0006d3 1fff      	ROL  R31
0006d4 1f66      	ROL  R22
0006d5 1c11      	ROL  R1
0006d6 cff9      	RJMP __CDF12
                 __CDF13:
0006d7 2fef      	MOV  R30,R31
0006d8 2ff6      	MOV  R31,R22
0006d9 2d61      	MOV  R22,R1
0006da 935f      	PUSH R21
0006db df8a      	RCALL __REPACK
0006dc 915f      	POP  R21
                 __CDF10:
0006dd 9508      	RET
                 
                 __SWAPACC:
0006de 934f      	PUSH R20
0006df 01af      	MOVW R20,R30
0006e0 01fd      	MOVW R30,R26
0006e1 01da      	MOVW R26,R20
0006e2 01ab      	MOVW R20,R22
0006e3 01bc      	MOVW R22,R24
0006e4 01ca      	MOVW R24,R20
0006e5 2d40      	MOV  R20,R0
0006e6 2c01      	MOV  R0,R1
0006e7 2e14      	MOV  R1,R20
0006e8 914f      	POP  R20
0006e9 9508      	RET
                 
                 __UADD12:
0006ea 0fea      	ADD  R30,R26
0006eb 1ffb      	ADC  R31,R27
0006ec 1f68      	ADC  R22,R24
0006ed 9508      	RET
                 
                 __NEGMAN1:
0006ee 95e0      	COM  R30
0006ef 95f0      	COM  R31
0006f0 9560      	COM  R22
0006f1 5fef      	SUBI R30,-1
0006f2 4fff      	SBCI R31,-1
0006f3 4f6f      	SBCI R22,-1
0006f4 9508      	RET
                 
                 __SUBF12:
0006f5 935f      	PUSH R21
0006f6 df81      	RCALL __UNPACK
0006f7 3890      	CPI  R25,0x80
0006f8 f171      	BREQ __ADDF129
0006f9 e850      	LDI  R21,0x80
0006fa 2615      	EOR  R1,R21
                 
0006fb c004      	RJMP __ADDF120
                 
                 __ADDF12:
0006fc 935f      	PUSH R21
0006fd df7a      	RCALL __UNPACK
0006fe 3890      	CPI  R25,0x80
0006ff f139      	BREQ __ADDF129
                 
                 __ADDF120:
000700 3870      	CPI  R23,0x80
000701 f121      	BREQ __ADDF128
                 __ADDF121:
000702 2f57      	MOV  R21,R23
000703 1b59      	SUB  R21,R25
000704 f12b      	BRVS __ADDF1211
000705 f412      	BRPL __ADDF122
000706 dfd7      	RCALL __SWAPACC
000707 cffa      	RJMP __ADDF121
                 __ADDF122:
000708 3158      	CPI  R21,24
000709 f018      	BRLO __ADDF123
00070a 27aa      	CLR  R26
00070b 27bb      	CLR  R27
00070c 2788      	CLR  R24
                 __ADDF123:
00070d 3058      	CPI  R21,8
00070e f028      	BRLO __ADDF124
00070f 2fab      	MOV  R26,R27
000710 2fb8      	MOV  R27,R24
000711 2788      	CLR  R24
000712 5058      	SUBI R21,8
000713 cff9      	RJMP __ADDF123
                 __ADDF124:
000714 2355      	TST  R21
000715 f029      	BREQ __ADDF126
                 __ADDF125:
000716 9586      	LSR  R24
000717 95b7      	ROR  R27
000718 95a7      	ROR  R26
000719 955a      	DEC  R21
00071a f7d9      	BRNE __ADDF125
                 __ADDF126:
00071b 2d50      	MOV  R21,R0
00071c 2551      	EOR  R21,R1
00071d f072      	BRMI __ADDF127
00071e dfcb      	RCALL __UADD12
00071f f438      	BRCC __ADDF129
000720 9567      	ROR  R22
000721 95f7      	ROR  R31
000722 95e7      	ROR  R30
000723 9573      	INC  R23
000724 f413      	BRVC __ADDF129
000725 c020      	RJMP __MAXRES
                 __ADDF128:
000726 dfb7      	RCALL __SWAPACC
                 __ADDF129:
000727 df3e      	RCALL __REPACK
000728 915f      	POP  R21
000729 9508      	RET
                 __ADDF1211:
00072a f7d8      	BRCC __ADDF128
00072b cffb      	RJMP __ADDF129
                 __ADDF127:
00072c 1bea      	SUB  R30,R26
00072d 0bfb      	SBC  R31,R27
00072e 0b68      	SBC  R22,R24
00072f f051      	BREQ __ZERORES
000730 f410      	BRCC __ADDF1210
000731 9400      	COM  R0
000732 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000733 2366      	TST  R22
000734 f392      	BRMI __ADDF129
000735 0fee      	LSL  R30
000736 1fff      	ROL  R31
000737 1f66      	ROL  R22
000738 957a      	DEC  R23
000739 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
00073a 27ee      	CLR  R30
00073b 27ff      	CLR  R31
00073c 2766      	CLR  R22
00073d 2777      	CLR  R23
00073e 915f      	POP  R21
00073f 9508      	RET
                 
                 __MINRES:
000740 efef      	SER  R30
000741 efff      	SER  R31
000742 e76f      	LDI  R22,0x7F
000743 ef7f      	SER  R23
000744 915f      	POP  R21
000745 9508      	RET
                 
                 __MAXRES:
000746 efef      	SER  R30
000747 efff      	SER  R31
000748 e76f      	LDI  R22,0x7F
000749 e77f      	LDI  R23,0x7F
00074a 915f      	POP  R21
00074b 9508      	RET
                 
                 __MULF12:
00074c 935f      	PUSH R21
00074d df2a      	RCALL __UNPACK
00074e 3870      	CPI  R23,0x80
00074f f351      	BREQ __ZERORES
000750 3890      	CPI  R25,0x80
000751 f341      	BREQ __ZERORES
000752 2401      	EOR  R0,R1
000753 9408      	SEC
000754 1f79      	ADC  R23,R25
000755 f423      	BRVC __MULF124
000756 f31c      	BRLT __ZERORES
                 __MULF125:
000757 2000      	TST  R0
000758 f33a      	BRMI __MINRES
000759 cfec      	RJMP __MAXRES
                 __MULF124:
00075a 920f      	PUSH R0
00075b 931f      	PUSH R17
00075c 932f      	PUSH R18
00075d 933f      	PUSH R19
00075e 934f      	PUSH R20
00075f 2711      	CLR  R17
000760 2722      	CLR  R18
000761 2799      	CLR  R25
000762 9f68      	MUL  R22,R24
000763 01a0      	MOVW R20,R0
000764 9f8f      	MUL  R24,R31
000765 2d30      	MOV  R19,R0
000766 0d41      	ADD  R20,R1
000767 1f59      	ADC  R21,R25
000768 9f6b      	MUL  R22,R27
000769 0d30      	ADD  R19,R0
00076a 1d41      	ADC  R20,R1
00076b 1f59      	ADC  R21,R25
00076c 9f8e      	MUL  R24,R30
00076d d027      	RCALL __MULF126
00076e 9fbf      	MUL  R27,R31
00076f d025      	RCALL __MULF126
000770 9f6a      	MUL  R22,R26
000771 d023      	RCALL __MULF126
000772 9fbe      	MUL  R27,R30
000773 d01d      	RCALL __MULF127
000774 9faf      	MUL  R26,R31
000775 d01b      	RCALL __MULF127
000776 9fae      	MUL  R26,R30
000777 0d11      	ADD  R17,R1
000778 1f29      	ADC  R18,R25
000779 1f39      	ADC  R19,R25
00077a 1f49      	ADC  R20,R25
00077b 1f59      	ADC  R21,R25
00077c 2fe3      	MOV  R30,R19
00077d 2ff4      	MOV  R31,R20
00077e 2f65      	MOV  R22,R21
00077f 2f52      	MOV  R21,R18
000780 914f      	POP  R20
000781 913f      	POP  R19
000782 912f      	POP  R18
000783 911f      	POP  R17
000784 900f      	POP  R0
000785 2366      	TST  R22
000786 f02a      	BRMI __MULF122
000787 0f55      	LSL  R21
000788 1fee      	ROL  R30
000789 1fff      	ROL  R31
00078a 1f66      	ROL  R22
00078b c002      	RJMP __MULF123
                 __MULF122:
00078c 9573      	INC  R23
00078d f24b      	BRVS __MULF125
                 __MULF123:
00078e decd      	RCALL __ROUND_REPACK
00078f 915f      	POP  R21
000790 9508      	RET
                 
                 __MULF127:
000791 0d10      	ADD  R17,R0
000792 1d21      	ADC  R18,R1
000793 1f39      	ADC  R19,R25
000794 c002      	RJMP __MULF128
                 __MULF126:
000795 0d20      	ADD  R18,R0
000796 1d31      	ADC  R19,R1
                 __MULF128:
000797 1f49      	ADC  R20,R25
000798 1f59      	ADC  R21,R25
000799 9508      	RET
                 
                 __DIVF21:
00079a 935f      	PUSH R21
00079b dedc      	RCALL __UNPACK
00079c 3870      	CPI  R23,0x80
00079d f421      	BRNE __DIVF210
00079e 2011      	TST  R1
                 __DIVF211:
00079f f40a      	BRPL __DIVF219
0007a0 cf9f      	RJMP __MINRES
                 __DIVF219:
0007a1 cfa4      	RJMP __MAXRES
                 __DIVF210:
0007a2 3890      	CPI  R25,0x80
0007a3 f409      	BRNE __DIVF218
                 __DIVF217:
0007a4 cf95      	RJMP __ZERORES
                 __DIVF218:
0007a5 2401      	EOR  R0,R1
0007a6 9408      	SEC
0007a7 0b97      	SBC  R25,R23
0007a8 f41b      	BRVC __DIVF216
0007a9 f3d4      	BRLT __DIVF217
0007aa 2000      	TST  R0
0007ab cff3      	RJMP __DIVF211
                 __DIVF216:
0007ac 2f79      	MOV  R23,R25
0007ad 931f      	PUSH R17
0007ae 932f      	PUSH R18
0007af 933f      	PUSH R19
0007b0 934f      	PUSH R20
0007b1 2411      	CLR  R1
0007b2 2711      	CLR  R17
0007b3 2722      	CLR  R18
0007b4 2733      	CLR  R19
0007b5 2744      	CLR  R20
0007b6 2755      	CLR  R21
0007b7 e290      	LDI  R25,32
                 __DIVF212:
0007b8 17ae      	CP   R26,R30
0007b9 07bf      	CPC  R27,R31
0007ba 0786      	CPC  R24,R22
0007bb 0741      	CPC  R20,R17
0007bc f030      	BRLO __DIVF213
0007bd 1bae      	SUB  R26,R30
0007be 0bbf      	SBC  R27,R31
0007bf 0b86      	SBC  R24,R22
0007c0 0b41      	SBC  R20,R17
0007c1 9408      	SEC
0007c2 c001      	RJMP __DIVF214
                 __DIVF213:
0007c3 9488      	CLC
                 __DIVF214:
0007c4 1f55      	ROL  R21
0007c5 1f22      	ROL  R18
0007c6 1f33      	ROL  R19
0007c7 1c11      	ROL  R1
0007c8 1faa      	ROL  R26
0007c9 1fbb      	ROL  R27
0007ca 1f88      	ROL  R24
0007cb 1f44      	ROL  R20
0007cc 959a      	DEC  R25
0007cd f751      	BRNE __DIVF212
0007ce 01f9      	MOVW R30,R18
0007cf 2d61      	MOV  R22,R1
0007d0 914f      	POP  R20
0007d1 913f      	POP  R19
0007d2 912f      	POP  R18
0007d3 911f      	POP  R17
0007d4 2366      	TST  R22
0007d5 f032      	BRMI __DIVF215
0007d6 0f55      	LSL  R21
0007d7 1fee      	ROL  R30
0007d8 1fff      	ROL  R31
0007d9 1f66      	ROL  R22
0007da 957a      	DEC  R23
0007db f243      	BRVS __DIVF217
                 __DIVF215:
0007dc de7f      	RCALL __ROUND_REPACK
0007dd 915f      	POP  R21
0007de 9508      	RET
                 
                 __CMPF12:
0007df 2399      	TST  R25
0007e0 f09a      	BRMI __CMPF120
0007e1 2377      	TST  R23
0007e2 f042      	BRMI __CMPF121
0007e3 1797      	CP   R25,R23
0007e4 f048      	BRLO __CMPF122
0007e5 f429      	BRNE __CMPF121
0007e6 17ae      	CP   R26,R30
0007e7 07bf      	CPC  R27,R31
0007e8 0786      	CPC  R24,R22
0007e9 f020      	BRLO __CMPF122
0007ea f031      	BREQ __CMPF123
                 __CMPF121:
0007eb 9498      	CLZ
0007ec 9488      	CLC
0007ed 9508      	RET
                 __CMPF122:
0007ee 9498      	CLZ
0007ef 9408      	SEC
0007f0 9508      	RET
                 __CMPF123:
0007f1 9418      	SEZ
0007f2 9488      	CLC
0007f3 9508      	RET
                 __CMPF120:
0007f4 2377      	TST  R23
0007f5 f7c2      	BRPL __CMPF122
0007f6 1797      	CP   R25,R23
0007f7 f398      	BRLO __CMPF121
0007f8 f7a9      	BRNE __CMPF122
0007f9 17ea      	CP   R30,R26
0007fa 07fb      	CPC  R31,R27
0007fb 0768      	CPC  R22,R24
0007fc f388      	BRLO __CMPF122
0007fd f399      	BREQ __CMPF123
0007fe cfec      	RJMP __CMPF121
                 
                 __ANEGW1:
0007ff 95f1      	NEG  R31
000800 95e1      	NEG  R30
000801 40f0      	SBCI R31,0
000802 9508      	RET
                 
                 __ANEGD1:
000803 95f0      	COM  R31
000804 9560      	COM  R22
000805 9570      	COM  R23
000806 95e1      	NEG  R30
000807 4fff      	SBCI R31,-1
000808 4f6f      	SBCI R22,-1
000809 4f7f      	SBCI R23,-1
00080a 9508      	RET
                 
                 __CBD1:
00080b 2ffe      	MOV  R31,R30
00080c 0fff      	ADD  R31,R31
00080d 0bff      	SBC  R31,R31
00080e 2f6f      	MOV  R22,R31
00080f 2f7f      	MOV  R23,R31
000810 9508      	RET
                 
                 __CWD1:
000811 2f6f      	MOV  R22,R31
000812 0f66      	ADD  R22,R22
000813 0b66      	SBC  R22,R22
000814 2f76      	MOV  R23,R22
000815 9508      	RET
                 
                 __LNEGB1:
000816 23ee      	TST  R30
000817 e0e1      	LDI  R30,1
000818 f009      	BREQ __LNEGB1F
000819 27ee      	CLR  R30
                 __LNEGB1F:
00081a 9508      	RET
                 
                 __DIVW21U:
00081b 2400      	CLR  R0
00081c 2411      	CLR  R1
00081d e190      	LDI  R25,16
                 __DIVW21U1:
00081e 0faa      	LSL  R26
00081f 1fbb      	ROL  R27
000820 1c00      	ROL  R0
000821 1c11      	ROL  R1
000822 1a0e      	SUB  R0,R30
000823 0a1f      	SBC  R1,R31
000824 f418      	BRCC __DIVW21U2
000825 0e0e      	ADD  R0,R30
000826 1e1f      	ADC  R1,R31
000827 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000828 60a1      	SBR  R26,1
                 __DIVW21U3:
000829 959a      	DEC  R25
00082a f799      	BRNE __DIVW21U1
00082b 01fd      	MOVW R30,R26
00082c 01d0      	MOVW R26,R0
00082d 9508      	RET
                 
                 __DIVW21:
00082e d012      	RCALL __CHKSIGNW
00082f dfeb      	RCALL __DIVW21U
000830 f40e      	BRTC __DIVW211
000831 dfcd      	RCALL __ANEGW1
                 __DIVW211:
000832 9508      	RET
                 
                 __MODW21:
000833 94e8      	CLT
000834 ffb7      	SBRS R27,7
000835 c004      	RJMP __MODW211
000836 95a0      	COM  R26
000837 95b0      	COM  R27
000838 9611      	ADIW R26,1
000839 9468      	SET
                 __MODW211:
00083a fdf7      	SBRC R31,7
00083b dfc3      	RCALL __ANEGW1
00083c dfde      	RCALL __DIVW21U
00083d 01fd      	MOVW R30,R26
00083e f40e      	BRTC __MODW212
00083f dfbf      	RCALL __ANEGW1
                 __MODW212:
000840 9508      	RET
                 
                 __CHKSIGNW:
000841 94e8      	CLT
000842 fff7      	SBRS R31,7
000843 c002      	RJMP __CHKSW1
000844 dfba      	RCALL __ANEGW1
000845 9468      	SET
                 __CHKSW1:
000846 ffb7      	SBRS R27,7
000847 c006      	RJMP __CHKSW2
000848 95a0      	COM  R26
000849 95b0      	COM  R27
00084a 9611      	ADIW R26,1
00084b f800      	BLD  R0,0
00084c 9403      	INC  R0
00084d fa00      	BST  R0,0
                 __CHKSW2:
00084e 9508      	RET
                 
                 __PUTDP1:
00084f 93ed      	ST   X+,R30
000850 93fd      	ST   X+,R31
000851 936d      	ST   X+,R22
000852 937c      	ST   X,R23
000853 9508      	RET
                 
                 __GETW1PF:
000854 9005      	LPM  R0,Z+
000855 91f4      	LPM  R31,Z
000856 2de0      	MOV  R30,R0
000857 9508      	RET
                 
                 __GETW2PF:
000858 91a5      	LPM  R26,Z+
000859 91b4      	LPM  R27,Z
00085a 9508      	RET
                 
                 __GETD1S0:
00085b 81e8      	LD   R30,Y
00085c 81f9      	LDD  R31,Y+1
00085d 816a      	LDD  R22,Y+2
00085e 817b      	LDD  R23,Y+3
00085f 9508      	RET
                 
                 __GETD2S0:
000860 81a8      	LD   R26,Y
000861 81b9      	LDD  R27,Y+1
000862 818a      	LDD  R24,Y+2
000863 819b      	LDD  R25,Y+3
000864 9508      	RET
                 
                 __PUTD1S0:
000865 83e8      	ST   Y,R30
000866 83f9      	STD  Y+1,R31
000867 836a      	STD  Y+2,R22
000868 837b      	STD  Y+3,R23
000869 9508      	RET
                 
                 __PUTPARD1:
00086a 937a      	ST   -Y,R23
00086b 936a      	ST   -Y,R22
00086c 93fa      	ST   -Y,R31
00086d 93ea      	ST   -Y,R30
00086e 9508      	RET
                 
                 __PUTPARD2:
00086f 939a      	ST   -Y,R25
000870 938a      	ST   -Y,R24
000871 93ba      	ST   -Y,R27
000872 93aa      	ST   -Y,R26
000873 9508      	RET
                 
                 __SWAPD12:
000874 2e18      	MOV  R1,R24
000875 2f86      	MOV  R24,R22
000876 2d61      	MOV  R22,R1
000877 2e19      	MOV  R1,R25
000878 2f97      	MOV  R25,R23
000879 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
00087a 2e1b      	MOV  R1,R27
00087b 2fbf      	MOV  R27,R31
00087c 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
00087d 2e1a      	MOV  R1,R26
00087e 2fae      	MOV  R26,R30
00087f 2de1      	MOV  R30,R1
000880 9508      	RET
                 
                 __CPD10:
000881 9730      	SBIW R30,0
000882 4060      	SBCI R22,0
000883 4070      	SBCI R23,0
000884 9508      	RET
                 
                 __CPD02:
000885 2400      	CLR  R0
000886 160a      	CP   R0,R26
000887 060b      	CPC  R0,R27
000888 0608      	CPC  R0,R24
000889 0609      	CPC  R0,R25
00088a 9508      	RET
                 
                 __CPD12:
00088b 17ea      	CP   R30,R26
00088c 07fb      	CPC  R31,R27
00088d 0768      	CPC  R22,R24
00088e 0779      	CPC  R23,R25
00088f 9508      	RET
                 
                 __SAVELOCR6:
000890 935a      	ST   -Y,R21
                 __SAVELOCR5:
000891 934a      	ST   -Y,R20
                 __SAVELOCR4:
000892 933a      	ST   -Y,R19
                 __SAVELOCR3:
000893 932a      	ST   -Y,R18
                 __SAVELOCR2:
000894 931a      	ST   -Y,R17
000895 930a      	ST   -Y,R16
000896 9508      	RET
                 
                 __LOADLOCR6:
000897 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000898 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000899 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00089a 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00089b 8119      	LDD  R17,Y+1
00089c 8108      	LD   R16,Y
00089d 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8A register use summary:
r0 :  43 r1 :  36 r2 :  10 r3 :   0 r4 :   0 r5 :  13 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  22 r17:  55 r18:  36 r19:  25 r20:  28 r21:  67 r22: 111 r23: 113 
r24: 100 r25:  74 r26: 172 r27:  91 r28:  16 r29:   1 r30: 366 r31: 121 
x  :  20 y  : 194 z  :  11 
Registers used: 24 out of 35 (68.6%)

ATmega8A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  22 add   :  14 
adiw  :  15 and   :  11 andi  :  25 asr   :   0 bclr  :   0 bld   :  10 
brbc  :   0 brbs  :   0 brcc  :   8 brcs  :   1 break :   0 breq  :  39 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   3 brmi  :   9 brne  :  78 brpl  :   7 brsh  :   8 brtc  :   5 
brts  :   3 brvc  :   4 brvs  :   4 bset  :   0 bst   :   5 cbi   :   5 
cbr   :   1 clc   :   4 clh   :   0 cli   :   1 cln   :   0 clr   :  40 
cls   :   0 clt   :   9 clv   :   0 clz   :   2 com   :  12 cp    :  18 
cpc   :  16 cpi   :  59 cpse  :   0 dec   :  27 des   :   0 eor   :   9 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   4 ijmp  :   0 in    :  24 
inc   :   4 ld    :  45 ldd   :  81 ldi   : 264 lds   :  43 lpm   :  13 
lsl   :  17 lsr   :   7 mov   :  70 movw  :  31 mul   :   9 muls  :   0 
mulsu :   0 neg   :   4 nop   :   0 or    :   3 ori   :  16 out   :  35 
pop   :  38 push  :  38 rcall : 272 ret   :  94 reti  :   1 rjmp  : 134 
rol   :  30 ror   :  21 sbc   :  10 sbci  :  14 sbi   :   3 sbic  :   3 
sbis  :   3 sbiw  :  19 sbr   :   3 sbrc  :   3 sbrs  :   9 sec   :   6 
seh   :   0 sei   :   0 sen   :   0 ser   :   8 ses   :   0 set   :   9 
sev   :   0 sez   :   1 sleep :   0 spm   :   0 st    :  62 std   :  26 
sts   :   9 sub   :   5 subi  :  19 swap  :   3 tst   :  19 wdr   :   1 

Instructions used: 80 out of 114 (70.2%)

ATmega8A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00113c   4144    268   4412    8192  53.9%
[.dseg] 0x000060 0x000219      0    185    185    1024  18.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 7 warnings
