
AVRASM ver. 2.1.30  E:\Project\RF433\source\Debug\List\rf433_slave.asm Sun May 15 11:32:16 2022

E:\Project\RF433\source\Debug\List\rf433_slave.asm(1086): warning: Register r5 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : float, width, precision
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8A
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _lcd=R5
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c092      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 c144      	RJMP _twi_int_handler
000012 cfed      	RJMP 0x00
                 
                 _conv_delay_G103:
000013 0064
000014 00c8
000015 0190
000016 0320      	.DB  0x64,0x0,0xC8,0x0,0x90,0x1,0x20,0x3
                 _bit_mask_G103:
000017 fff8
000018 fffc
000019 fffe
00001a ffff      	.DB  0xF8,0xFF,0xFC,0xFF,0xFE,0xFF,0xFF,0xFF
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00001b 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
E:\Project\RF433\source\Debug\List\rf433_slave.asm(1126): warning: .cseg .db misalignment - padding zero byte
00001c 0000      	.DB  0x0
                 
                 _0x0:
00001d 434c
00001e 2044
00001f 3249
000020 2043      	.DB  0x4C,0x43,0x44,0x20,0x49,0x32,0x43,0x20
000021 4e49
000022 5449
000023 2d2d
000024 002d      	.DB  0x49,0x4E,0x49,0x54,0x2D,0x2D,0x2D,0x0
                 _0x20000:
000025 3249
000026 2043
000027 4e49
000028 5449      	.DB  0x49,0x32,0x43,0x20,0x49,0x4E,0x49,0x54
000029 003a
00002a 7453
00002b 7261
00002c 2074      	.DB  0x3A,0x0,0x53,0x74,0x61,0x72,0x74,0x20
00002d 7845
00002e 2e65
00002f 4100
000030 4b43      	.DB  0x45,0x78,0x65,0x2E,0x0,0x41,0x43,0x4B
000031 5220
000032 6365
000033 6965
000034 6576      	.DB  0x20,0x52,0x65,0x63,0x65,0x69,0x76,0x65
000035 2064
000036 6f66
000037 2072
000038 544d      	.DB  0x64,0x20,0x66,0x6F,0x72,0x20,0x4D,0x54
000039 5320
00003a 414c
00003b 4100
00003c 4b43      	.DB  0x20,0x53,0x4C,0x41,0x0,0x41,0x43,0x4B
00003d 5220
00003e 6365
00003f 6965
000040 6576      	.DB  0x20,0x52,0x65,0x63,0x65,0x69,0x76,0x65
000041 2064
000042 6f66
000043 2072
000044 544d      	.DB  0x64,0x20,0x66,0x6F,0x72,0x20,0x4D,0x54
000045 4420
000046 7461
000047 2061
000048 7774      	.DB  0x20,0x44,0x61,0x74,0x61,0x20,0x74,0x77
000049 5f69
00004a 7277
00004b 7469
00004c 5f65      	.DB  0x69,0x5F,0x77,0x72,0x69,0x74,0x65,0x5F
00004d 7764
00004e 2072
00004f 5200
000050 6365      	.DB  0x64,0x77,0x72,0x20,0x0,0x52,0x65,0x63
000051 6965
000052 6976
000053 676e
000054 4d20      	.DB  0x65,0x69,0x76,0x69,0x6E,0x67,0x20,0x4D
000055 2052
000056 6164
000057 6174
000058 4120      	.DB  0x52,0x20,0x64,0x61,0x74,0x61,0x20,0x41
000059 4b43
00005a 0020
00005b 6552
00005c 6563      	.DB  0x43,0x4B,0x20,0x0,0x52,0x65,0x63,0x65
00005d 7669
00005e 6e69
00005f 2067
000060 524d      	.DB  0x69,0x76,0x69,0x6E,0x67,0x20,0x4D,0x52
000061 4420
000062 7461
000063 2061
000064 414e      	.DB  0x20,0x44,0x61,0x74,0x61,0x20,0x4E,0x41
000065 4b43
E:\Project\RF433\source\Debug\List\rf433_slave.asm(1148): warning: .cseg .db misalignment - padding zero byte
000066 0000      	.DB  0x43,0x4B,0x0
                 _0x2000003:
E:\Project\RF433\source\Debug\List\rf433_slave.asm(1150): warning: .cseg .db misalignment - padding zero byte
000067 0007      	.DB  0x7
                 _0x2040000:
000068 4e2d
000069 4e41
E:\Project\RF433\source\Debug\List\rf433_slave.asm(1152): warning: .cseg .db misalignment - padding zero byte
00006a 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x20A0060:
E:\Project\RF433\source\Debug\List\rf433_slave.asm(1154): warning: .cseg .db misalignment - padding zero byte
00006b 0001      	.DB  0x1
                 _0x20A0000:
00006c 4e2d
00006d 4e41
00006e 4900
00006f 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\Project\RF433\source\Debug\List\rf433_slave.asm(1157): warning: .cseg .db misalignment - padding zero byte
000070 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000071 0001      	.DW  0x01
000072 0002      	.DW  0x02
000073 0036      	.DW  __REG_BIT_VARS*2
                 
000074 0001      	.DW  0x01
000075 0005      	.DW  0x05
000076 0038      	.DW  __REG_VARS*2
                 
000077 0010      	.DW  0x10
000078 0160      	.DW  _0x6
000079 003a      	.DW  _0x0*2
                 
00007a 000a      	.DW  0x0A
00007b 0170      	.DW  _0x20003
00007c 004a      	.DW  _0x20000*2
                 
00007d 000b      	.DW  0x0B
00007e 017a      	.DW  _0x2000B
00007f 0054      	.DW  _0x20000*2+10
                 
000080 0018      	.DW  0x18
000081 0185      	.DW  _0x20010
000082 005f      	.DW  _0x20000*2+21
                 
000083 0028      	.DW  0x28
000084 019d      	.DW  _0x20015
000085 0077      	.DW  _0x20000*2+45
                 
000086 0017      	.DW  0x17
000087 01c5      	.DW  _0x2001D
000088 009f      	.DW  _0x20000*2+85
                 
000089 0017      	.DW  0x17
00008a 01dc      	.DW  _0x20021
00008b 00b6      	.DW  _0x20000*2+108
                 
00008c 0001      	.DW  0x01
00008d 01f5      	.DW  _twi_result
00008e 00ce      	.DW  _0x2000003*2
                 
00008f 0001      	.DW  0x01
000090 020f      	.DW  __seed_G105
000091 00d6      	.DW  _0x20A0060*2
                 
                 _0xFFFFFFFF:
000092 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000093 94f8      	CLI
000094 27ee      	CLR  R30
000095 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000096 e0f1      	LDI  R31,1
000097 bffb      	OUT  GICR,R31
000098 bfeb      	OUT  GICR,R30
000099 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00009a e08d      	LDI  R24,(14-2)+1
00009b e0a2      	LDI  R26,2
00009c 27bb      	CLR  R27
                 __CLEAR_REG:
00009d 93ed      	ST   X+,R30
00009e 958a      	DEC  R24
00009f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000a0 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000a1 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000a2 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000a3 93ed      	ST   X+,R30
0000a4 9701      	SBIW R24,1
0000a5 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000a6 eee2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000a7 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000a8 9185      	LPM  R24,Z+
0000a9 9195      	LPM  R25,Z+
0000aa 9700      	SBIW R24,0
0000ab f061      	BREQ __GLOBAL_INI_END
0000ac 91a5      	LPM  R26,Z+
0000ad 91b5      	LPM  R27,Z+
0000ae 9005      	LPM  R0,Z+
0000af 9015      	LPM  R1,Z+
0000b0 01bf      	MOVW R22,R30
0000b1 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000b2 9005      	LPM  R0,Z+
0000b3 920d      	ST   X+,R0
0000b4 9701      	SBIW R24,1
0000b5 f7e1      	BRNE __GLOBAL_INI_LOOP
0000b6 01fb      	MOVW R30,R22
0000b7 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000b8 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000b9 bfed      	OUT  SPL,R30
0000ba e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000bb bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000bc e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000bd e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000be c02c      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * i2c_lcd.c
                 ; *
                 ; *
                 ; * Author : vigne
                 ; */
                 ;
                 ;//#include <avr/io.h>
                 ;//#include <util/twi.h>			//--- Give Status of I2C Bus will operation
                 ;//#define F_CPU	100000UL
                 ;#include <delay.h>
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include "twi_i2c.h"
                 ;#include "twi_lcd.h"
                 
                 	.CSEG
                 ;	x -> Y+0
                 ;	x -> Y+1
                 ;	temp -> R17
                 ;	x -> Y+0
                 ;	x -> Y+0
                 ;	*c -> Y+0
                 _twi_lcd_num:
                 ; .FSTART _twi_lcd_num
0000bf d6f5      	RCALL __PUTPARD2
0000c0 d715      	RCALL __SAVELOCR6
                 ;	c -> Y+6
                 ;	num_integer -> R16,R17
                 ;	tram -> R19
                 ;	chuc -> R18
                 ;	donvi -> R21
0000c1 d3e8      	RCALL SUBOPT_0x0
                +
0000c2 e0e0     +LDI R30 , LOW ( 0x41200000 )
0000c3 e0f0     +LDI R31 , HIGH ( 0x41200000 )
0000c4 e260     +LDI R22 , BYTE3 ( 0x41200000 )
0000c5 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0000c6 d5cb      	RCALL __MULF12
0000c7 d507      	RCALL __CFD1U
0000c8 018f      	MOVW R16,R30
0000c9 01d8      	MOVW R26,R16
0000ca e6e4      	LDI  R30,LOW(100)
0000cb e0f0      	LDI  R31,HIGH(100)
0000cc d6a7      	RCALL __DIVW21
0000cd 2f3e      	MOV  R19,R30
0000ce 01d8      	MOVW R26,R16
0000cf e0ea      	LDI  R30,LOW(10)
0000d0 e0f0      	LDI  R31,HIGH(10)
0000d1 d6a2      	RCALL __DIVW21
0000d2 01df      	MOVW R26,R30
0000d3 e0ea      	LDI  R30,LOW(10)
0000d4 e0f0      	LDI  R31,HIGH(10)
0000d5 d6a3      	RCALL __MODW21
0000d6 2f2e      	MOV  R18,R30
0000d7 01d8      	MOVW R26,R16
0000d8 e0ea      	LDI  R30,LOW(10)
0000d9 e0f0      	LDI  R31,HIGH(10)
0000da d69e      	RCALL __MODW21
0000db 2f5e      	MOV  R21,R30
0000dc e6a1      	LDI  R26,LOW(97)
0000dd d063      	RCALL _usart_tx
0000de 2fa3      	MOV  R26,R19
0000df 5da0      	SUBI R26,-LOW(48)
0000e0 d060      	RCALL _usart_tx
0000e1 2fa2      	MOV  R26,R18
0000e2 5da0      	SUBI R26,-LOW(48)
0000e3 d05d      	RCALL _usart_tx
0000e4 2fa5      	MOV  R26,R21
0000e5 5da0      	SUBI R26,-LOW(48)
0000e6 d05a      	RCALL _usart_tx
0000e7 e6a5      	LDI  R26,LOW(101)
0000e8 d058      	RCALL _usart_tx
0000e9 d6f3      	RCALL __LOADLOCR6
0000ea c26d      	RJMP _0x20E0007
                 ; .FEND
                 
                 	.DSEG
                 _0x6:
000160           	.BYTE 0x10
                 ;// 1 Wire Bus interface functions
                 ;#include <1wire.h>
                 ;
                 ;// DS1820 Temperature Sensor functions
                 ;#include <ds18b20.h>
                 ;#include <stdio.h>
                 ;
                 ;float temp =0;
                 ;
                 ;void main(void)
                 ; 0000 0019 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 001A     // Port C initialization
                 ; 0000 001B //// Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 001C //DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
                 ; 0000 001D //// State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 001E //PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
                 ; 0000 001F 
                 ; 0000 0020     twi_init();                                    //--- TWI Initialize
0000eb d021      	RCALL _twi_init
                 ; 0000 0021 //    twi_lcd_init();                                //--- TWI LCD Initialize
                 ; 0000 0022 //    twi_lcd_msg("RF433");                        //--- Send a String to LCD
                 ; 0000 0023     /* Replace with your application code */
                 ; 0000 0024 
                 ; 0000 0025     w1_init();
0000ec d42c      	RCALL _w1_init
                 ; 0000 0026     ds18b20_init(NULL, 0 , 0 ,DS18B20_10BIT_RES )  ;
0000ed e0e0      	LDI  R30,LOW(0)
0000ee e0f0      	LDI  R31,HIGH(0)
0000ef 93fa      	ST   -Y,R31
0000f0 93ea      	ST   -Y,R30
0000f1 93ea      	ST   -Y,R30
0000f2 93ea      	ST   -Y,R30
0000f3 e0a1      	LDI  R26,LOW(1)
0000f4 d37a      	RCALL _ds18b20_init
                 ; 0000 0027     while (1)
                 _0x7:
                 ; 0000 0028     {
                 ; 0000 0029       temp = ds18b20_temperature(NULL)  ;
0000f5 e0a0      	LDI  R26,LOW(0)
0000f6 e0b0      	LDI  R27,0
0000f7 d340      	RCALL _ds18b20_temperature
0000f8 93e0 01ff 	STS  _temp,R30
0000fa 93f0 0200 	STS  _temp+1,R31
0000fc 9360 0201 	STS  _temp+2,R22
0000fe 9370 0202 	STS  _temp+3,R23
                 ; 0000 002A 
                 ; 0000 002B 
                 ; 0000 002C  //       printf("Nhiet do: %f\r\n", temp);
                 ; 0000 002D   //     twi_lcd_cmd(0xC0);                        //--- Select 2nd Row
                 ; 0000 002E    //   twi_lcd_msg("nhiet do: 7 *C \r\n");            //--- Send a String to LCD
                 ; 0000 002F //        twi_lcd_num(temp)  ;
                 ; 0000 0030  //        usart_msg("uart:");
                 ; 0000 0031 
                 ; 0000 0032         if(PINB.0 == 0)
000100 99b0      	SBIC 0x16,0
000101 c009      	RJMP _0xA
                 ; 0000 0033         {
                 ; 0000 0034 //        twi_lcd_num(temp)
                 ; 0000 0035 //         temp = ds18b20_temperature(NULL)  ;
                 ; 0000 0036 //         usart_msg("uart:");
                 ; 0000 0037 //            usart_tx('a');
                 ; 0000 0038 //            usart_tx('1');
                 ; 0000 0039 //            usart_tx('4');
                 ; 0000 003A //            printf("%f\r\n", temp);
                 ; 0000 003B         twi_lcd_num(temp);
000102 91a0 01ff 	LDS  R26,_temp
000104 91b0 0200 	LDS  R27,_temp+1
000106 9180 0201 	LDS  R24,_temp+2
000108 9190 0202 	LDS  R25,_temp+3
00010a dfb4      	RCALL _twi_lcd_num
                 ; 0000 003C         }
                 ; 0000 003D     }
                 _0xA:
00010b cfe9      	RJMP _0x7
                 ; 0000 003E }
                 _0xB:
00010c cfff      	RJMP _0xB
                 ; .FEND
                 ;/*
                 ;
                 ;		TWI MAIN FILE
                 ;		twi.c
                 ;*/
                 ;
                 ;#include "twi_i2c.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <mega8.h>
                 ;#include <delay.h>
                 ;#define F_CPU 8000000UL
                 ;
                 ;void twi_init()
                 ; 0001 000D {
                 
                 	.CSEG
                 _twi_init:
                 ; .FSTART _twi_init
                 ; 0001 000E 	DDRC = 0x30;								//--- PORTC Last two bit as Output
00010d e3e0      	LDI  R30,LOW(48)
00010e bbe4      	OUT  0x14,R30
                 ; 0001 000F 	PORTC = 0x30;
00010f bbe5      	OUT  0x15,R30
                 ; 0001 0010 
                 ; 0001 0011 	usart_init();								//--- Usart Initialization
000110 d026      	RCALL _usart_init
                 ; 0001 0012 	usart_msg("I2C INIT:");				//--- Send String to Com Port of PC
                +
000111 e7a0     +LDI R26 , LOW ( _0x20003 + ( 0 ) )
000112 e0b1     +LDI R27 , HIGH ( _0x20003 + ( 0 ) )
                 	__POINTW2MN _0x20003,0
000113 d034      	RCALL _usart_msg
                 ; 0001 0013 	usart_tx(0x0d);								//--- Next Line
000114 e0ad      	LDI  R26,LOW(13)
000115 d02b      	RCALL _usart_tx
                 ; 0001 0014 
                 ; 0001 0015 	TWCR &= ~(1<<TWEN);							//--- Diable TWI
000116 b7e6      	IN   R30,0x36
000117 7feb      	ANDI R30,0xFB
000118 bfe6      	OUT  0x36,R30
                 ; 0001 0016 	TWBR = BITRATE(TWSR = 0x00);	 			//--- Bit rate with prescaler 4
                +
000119 e0e0     +LDI R30 , LOW ( 0x40800000 )
00011a e0f0     +LDI R31 , HIGH ( 0x40800000 )
00011b e860     +LDI R22 , BYTE3 ( 0x40800000 )
00011c e470     +LDI R23 , BYTE4 ( 0x40800000 )
                 	__GETD1N 0x40800000
00011d d692      	RCALL __PUTPARD1
00011e b9e1      	OUT  0x1,R30
00011f 27ff      	CLR  R31
000120 2766      	CLR  R22
000121 2777      	CLR  R23
000122 d4e5      	RCALL __CDF1
000123 d38b      	RCALL SUBOPT_0x1
000124 d2a5      	RCALL _pow
                +
000125 e0a0     +LDI R26 , LOW ( 0x40000000 )
000126 e0b0     +LDI R27 , HIGH ( 0x40000000 )
000127 e080     +LDI R24 , BYTE3 ( 0x40000000 )
000128 e490     +LDI R25 , BYTE4 ( 0x40000000 )
                 	__GETD2N 0x40000000
000129 d568      	RCALL __MULF12
                +
00012a e0a0     +LDI R26 , LOW ( 0x41C00000 )
00012b e0b0     +LDI R27 , HIGH ( 0x41C00000 )
00012c ec80     +LDI R24 , BYTE3 ( 0x41C00000 )
00012d e491     +LDI R25 , BYTE4 ( 0x41C00000 )
                 	__GETD2N 0x41C00000
00012e d5b1      	RCALL __DIVF21
00012f d49f      	RCALL __CFD1U
000130 b9e0      	OUT  0x0,R30
                 ; 0001 0017 	TWCR = (1<<TWEN);							//--- Enable TWI
000131 e0e4      	LDI  R30,LOW(4)
000132 bfe6      	OUT  0x36,R30
                 ; 0001 0018 	delay_us(10);								//--- Delay
                +
000133 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000134 958a     +DEC R24
000135 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0001 0019 }
000136 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x20003:
000170           	.BYTE 0xA
                 ;
                 ;/* Function to Send Start Condition */
                 ;
                 ;void twi_start()
                 ; 0001 001E {
                 
                 	.CSEG
                 ; 0001 001F     char status;
                 ; 0001 0020 	TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		//--- Start Condition as per Datasheet
                 ;	status -> R17
                 ; 0001 0021 	while(!(TWCR & (1<<TWINT)));				//--- Wait till start condition is transmitted to Slave
                 ; 0001 0022     while(!(TWCR&(1<<TWINT)));	                /* Wait until TWI finish its current job */
                 ; 0001 0023     status=TWSR&0xF8;		                    /* Read TWI status register */
                 ; 0001 0024     if(status!=0x10) return ;		            /* Check for repeated start transmitted */
                 ; 0001 0025 
                 ; 0001 0026 	usart_msg("Start Exe.");					//--- Feedback msg to check for error
                 ; 0001 0027 	usart_tx(0x0D);								//--- Next Line
                 ; 0001 0028 }
                 
                 	.DSEG
                 _0x2000B:
00017a           	.BYTE 0xB
                 ;
                 ;/* Function to Send Slave Address for Write operation */
                 ;
                 ;void twi_write_cmd(unsigned char address)
                 ; 0001 002D {
                 
                 	.CSEG
                 ; 0001 002E     char status;
                 ; 0001 002F 	TWDR=address;								//--- SLA Address and write instruction
                 ;	address -> Y+1
                 ;	status -> R17
                 ; 0001 0030 	TWCR=(1<<TWINT)|(1<<TWEN);					//--- Clear TWI interrupt flag,Enable TWI
                 ; 0001 0031 	while (!(TWCR & (1<<TWINT)));				//--- Wait till complete TWDR byte transmitted to Slave
                 ; 0001 0032     status=TWSR&0xF8;		    /* Read TWI status register */
                 ; 0001 0033     if(status== 0x28) return ;	/* Check for data transmitted &ack received */
                 ; 0001 0034 
                 ; 0001 0035 	usart_msg("ACK Received for MT SLA");		//--- Feedback msg to check for error
                 ; 0001 0036 	usart_tx(0x0D);								//--- Next Line
                 ; 0001 0037 }
                 
                 	.DSEG
                 _0x20010:
000185           	.BYTE 0x18
                 ;
                 ;/* Function to Send Data to Slave Device  */
                 ;
                 ;void twi_write_dwr(unsigned char data)
                 ; 0001 003C {
                 
                 	.CSEG
                 ; 0001 003D     char status;
                 ; 0001 003E 	TWDR=data;									//--- Put data in TWDR
                 ;	data -> Y+1
                 ;	status -> R17
                 ; 0001 003F 	TWCR=(1<<TWINT)|(1<<TWEN);					//--- Clear TWI interrupt flag,Enable TWI
                 ; 0001 0040 	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
                 ; 0001 0041     status=TWSR&0xF8;		    /* Read TWI status register */
                 ; 0001 0042     if(status==0x28) return ;	/* Check for data transmitted &ack received */
                 ; 0001 0043 
                 ; 0001 0044 	usart_msg("ACK Received for MT Data twi_write_dwr ");		//--- Feedback msg to check error
                 ; 0001 0045 	usart_tx(0x0D);								//--- Next Line
                 ; 0001 0046 
                 ; 0001 0047 }
                 
                 	.DSEG
                 _0x20015:
00019d           	.BYTE 0x28
                 ;
                 ;/* Function to Send Stop Condition */
                 ;
                 ;void twi_stop()
                 ; 0001 004C {
                 
                 	.CSEG
                 ; 0001 004D 	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);		//--- Stop Condition as per Datasheet
                 ; 0001 004E }
                 ;
                 ;/* Function to Send Repeated Start Condition */
                 ;
                 ;
                 ;void twi_repeated_start()
                 ; 0001 0054 {
                 ; 0001 0055     char status;
                 ; 0001 0056 	TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		//--- Repeated Start Condition as per Datasheet
                 ;	status -> R17
                 ; 0001 0057 	while(!(TWCR & (1<<TWINT)));				//--- Wait till restart condition is transmitted to Slave
                 ; 0001 0058 	status=TWSR&0xF8;		/* Read TWI status register */
                 ; 0001 0059     if(status!=0x10)     return ;		/* Check for repeated start transmitted */
                 ; 0001 005A 
                 ; 0001 005B //	usart_msg("Repeated Start Exe.");			//--- Feedback msg to check error
                 ; 0001 005C //	usart_tx(0x0D);								//--- Next Line
                 ; 0001 005D }
                 ;
                 ;
                 ;/* Function to Send Read Acknowledgment */
                 ;
                 ;char twi_read_ack()
                 ; 0001 0063 {
                 ; 0001 0064 	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);		//--- Acknowledgment Condition as per Datasheet
                 ; 0001 0065 	while (!(TWCR & (1<<TWINT)));				//--- Wait until Acknowledgment Condition is transmitted to Slave
                 ; 0001 0066 //	while(TW_STATUS != TW_MR_DATA_ACK);			//--- Check for Acknowledgment
                 ; 0001 0067 	usart_msg("Receiving MR data ACK ");		//--- Feedback msg to check error
                 ; 0001 0068 	usart_tx(0x0D);								//--- Next Line
                 ; 0001 0069 	return TWDR;								//--- Return received data from Slave
                 ; 0001 006A }
                 
                 	.DSEG
                 _0x2001D:
0001c5           	.BYTE 0x17
                 ;
                 ;/* Function to Send Read No Acknowledgment */
                 ;
                 ;char twi_read_nack()
                 ; 0001 006F {
                 
                 	.CSEG
                 ; 0001 0070 	TWCR=(1<<TWEN)|(1<<TWINT);					//--- No Acknowledgment Condition as per Datasheet
                 ; 0001 0071 	while (!(TWCR & (1<<TWINT)));				//--- Wait until No Acknowledgment Condition is transmitted to Slave
                 ; 0001 0072 //	while(TW_STATUS != TW_MR_DATA_NACK);		--- Check for Acknowledgment
                 ; 0001 0073 	usart_msg("Receiving MR Data NACK");		//--- Feedback msg to check error
                 ; 0001 0074 	usart_tx(0x0D);								//--- Next Line
                 ; 0001 0075 	return TWDR;								//--- Return received data
                 ; 0001 0076 }
                 
                 	.DSEG
                 _0x20021:
0001dc           	.BYTE 0x17
                 ;
                 ;/* Function to Initialize USART */
                 ;
                 ;void usart_init()
                 ; 0001 007B {
                 
                 	.CSEG
                 _usart_init:
                 ; .FSTART _usart_init
                 ; 0001 007C 	UBRRH = 0;										//--- USART Baud Rate is set to 115200
000137 e0e0      	LDI  R30,LOW(0)
000138 bde0      	OUT  0x20,R30
                 ; 0001 007D 	UBRRL = UBRRL=0x33;//0x08;
000139 e3e3      	LDI  R30,LOW(51)
00013a b9e9      	OUT  0x9,R30
00013b b9e9      	OUT  0x9,R30
                 ; 0001 007E 	UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);	//--- 8-Bit Data Selected
00013c e8e6      	LDI  R30,LOW(134)
00013d bde0      	OUT  0x20,R30
                 ; 0001 007F 	UCSRB = (1<<TXEN) | (1<<RXEN);					//--- Enable TX & RX
00013e e1e8      	LDI  R30,LOW(24)
00013f b9ea      	OUT  0xA,R30
                 ; 0001 0080 }
000140 9508      	RET
                 ; .FEND
                 ;
                 ;/* Function to Transmit data */
                 ;
                 ;void usart_tx(char x)
                 ; 0001 0085 {
                 _usart_tx:
                 ; .FSTART _usart_tx
                 ; 0001 0086 	while (!( UCSRA & (1<<UDRE)));					//--- Check for Buffer is empty
000141 93aa      	ST   -Y,R26
                 ;	x -> Y+0
                 _0x20022:
000142 9b5d      	SBIS 0xB,5
000143 cffe      	RJMP _0x20022
                 ; 0001 0087 	UDR = x;										//--- Send data to USART Buffer
000144 81e8      	LD   R30,Y
000145 b9ec      	OUT  0xC,R30
                 ; 0001 0088 }
000146 9621      	ADIW R28,1
000147 9508      	RET
                 ; .FEND
                 ;
                 ;/* Function to Receive data */
                 ;
                 ;unsigned char usart_rx()
                 ; 0001 008D {
                 ; 0001 008E 	while(!(UCSRA & (1<<RXC)));						//--- Check for data received completed
                 ; 0001 008F 	return(UDR);									//--- Return the received data
                 ; 0001 0090 }
                 ;
                 ;/* Function to transmit string */
                 ;
                 ;void usart_msg(char *c)
                 ; 0001 0095 {
                 _usart_msg:
                 ; .FSTART _usart_msg
                 ; 0001 0096 	while(*c != '\0')								//--- Check for Null
000148 d369      	RCALL SUBOPT_0x2
                 ;	*c -> Y+0
                 _0x20028:
000149 81a8      	LD   R26,Y
00014a 81b9      	LDD  R27,Y+1
00014b 91ec      	LD   R30,X
00014c 30e0      	CPI  R30,0
00014d f031      	BREQ _0x2002A
                 ; 0001 0097 	usart_tx(*c++);									//--- Send the String
00014e 91ed      	LD   R30,X+
00014f 83a8      	ST   Y,R26
000150 83b9      	STD  Y+1,R27
000151 2fae      	MOV  R26,R30
000152 dfee      	RCALL _usart_tx
000153 cff5      	RJMP _0x20028
                 _0x2002A:
                 ; 0001 0098 }
000154 9622      	ADIW R28,2
000155 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;/****** END of Program ******/
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 _twi_int_handler:
                 ; .FSTART _twi_int_handler
000156 920a      	ST   -Y,R0
000157 921a      	ST   -Y,R1
000158 92fa      	ST   -Y,R15
000159 936a      	ST   -Y,R22
00015a 937a      	ST   -Y,R23
00015b 938a      	ST   -Y,R24
00015c 939a      	ST   -Y,R25
00015d 93aa      	ST   -Y,R26
00015e 93ba      	ST   -Y,R27
00015f 93ea      	ST   -Y,R30
000160 93fa      	ST   -Y,R31
000161 b7ef      	IN   R30,SREG
000162 93ea      	ST   -Y,R30
000163 d672      	RCALL __SAVELOCR6
000164 9110 01f4 	LDS  R17,_twi_rx_index
000166 9100 01f3 	LDS  R16,_twi_tx_index
000168 9130 0206 	LDS  R19,_bytes_to_tx_G100
00016a 9120 01f5 	LDS  R18,_twi_result
00016c 2fe1      	MOV  R30,R17
00016d 91a0 0207 	LDS  R26,_twi_rx_buffer_G100
00016f 91b0 0208 	LDS  R27,_twi_rx_buffer_G100+1
000171 e0f0      	LDI  R31,0
000172 0fea      	ADD  R30,R26
000173 1ffb      	ADC  R31,R27
000174 01af      	MOVW R20,R30
000175 b1e1      	IN   R30,0x1
000176 7fe8      	ANDI R30,LOW(0xF8)
000177 30e8      	CPI  R30,LOW(0x8)
000178 f411      	BRNE _0x2000017
000179 e020      	LDI  R18,LOW(0)
00017a c002      	RJMP _0x2000018
                 _0x2000017:
00017b 31e0      	CPI  R30,LOW(0x10)
00017c f419      	BRNE _0x2000019
                 _0x2000018:
00017d 91e0 0203 	LDS  R30,_slave_address_G100
00017f c010      	RJMP _0x2000067
                 _0x2000019:
000180 31e8      	CPI  R30,LOW(0x18)
000181 f011      	BREQ _0x200001D
000182 32e8      	CPI  R30,LOW(0x28)
000183 f521      	BRNE _0x200001E
                 _0x200001D:
000184 1703      	CP   R16,R19
000185 f480      	BRSH _0x200001F
000186 2fe0      	MOV  R30,R16
000187 5f0f      	SUBI R16,-1
000188 91a0 0204 	LDS  R26,_twi_tx_buffer_G100
00018a 91b0 0205 	LDS  R27,_twi_tx_buffer_G100+1
00018c e0f0      	LDI  R31,0
00018d 0fae      	ADD  R26,R30
00018e 1fbf      	ADC  R27,R31
00018f 91ec      	LD   R30,X
                 _0x2000067:
000190 b9e3      	OUT  0x3,R30
000191 b7e6      	IN   R30,0x36
000192 70ef      	ANDI R30,LOW(0xF)
000193 68e0      	ORI  R30,0x80
000194 bfe6      	OUT  0x36,R30
000195 c011      	RJMP _0x2000020
                 _0x200001F:
000196 91e0 0209 	LDS  R30,_bytes_to_rx_G100
000198 171e      	CP   R17,R30
000199 f460      	BRSH _0x2000021
00019a 91e0 0203 	LDS  R30,_slave_address_G100
00019c 60e1      	ORI  R30,1
00019d 93e0 0203 	STS  _slave_address_G100,R30
00019f 94e8      	CLT
0001a0 f820      	BLD  R2,0
0001a1 b7e6      	IN   R30,0x36
0001a2 70ef      	ANDI R30,LOW(0xF)
0001a3 6ae0      	ORI  R30,LOW(0xA0)
0001a4 bfe6      	OUT  0x36,R30
0001a5 c0fb      	RJMP _0x2000016
                 _0x2000021:
0001a6 c033      	RJMP _0x2000022
                 _0x2000020:
0001a7 c0f9      	RJMP _0x2000016
                 _0x200001E:
0001a8 35e0      	CPI  R30,LOW(0x50)
0001a9 f429      	BRNE _0x2000023
0001aa b1e3      	IN   R30,0x3
0001ab 01da      	MOVW R26,R20
0001ac 93ec      	ST   X,R30
0001ad 5f1f      	SUBI R17,-LOW(1)
0001ae c002      	RJMP _0x2000024
                 _0x2000023:
0001af 34e0      	CPI  R30,LOW(0x40)
0001b0 f471      	BRNE _0x2000025
                 _0x2000024:
0001b1 91e0 0209 	LDS  R30,_bytes_to_rx_G100
0001b3 50e1      	SUBI R30,LOW(1)
0001b4 171e      	CP   R17,R30
0001b5 f020      	BRLO _0x2000026
0001b6 b7e6      	IN   R30,0x36
0001b7 70ef      	ANDI R30,LOW(0xF)
0001b8 68e0      	ORI  R30,0x80
0001b9 c003      	RJMP _0x2000068
                 _0x2000026:
0001ba b7e6      	IN   R30,0x36
0001bb 70ef      	ANDI R30,LOW(0xF)
0001bc 6ce0      	ORI  R30,LOW(0xC0)
                 _0x2000068:
0001bd bfe6      	OUT  0x36,R30
0001be c0e2      	RJMP _0x2000016
                 _0x2000025:
0001bf 35e8      	CPI  R30,LOW(0x58)
0001c0 f429      	BRNE _0x2000028
0001c1 b1e3      	IN   R30,0x3
0001c2 01da      	MOVW R26,R20
0001c3 93ec      	ST   X,R30
0001c4 5f1f      	SUBI R17,-LOW(1)
0001c5 c002      	RJMP _0x2000029
                 _0x2000028:
0001c6 32e0      	CPI  R30,LOW(0x20)
0001c7 f409      	BRNE _0x200002A
                 _0x2000029:
0001c8 c002      	RJMP _0x200002B
                 _0x200002A:
0001c9 33e0      	CPI  R30,LOW(0x30)
0001ca f409      	BRNE _0x200002C
                 _0x200002B:
0001cb c002      	RJMP _0x200002D
                 _0x200002C:
0001cc 34e8      	CPI  R30,LOW(0x48)
0001cd f469      	BRNE _0x200002E
                 _0x200002D:
0001ce 3020      	CPI  R18,0
0001cf f451      	BRNE _0x200002F
0001d0 fe20      	SBRS R2,0
0001d1 c003      	RJMP _0x2000030
0001d2 1703      	CP   R16,R19
0001d3 f028      	BRLO _0x2000032
0001d4 c005      	RJMP _0x2000033
                 _0x2000030:
0001d5 91e0 0209 	LDS  R30,_bytes_to_rx_G100
0001d7 171e      	CP   R17,R30
0001d8 f408      	BRSH _0x2000034
                 _0x2000032:
0001d9 e024      	LDI  R18,LOW(4)
                 _0x2000034:
                 _0x2000033:
                 _0x200002F:
                 _0x2000022:
0001da c0c0      	RJMP _0x2000069
                 _0x200002E:
0001db 33e8      	CPI  R30,LOW(0x38)
0001dc f429      	BRNE _0x2000037
0001dd e022      	LDI  R18,LOW(2)
0001de b7e6      	IN   R30,0x36
0001df 70ef      	ANDI R30,LOW(0xF)
0001e0 68e0      	ORI  R30,0x80
0001e1 c0bc      	RJMP _0x200006A
                 _0x2000037:
0001e2 36e8      	CPI  R30,LOW(0x68)
0001e3 f011      	BREQ _0x200003A
0001e4 37e8      	CPI  R30,LOW(0x78)
0001e5 f411      	BRNE _0x200003B
                 _0x200003A:
0001e6 e022      	LDI  R18,LOW(2)
0001e7 c005      	RJMP _0x200003C
                 _0x200003B:
0001e8 36e0      	CPI  R30,LOW(0x60)
0001e9 f011      	BREQ _0x200003F
0001ea 37e0      	CPI  R30,LOW(0x70)
0001eb f491      	BRNE _0x2000040
                 _0x200003F:
0001ec e020      	LDI  R18,LOW(0)
                 _0x200003C:
0001ed e010      	LDI  R17,LOW(0)
0001ee 94e8      	CLT
0001ef f820      	BLD  R2,0
0001f0 91e0 020a 	LDS  R30,_twi_rx_buffer_size_G100
0001f2 30e0      	CPI  R30,0
0001f3 f429      	BRNE _0x2000041
0001f4 e021      	LDI  R18,LOW(1)
0001f5 b7e6      	IN   R30,0x36
0001f6 70ef      	ANDI R30,LOW(0xF)
0001f7 68e0      	ORI  R30,0x80
0001f8 c003      	RJMP _0x200006B
                 _0x2000041:
0001f9 b7e6      	IN   R30,0x36
0001fa 70ef      	ANDI R30,LOW(0xF)
0001fb 6ce0      	ORI  R30,LOW(0xC0)
                 _0x200006B:
0001fc bfe6      	OUT  0x36,R30
0001fd c0a3      	RJMP _0x2000016
                 _0x2000040:
0001fe 38e0      	CPI  R30,LOW(0x80)
0001ff f011      	BREQ _0x2000044
000200 39e0      	CPI  R30,LOW(0x90)
000201 f529      	BRNE _0x2000045
                 _0x2000044:
000202 fe20      	SBRS R2,0
000203 c002      	RJMP _0x2000046
000204 e021      	LDI  R18,LOW(1)
000205 c095      	RJMP _0x2000047
                 _0x2000046:
000206 b1e3      	IN   R30,0x3
000207 01da      	MOVW R26,R20
000208 93ec      	ST   X,R30
000209 5f1f      	SUBI R17,-LOW(1)
00020a 91e0 020a 	LDS  R30,_twi_rx_buffer_size_G100
00020c 171e      	CP   R17,R30
00020d f4b0      	BRSH _0x2000048
00020e 91e0 020b 	LDS  R30,_twi_slave_rx_handler_G100
000210 91f0 020c 	LDS  R31,_twi_slave_rx_handler_G100+1
000212 9730      	SBIW R30,0
000213 f411      	BRNE _0x2000049
000214 e026      	LDI  R18,LOW(6)
000215 c085      	RJMP _0x2000047
                 _0x2000049:
000216 e0a0      	LDI  R26,LOW(0)
                +
000217 91e0 020b+LDS R30 , _twi_slave_rx_handler_G100 + ( 0 )
000219 91f0 020c+LDS R31 , _twi_slave_rx_handler_G100 + ( 0 ) + 1
00021b 9509     +ICALL
                 	__CALL1MN _twi_slave_rx_handler_G100,0
00021c 30e0      	CPI  R30,0
00021d f029      	BREQ _0x200004A
00021e b7e6      	IN   R30,0x36
00021f 70ef      	ANDI R30,LOW(0xF)
000220 6ce0      	ORI  R30,LOW(0xC0)
000221 bfe6      	OUT  0x36,R30
000222 c07e      	RJMP _0x2000016
                 _0x200004A:
000223 c002      	RJMP _0x200004B
                 _0x2000048:
000224 9468      	SET
000225 f820      	BLD  R2,0
                 _0x200004B:
000226 c002      	RJMP _0x200004C
                 _0x2000045:
000227 38e8      	CPI  R30,LOW(0x88)
000228 f409      	BRNE _0x200004D
                 _0x200004C:
000229 c002      	RJMP _0x200004E
                 _0x200004D:
00022a 39e8      	CPI  R30,LOW(0x98)
00022b f429      	BRNE _0x200004F
                 _0x200004E:
00022c b7e6      	IN   R30,0x36
00022d 70ef      	ANDI R30,LOW(0xF)
00022e 68e0      	ORI  R30,0x80
00022f bfe6      	OUT  0x36,R30
000230 c070      	RJMP _0x2000016
                 _0x200004F:
000231 3ae0      	CPI  R30,LOW(0xA0)
000232 f4a9      	BRNE _0x2000050
000233 b7e6      	IN   R30,0x36
000234 70ef      	ANDI R30,LOW(0xF)
000235 6ce0      	ORI  R30,LOW(0xC0)
000236 bfe6      	OUT  0x36,R30
000237 9468      	SET
000238 f821      	BLD  R2,1
000239 91e0 020b 	LDS  R30,_twi_slave_rx_handler_G100
00023b 91f0 020c 	LDS  R31,_twi_slave_rx_handler_G100+1
00023d 9730      	SBIW R30,0
00023e f039      	BREQ _0x2000051
00023f e0a1      	LDI  R26,LOW(1)
                +
000240 91e0 020b+LDS R30 , _twi_slave_rx_handler_G100 + ( 0 )
000242 91f0 020c+LDS R31 , _twi_slave_rx_handler_G100 + ( 0 ) + 1
000244 9509     +ICALL
                 	__CALL1MN _twi_slave_rx_handler_G100,0
000245 c001      	RJMP _0x2000052
                 _0x2000051:
000246 e026      	LDI  R18,LOW(6)
                 _0x2000052:
000247 c059      	RJMP _0x2000016
                 _0x2000050:
000248 3be0      	CPI  R30,LOW(0xB0)
000249 f411      	BRNE _0x2000053
00024a e022      	LDI  R18,LOW(2)
00024b c002      	RJMP _0x2000054
                 _0x2000053:
00024c 3ae8      	CPI  R30,LOW(0xA8)
00024d f4b9      	BRNE _0x2000055
                 _0x2000054:
00024e 91e0 020d 	LDS  R30,_twi_slave_tx_handler_G100
000250 91f0 020e 	LDS  R31,_twi_slave_tx_handler_G100+1
000252 9730      	SBIW R30,0
000253 f059      	BREQ _0x2000056
000254 e0a0      	LDI  R26,LOW(0)
                +
000255 91e0 020d+LDS R30 , _twi_slave_tx_handler_G100 + ( 0 )
000257 91f0 020e+LDS R31 , _twi_slave_tx_handler_G100 + ( 0 ) + 1
000259 9509     +ICALL
                 	__CALL1MN _twi_slave_tx_handler_G100,0
00025a 2f3e      	MOV  R19,R30
00025b 30e0      	CPI  R30,0
00025c f011      	BREQ _0x2000058
00025d e020      	LDI  R18,LOW(0)
00025e c002      	RJMP _0x2000059
                 _0x2000056:
                 _0x2000058:
00025f e026      	LDI  R18,LOW(6)
000260 c03a      	RJMP _0x2000047
                 _0x2000059:
000261 e000      	LDI  R16,LOW(0)
000262 94e8      	CLT
000263 f820      	BLD  R2,0
000264 c002      	RJMP _0x200005A
                 _0x2000055:
000265 3be8      	CPI  R30,LOW(0xB8)
000266 f4e1      	BRNE _0x200005B
                 _0x200005A:
000267 fe20      	SBRS R2,0
000268 c002      	RJMP _0x200005C
000269 e021      	LDI  R18,LOW(1)
00026a c030      	RJMP _0x2000047
                 _0x200005C:
00026b 2fe0      	MOV  R30,R16
00026c 5f0f      	SUBI R16,-1
00026d 91a0 0204 	LDS  R26,_twi_tx_buffer_G100
00026f 91b0 0205 	LDS  R27,_twi_tx_buffer_G100+1
000271 e0f0      	LDI  R31,0
000272 0fae      	ADD  R26,R30
000273 1fbf      	ADC  R27,R31
000274 91ec      	LD   R30,X
000275 b9e3      	OUT  0x3,R30
000276 1703      	CP   R16,R19
000277 f420      	BRSH _0x200005D
000278 b7e6      	IN   R30,0x36
000279 70ef      	ANDI R30,LOW(0xF)
00027a 6ce0      	ORI  R30,LOW(0xC0)
00027b c005      	RJMP _0x200006C
                 _0x200005D:
00027c 9468      	SET
00027d f820      	BLD  R2,0
00027e b7e6      	IN   R30,0x36
00027f 70ef      	ANDI R30,LOW(0xF)
000280 68e0      	ORI  R30,0x80
                 _0x200006C:
000281 bfe6      	OUT  0x36,R30
000282 c01e      	RJMP _0x2000016
                 _0x200005B:
000283 3ce0      	CPI  R30,LOW(0xC0)
000284 f011      	BREQ _0x2000060
000285 3ce8      	CPI  R30,LOW(0xC8)
000286 f489      	BRNE _0x2000061
                 _0x2000060:
000287 b7e6      	IN   R30,0x36
000288 70ef      	ANDI R30,LOW(0xF)
000289 6ce0      	ORI  R30,LOW(0xC0)
00028a bfe6      	OUT  0x36,R30
00028b 91e0 020d 	LDS  R30,_twi_slave_tx_handler_G100
00028d 91f0 020e 	LDS  R31,_twi_slave_tx_handler_G100+1
00028f 9730      	SBIW R30,0
000290 f031      	BREQ _0x2000062
000291 e0a1      	LDI  R26,LOW(1)
                +
000292 91e0 020d+LDS R30 , _twi_slave_tx_handler_G100 + ( 0 )
000294 91f0 020e+LDS R31 , _twi_slave_tx_handler_G100 + ( 0 ) + 1
000296 9509     +ICALL
                 	__CALL1MN _twi_slave_tx_handler_G100,0
                 _0x2000062:
000297 c007      	RJMP _0x2000035
                 _0x2000061:
000298 30e0      	CPI  R30,0
000299 f439      	BRNE _0x2000016
00029a e023      	LDI  R18,LOW(3)
                 _0x2000047:
                 _0x2000069:
00029b b7e6      	IN   R30,0x36
00029c 70ef      	ANDI R30,LOW(0xF)
00029d 6de0      	ORI  R30,LOW(0xD0)
                 _0x200006A:
00029e bfe6      	OUT  0x36,R30
                 _0x2000035:
00029f 9468      	SET
0002a0 f821      	BLD  R2,1
                 _0x2000016:
0002a1 9310 01f4 	STS  _twi_rx_index,R17
0002a3 9300 01f3 	STS  _twi_tx_index,R16
0002a5 9320 01f5 	STS  _twi_result,R18
0002a7 9330 0206 	STS  _bytes_to_tx_G100,R19
0002a9 d533      	RCALL __LOADLOCR6
0002aa 9626      	ADIW R28,6
0002ab 91e9      	LD   R30,Y+
0002ac bfef      	OUT  SREG,R30
0002ad 91f9      	LD   R31,Y+
0002ae 91e9      	LD   R30,Y+
0002af 91b9      	LD   R27,Y+
0002b0 91a9      	LD   R26,Y+
0002b1 9199      	LD   R25,Y+
0002b2 9189      	LD   R24,Y+
0002b3 9179      	LD   R23,Y+
0002b4 9169      	LD   R22,Y+
0002b5 90f9      	LD   R15,Y+
0002b6 9019      	LD   R1,Y+
0002b7 9009      	LD   R0,Y+
0002b8 9518      	RETI
                 ; .FEND
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
0002b9 d4fb      	RCALL __PUTPARD2
0002ba 817b         ldd  r23,y+3
0002bb 816a         ldd  r22,y+2
0002bc 81f9         ldd  r31,y+1
0002bd 81e8         ld   r30,y
0002be fb77         bst  r23,7
0002bf 0f77         lsl  r23
0002c0 fd67         sbrc r22,7
0002c1 6071         sbr  r23,1
0002c2 2f97         mov  r25,r23
0002c3 579e         subi r25,0x7e
0002c4 f081         breq __ftrunc0
0002c5 f078         brcs __ftrunc0
0002c6 3198         cpi  r25,24
0002c7 f490         brsh __ftrunc1
0002c8 27aa         clr  r26
0002c9 27bb         clr  r27
0002ca 2788         clr  r24
                 __ftrunc2:
0002cb 9408         sec
0002cc 9587         ror  r24
0002cd 95b7         ror  r27
0002ce 95a7         ror  r26
0002cf 959a         dec  r25
0002d0 f7d1         brne __ftrunc2
0002d1 23ea         and  r30,r26
0002d2 23fb         and  r31,r27
0002d3 2368         and  r22,r24
0002d4 c005         rjmp __ftrunc1
                 __ftrunc0:
0002d5 94e8         clt
0002d6 2777         clr  r23
0002d7 27ee         clr  r30
0002d8 27ff         clr  r31
0002d9 2766         clr  r22
                 __ftrunc1:
0002da 776f         cbr  r22,0x80
0002db 9576         lsr  r23
0002dc f408         brcc __ftrunc3
0002dd 6860         sbr  r22,0x80
                 __ftrunc3:
0002de f977         bld  r23,7
0002df 91a9         ld   r26,y+
0002e0 91b9         ld   r27,y+
0002e1 9189         ld   r24,y+
0002e2 9199         ld   r25,y+
0002e3 17ea         cp   r30,r26
0002e4 07fb         cpc  r31,r27
0002e5 0768         cpc  r22,r24
0002e6 0779         cpc  r23,r25
0002e7 fb97         bst  r25,7
0002e8 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
0002e9 d4cb      	RCALL __PUTPARD2
0002ea d4bb      	RCALL __GETD2S0
0002eb dfcd      	RCALL _ftrunc
0002ec d4be      	RCALL __PUTD1S0
0002ed f411          brne __floor1
                 __floor0:
0002ee d1c6      	RCALL SUBOPT_0x3
0002ef c003      	RJMP _0x20E0008
                 __floor1:
0002f0 f7ee          brtc __floor0
0002f1 d1c3      	RCALL SUBOPT_0x3
0002f2 d1c4      	RCALL SUBOPT_0x4
                 _0x20E0008:
0002f3 9624      	ADIW R28,4
0002f4 9508      	RET
                 ; .FEND
                 _log:
                 ; .FSTART _log
0002f5 d4bf      	RCALL __PUTPARD2
0002f6 9724      	SBIW R28,4
0002f7 d4e2      	RCALL __SAVELOCR2
0002f8 d1b1      	RCALL SUBOPT_0x0
0002f9 d4d1      	RCALL __CPD02
0002fa f02c      	BRLT _0x202000C
                +
0002fb efef     +LDI R30 , LOW ( 0xFF7FFFFF )
0002fc efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
0002fd e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
0002fe ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
0002ff c057      	RJMP _0x20E0006
                 _0x202000C:
000300 d1bc      	RCALL SUBOPT_0x5
000301 d4ae      	RCALL __PUTPARD1
000302 b7ad      	IN   R26,SPL
000303 b7be      	IN   R27,SPH
000304 9711      	SBIW R26,1
000305 931f      	PUSH R17
000306 930f      	PUSH R16
000307 d277      	RCALL _frexp
000308 910f      	POP  R16
000309 911f      	POP  R17
00030a d1b7      	RCALL SUBOPT_0x6
00030b d19e      	RCALL SUBOPT_0x0
                +
00030c efe3     +LDI R30 , LOW ( 0x3F3504F3 )
00030d e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
00030e e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
00030f e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
000310 d414      	RCALL __CMPF12
000311 f430      	BRSH _0x202000D
000312 d1aa      	RCALL SUBOPT_0x5
000313 d196      	RCALL SUBOPT_0x0
000314 d32d      	RCALL __ADDF12
000315 d1ac      	RCALL SUBOPT_0x6
                +
000316 5001     +SUBI R16 , LOW ( 1 )
000317 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x202000D:
000318 d1a4      	RCALL SUBOPT_0x5
000319 d19d      	RCALL SUBOPT_0x4
00031a 937f      	PUSH R23
00031b 936f      	PUSH R22
00031c 93ff      	PUSH R31
00031d 93ef      	PUSH R30
00031e d19e      	RCALL SUBOPT_0x5
                +
00031f e0a0     +LDI R26 , LOW ( 0x3F800000 )
000320 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000321 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000322 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000323 d31e      	RCALL __ADDF12
000324 91af      	POP  R26
000325 91bf      	POP  R27
000326 918f      	POP  R24
000327 919f      	POP  R25
000328 d3b7      	RCALL __DIVF21
000329 d19d      	RCALL SUBOPT_0x7
                +
00032a e2a6     +LDI R26 , LOW ( 0x3F654226 )
00032b e4b2     +LDI R27 , HIGH ( 0x3F654226 )
00032c e685     +LDI R24 , BYTE3 ( 0x3F654226 )
00032d e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
00032e d363      	RCALL __MULF12
00032f d17f      	RCALL SUBOPT_0x1
                +
000330 e4ee     +LDI R30 , LOW ( 0x4054114E )
000331 e1f1     +LDI R31 , HIGH ( 0x4054114E )
000332 e564     +LDI R22 , BYTE3 ( 0x4054114E )
000333 e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
000334 d485      	RCALL __SWAPD12
000335 d305      	RCALL __SUBF12
000336 d173      	RCALL SUBOPT_0x0
000337 d35a      	RCALL __MULF12
000338 937f      	PUSH R23
000339 936f      	PUSH R22
00033a 93ff      	PUSH R31
00033b 93ef      	PUSH R30
00033c d193      	RCALL SUBOPT_0x8
                +
00033d e4ad     +LDI R26 , LOW ( 0x3FD4114D )
00033e e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
00033f ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
000340 e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
000341 d2f9      	RCALL __SUBF12
000342 91af      	POP  R26
000343 91bf      	POP  R27
000344 918f      	POP  R24
000345 919f      	POP  R25
000346 d399      	RCALL __DIVF21
000347 937f      	PUSH R23
000348 936f      	PUSH R22
000349 93ff      	PUSH R31
00034a 93ef      	PUSH R30
00034b 01f8      	MOVW R30,R16
00034c d188      	RCALL SUBOPT_0x9
                +
00034d e1a8     +LDI R26 , LOW ( 0x3F317218 )
00034e e7b2     +LDI R27 , HIGH ( 0x3F317218 )
00034f e381     +LDI R24 , BYTE3 ( 0x3F317218 )
000350 e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
000351 d340      	RCALL __MULF12
000352 91af      	POP  R26
000353 91bf      	POP  R27
000354 918f      	POP  R24
000355 919f      	POP  R25
000356 d2eb      	RCALL __ADDF12
                 _0x20E0006:
000357 d489      	RCALL __LOADLOCR2
                 _0x20E0007:
000358 962a      	ADIW R28,10
000359 9508      	RET
                 ; .FEND
                 _exp:
                 ; .FSTART _exp
00035a d45a      	RCALL __PUTPARD2
00035b 9728      	SBIW R28,8
00035c d47d      	RCALL __SAVELOCR2
00035d d17a      	RCALL SUBOPT_0xA
                +
00035e e5e0     +LDI R30 , LOW ( 0xC2AEAC50 )
00035f eafc     +LDI R31 , HIGH ( 0xC2AEAC50 )
000360 ea6e     +LDI R22 , BYTE3 ( 0xC2AEAC50 )
000361 ec72     +LDI R23 , BYTE4 ( 0xC2AEAC50 )
                 	__GETD1N 0xC2AEAC50
000362 d3c2      	RCALL __CMPF12
000363 f410      	BRSH _0x202000F
000364 d178      	RCALL SUBOPT_0xB
000365 c061      	RJMP _0x20E0005
                 _0x202000F:
                +
000366 85ea     +LDD R30 , Y + 10
000367 85fb     +LDD R31 , Y + 10 + 1
000368 856c     +LDD R22 , Y + 10 + 2
000369 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
00036a d45c      	RCALL __CPD10
00036b f411      	BRNE _0x2020010
00036c d175      	RCALL SUBOPT_0xC
00036d c059      	RJMP _0x20E0005
                 _0x2020010:
00036e d169      	RCALL SUBOPT_0xA
                +
00036f e1e8     +LDI R30 , LOW ( 0x42B17218 )
000370 e7f2     +LDI R31 , HIGH ( 0x42B17218 )
000371 eb61     +LDI R22 , BYTE3 ( 0x42B17218 )
000372 e472     +LDI R23 , BYTE4 ( 0x42B17218 )
                 	__GETD1N 0x42B17218
000373 d3b1      	RCALL __CMPF12
000374 f009      	BREQ PC+2
000375 f408      	BRCC PC+2
000376 c005      	RJMP _0x2020011
                +
000377 efef     +LDI R30 , LOW ( 0x7F7FFFFF )
000378 efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
000379 e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
00037a e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
00037b c04b      	RJMP _0x20E0005
                 _0x2020011:
00037c d15b      	RCALL SUBOPT_0xA
                +
00037d e3eb     +LDI R30 , LOW ( 0x3FB8AA3B )
00037e eafa     +LDI R31 , HIGH ( 0x3FB8AA3B )
00037f eb68     +LDI R22 , BYTE3 ( 0x3FB8AA3B )
000380 e37f     +LDI R23 , BYTE4 ( 0x3FB8AA3B )
                 	__GETD1N 0x3FB8AA3B
000381 d310      	RCALL __MULF12
                +
000382 87ea     +STD Y + 10 , R30
000383 87fb     +STD Y + 10 + 1 , R31
000384 876c     +STD Y + 10 + 2 , R22
000385 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000386 d151      	RCALL SUBOPT_0xA
000387 df61      	RCALL _floor
000388 d248      	RCALL __CFD1
000389 018f      	MOVW R16,R30
00038a d14d      	RCALL SUBOPT_0xA
00038b d149      	RCALL SUBOPT_0x9
00038c d42d      	RCALL __SWAPD12
00038d d2ad      	RCALL __SUBF12
00038e d120      	RCALL SUBOPT_0x1
                +
00038f e0e0     +LDI R30 , LOW ( 0x3F000000 )
000390 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
000391 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
000392 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
000393 d426      	RCALL __SWAPD12
000394 d2a6      	RCALL __SUBF12
000395 d131      	RCALL SUBOPT_0x7
                +
000396 e6ad     +LDI R26 , LOW ( 0x3D6C4C6D )
000397 e4bc     +LDI R27 , HIGH ( 0x3D6C4C6D )
000398 e68c     +LDI R24 , BYTE3 ( 0x3D6C4C6D )
000399 e39d     +LDI R25 , BYTE4 ( 0x3D6C4C6D )
                 	__GETD2N 0x3D6C4C6D
00039a d2f7      	RCALL __MULF12
                +
00039b eaa6     +LDI R26 , LOW ( 0x40E6E3A6 )
00039c eeb3     +LDI R27 , HIGH ( 0x40E6E3A6 )
00039d ee86     +LDI R24 , BYTE3 ( 0x40E6E3A6 )
00039e e490     +LDI R25 , BYTE4 ( 0x40E6E3A6 )
                 	__GETD2N 0x40E6E3A6
00039f d2a2      	RCALL __ADDF12
0003a0 d109      	RCALL SUBOPT_0x0
0003a1 d2f0      	RCALL __MULF12
0003a2 d11f      	RCALL SUBOPT_0x6
0003a3 d12c      	RCALL SUBOPT_0x8
                +
0003a4 e2a8     +LDI R26 , LOW ( 0x41A68D28 )
0003a5 e8bd     +LDI R27 , HIGH ( 0x41A68D28 )
0003a6 ea86     +LDI R24 , BYTE3 ( 0x41A68D28 )
0003a7 e491     +LDI R25 , BYTE4 ( 0x41A68D28 )
                 	__GETD2N 0x41A68D28
0003a8 d299      	RCALL __ADDF12
                +
0003a9 83ea     +STD Y + 2 , R30
0003aa 83fb     +STD Y + 2 + 1 , R31
0003ab 836c     +STD Y + 2 + 2 , R22
0003ac 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0003ad d10f      	RCALL SUBOPT_0x5
                +
0003ae 81aa     +LDD R26 , Y + 2
0003af 81bb     +LDD R27 , Y + 2 + 1
0003b0 818c     +LDD R24 , Y + 2 + 2
0003b1 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
0003b2 d28f      	RCALL __ADDF12
                +
0003b3 efa3     +LDI R26 , LOW ( 0x3FB504F3 )
0003b4 e0b4     +LDI R27 , HIGH ( 0x3FB504F3 )
0003b5 eb85     +LDI R24 , BYTE3 ( 0x3FB504F3 )
0003b6 e39f     +LDI R25 , BYTE4 ( 0x3FB504F3 )
                 	__GETD2N 0x3FB504F3
0003b7 d2da      	RCALL __MULF12
0003b8 937f      	PUSH R23
0003b9 936f      	PUSH R22
0003ba 93ff      	PUSH R31
0003bb 93ef      	PUSH R30
0003bc d0ed      	RCALL SUBOPT_0x0
0003bd d112      	RCALL SUBOPT_0x8
0003be d27c      	RCALL __SUBF12
0003bf 91af      	POP  R26
0003c0 91bf      	POP  R27
0003c1 918f      	POP  R24
0003c2 919f      	POP  R25
0003c3 d31c      	RCALL __DIVF21
0003c4 d3eb      	RCALL __PUTPARD1
0003c5 01d8      	MOVW R26,R16
0003c6 d1c9      	RCALL _ldexp
                 _0x20E0005:
0003c7 d419      	RCALL __LOADLOCR2
0003c8 962e      	ADIW R28,14
0003c9 9508      	RET
                 ; .FEND
                 _pow:
                 ; .FSTART _pow
0003ca d3ea      	RCALL __PUTPARD2
0003cb 9724      	SBIW R28,4
0003cc d11a      	RCALL SUBOPT_0xD
0003cd d3f9      	RCALL __CPD10
0003ce f411      	BRNE _0x2020012
0003cf d10d      	RCALL SUBOPT_0xB
0003d0 c027      	RJMP _0x20E0004
                 _0x2020012:
0003d1 d11a      	RCALL SUBOPT_0xE
0003d2 d3f8      	RCALL __CPD02
0003d3 f444      	BRGE _0x2020013
0003d4 d11c      	RCALL SUBOPT_0xF
0003d5 d3f1      	RCALL __CPD10
0003d6 f411      	BRNE _0x2020014
0003d7 d10a      	RCALL SUBOPT_0xC
0003d8 c01f      	RJMP _0x20E0004
                 _0x2020014:
0003d9 d112      	RCALL SUBOPT_0xE
0003da d11b      	RCALL SUBOPT_0x10
0003db c01c      	RJMP _0x20E0004
                 _0x2020013:
0003dc d114      	RCALL SUBOPT_0xF
0003dd 01de      	MOVW R26,R28
0003de d1f2      	RCALL __CFD1
0003df d3b5      	RCALL __PUTDP1
0003e0 d0d4      	RCALL SUBOPT_0x3
0003e1 d226      	RCALL __CDF1
0003e2 01df      	MOVW R26,R30
0003e3 01cb      	MOVW R24,R22
0003e4 d10c      	RCALL SUBOPT_0xF
0003e5 d3eb      	RCALL __CPD12
0003e6 f011      	BREQ _0x2020015
0003e7 d0f5      	RCALL SUBOPT_0xB
0003e8 c00f      	RJMP _0x20E0004
                 _0x2020015:
0003e9 d0fd      	RCALL SUBOPT_0xD
0003ea d1b1      	RCALL __ANEGF1
0003eb d0c3      	RCALL SUBOPT_0x1
0003ec d109      	RCALL SUBOPT_0x10
                +
0003ed 87e8     +STD Y + 8 , R30
0003ee 87f9     +STD Y + 8 + 1 , R31
0003ef 876a     +STD Y + 8 + 2 , R22
0003f0 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
0003f1 81e8      	LD   R30,Y
0003f2 70e1      	ANDI R30,LOW(0x1)
0003f3 f411      	BRNE _0x2020016
0003f4 d0f2      	RCALL SUBOPT_0xD
0003f5 c002      	RJMP _0x20E0004
                 _0x2020016:
0003f6 d0f0      	RCALL SUBOPT_0xD
0003f7 d1a4      	RCALL __ANEGF1
                 _0x20E0004:
0003f8 962c      	ADIW R28,12
0003f9 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 _ds18b20_select:
                 ; .FSTART _ds18b20_select
0003fa d0b7      	RCALL SUBOPT_0x2
0003fb 931a      	ST   -Y,R17
0003fc d11c      	RCALL _w1_init
0003fd 30e0      	CPI  R30,0
0003fe f411      	BRNE _0x2060003
0003ff e0e0      	LDI  R30,LOW(0)
000400 c06b      	RJMP _0x20E0002
                 _0x2060003:
000401 81e9      	LDD  R30,Y+1
000402 81fa      	LDD  R31,Y+1+1
000403 9730      	SBIW R30,0
000404 f069      	BREQ _0x2060004
000405 e5a5      	LDI  R26,LOW(85)
000406 d158      	RCALL _w1_write
000407 e010      	LDI  R17,LOW(0)
                 _0x2060006:
000408 d0f5      	RCALL SUBOPT_0x11
000409 91ed      	LD   R30,X+
00040a 83a9      	STD  Y+1,R26
00040b 83ba      	STD  Y+1+1,R27
00040c 2fae      	MOV  R26,R30
00040d d151      	RCALL _w1_write
00040e 5f1f      	SUBI R17,-LOW(1)
00040f 3018      	CPI  R17,8
000410 f3b8      	BRLO _0x2060006
000411 c002      	RJMP _0x2060008
                 _0x2060004:
000412 ecac      	LDI  R26,LOW(204)
000413 d14b      	RCALL _w1_write
                 _0x2060008:
000414 e0e1      	LDI  R30,LOW(1)
000415 c056      	RJMP _0x20E0002
                 ; .FEND
                 _ds18b20_read_spd:
                 ; .FSTART _ds18b20_read_spd
000416 d09b      	RCALL SUBOPT_0x2
000417 d3c0      	RCALL __SAVELOCR4
000418 81ac      	LDD  R26,Y+4
000419 81bd      	LDD  R27,Y+4+1
00041a d0e6      	RCALL SUBOPT_0x12
00041b f411      	BRNE _0x2060009
00041c e0e0      	LDI  R30,LOW(0)
00041d c017      	RJMP _0x20E0003
                 _0x2060009:
00041e ebae      	LDI  R26,LOW(190)
00041f d13f      	RCALL _w1_write
000420 e010      	LDI  R17,LOW(0)
                +
000421 ef26     +LDI R18 , LOW ( ___ds18b20_scratch_pad )
000422 e031     +LDI R19 , HIGH ( ___ds18b20_scratch_pad )
                 	__POINTWRM 18,19,___ds18b20_scratch_pad
                 _0x206000B:
000423 933f      	PUSH R19
000424 932f      	PUSH R18
                +
000425 5f2f     +SUBI R18 , LOW ( - 1 )
000426 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000427 d132      	RCALL _w1_read
000428 91af      	POP  R26
000429 91bf      	POP  R27
00042a 93ec      	ST   X,R30
00042b 5f1f      	SUBI R17,-LOW(1)
00042c 3019      	CPI  R17,9
00042d f3a8      	BRLO _0x206000B
00042e efe6      	LDI  R30,LOW(___ds18b20_scratch_pad)
00042f e0f1      	LDI  R31,HIGH(___ds18b20_scratch_pad)
000430 93fa      	ST   -Y,R31
000431 93ea      	ST   -Y,R30
000432 e0a9      	LDI  R26,LOW(9)
000433 d135      	RCALL _w1_dow_crc8
000434 d327      	RCALL __LNEGB1
                 _0x20E0003:
000435 d3a9      	RCALL __LOADLOCR4
000436 9626      	ADIW R28,6
000437 9508      	RET
                 ; .FEND
                 _ds18b20_temperature:
                 ; .FSTART _ds18b20_temperature
000438 d079      	RCALL SUBOPT_0x2
000439 931a      	ST   -Y,R17
00043a d0c3      	RCALL SUBOPT_0x11
00043b dfda      	RCALL _ds18b20_read_spd
00043c 30e0      	CPI  R30,0
00043d f411      	BRNE _0x206000D
00043e d0c5      	RCALL SUBOPT_0x13
00043f c02c      	RJMP _0x20E0002
                 _0x206000D:
                +
000440 91e0 01fa+LDS R30 , ___ds18b20_scratch_pad + ( 4 )
                 	__GETB1MN ___ds18b20_scratch_pad,4
000442 95e2      	SWAP R30
000443 70ef      	ANDI R30,0xF
000444 95e6      	LSR  R30
000445 70e3      	ANDI R30,LOW(0x3)
000446 2f1e      	MOV  R17,R30
000447 d0b6      	RCALL SUBOPT_0x11
000448 d0b8      	RCALL SUBOPT_0x12
000449 f411      	BRNE _0x206000E
00044a d0b9      	RCALL SUBOPT_0x13
00044b c020      	RJMP _0x20E0002
                 _0x206000E:
00044c e4a4      	LDI  R26,LOW(68)
00044d d111      	RCALL _w1_write
00044e 2fe1      	MOV  R30,R17
00044f e2a6      	LDI  R26,LOW(_conv_delay_G103*2)
000450 e0b0      	LDI  R27,HIGH(_conv_delay_G103*2)
000451 d0b7      	RCALL SUBOPT_0x14
000452 d34b      	RCALL __GETW2PF
000453 d0bb      	RCALL _delay_ms
000454 d0a9      	RCALL SUBOPT_0x11
000455 dfc0      	RCALL _ds18b20_read_spd
000456 30e0      	CPI  R30,0
000457 f411      	BRNE _0x206000F
000458 d0ab      	RCALL SUBOPT_0x13
000459 c012      	RJMP _0x20E0002
                 _0x206000F:
00045a d0be      	RCALL _w1_init
00045b 2fe1      	MOV  R30,R17
00045c e2ae      	LDI  R26,LOW(_bit_mask_G103*2)
00045d e0b0      	LDI  R27,HIGH(_bit_mask_G103*2)
00045e d0aa      	RCALL SUBOPT_0x14
00045f d33a      	RCALL __GETW1PF
000460 91a0 01f6 	LDS  R26,___ds18b20_scratch_pad
000462 91b0 01f7 	LDS  R27,___ds18b20_scratch_pad+1
000464 23ea      	AND  R30,R26
000465 23fb      	AND  R31,R27
000466 d06e      	RCALL SUBOPT_0x9
                +
000467 e0a0     +LDI R26 , LOW ( 0x3D800000 )
000468 e0b0     +LDI R27 , HIGH ( 0x3D800000 )
000469 e880     +LDI R24 , BYTE3 ( 0x3D800000 )
00046a e39d     +LDI R25 , BYTE4 ( 0x3D800000 )
                 	__GETD2N 0x3D800000
00046b d226      	RCALL __MULF12
                 _0x20E0002:
00046c 8118      	LDD  R17,Y+0
00046d 9623      	ADIW R28,3
00046e 9508      	RET
                 ; .FEND
                 _ds18b20_init:
                 ; .FSTART _ds18b20_init
00046f 93aa      	ST   -Y,R26
000470 81ab      	LDD  R26,Y+3
000471 81bc      	LDD  R27,Y+3+1
000472 d08e      	RCALL SUBOPT_0x12
000473 f411      	BRNE _0x2060010
000474 e0e0      	LDI  R30,LOW(0)
000475 c032      	RJMP _0x20E0001
                 _0x2060010:
000476 81e8      	LD   R30,Y
000477 95e2      	SWAP R30
000478 7fe0      	ANDI R30,0xF0
000479 0fee      	LSL  R30
00047a 61ef      	ORI  R30,LOW(0x1F)
00047b 83e8      	ST   Y,R30
00047c e4ae      	LDI  R26,LOW(78)
00047d d0e1      	RCALL _w1_write
00047e 81a9      	LDD  R26,Y+1
00047f d0df      	RCALL _w1_write
000480 81aa      	LDD  R26,Y+2
000481 d0dd      	RCALL _w1_write
000482 81a8      	LD   R26,Y
000483 d0db      	RCALL _w1_write
000484 81ab      	LDD  R26,Y+3
000485 81bc      	LDD  R27,Y+3+1
000486 df8f      	RCALL _ds18b20_read_spd
000487 30e0      	CPI  R30,0
000488 f411      	BRNE _0x2060011
000489 e0e0      	LDI  R30,LOW(0)
00048a c01d      	RJMP _0x20E0001
                 _0x2060011:
                +
00048b 91a0 01f9+LDS R26 , ___ds18b20_scratch_pad + ( 3 )
                 	__GETB2MN ___ds18b20_scratch_pad,3
00048d 81ea      	LDD  R30,Y+2
00048e 17ea      	CP   R30,R26
00048f f451      	BRNE _0x2060013
                +
000490 91a0 01f8+LDS R26 , ___ds18b20_scratch_pad + ( 2 )
                 	__GETB2MN ___ds18b20_scratch_pad,2
000492 81e9      	LDD  R30,Y+1
000493 17ea      	CP   R30,R26
000494 f429      	BRNE _0x2060013
                +
000495 91a0 01fa+LDS R26 , ___ds18b20_scratch_pad + ( 4 )
                 	__GETB2MN ___ds18b20_scratch_pad,4
000497 81e8      	LD   R30,Y
000498 17ea      	CP   R30,R26
000499 f011      	BREQ _0x2060012
                 _0x2060013:
00049a e0e0      	LDI  R30,LOW(0)
00049b c00c      	RJMP _0x20E0001
                 _0x2060012:
00049c 81ab      	LDD  R26,Y+3
00049d 81bc      	LDD  R27,Y+3+1
00049e d062      	RCALL SUBOPT_0x12
00049f f411      	BRNE _0x2060015
0004a0 e0e0      	LDI  R30,LOW(0)
0004a1 c006      	RJMP _0x20E0001
                 _0x2060015:
0004a2 e4a8      	LDI  R26,LOW(72)
0004a3 d0bb      	RCALL _w1_write
0004a4 e0af      	LDI  R26,LOW(15)
0004a5 e0b0      	LDI  R27,0
0004a6 d068      	RCALL _delay_ms
0004a7 d071      	RCALL _w1_init
                 _0x20E0001:
0004a8 9625      	ADIW R28,5
0004a9 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _twi_tx_index:
0001f3           	.BYTE 0x1
                 _twi_rx_index:
0001f4           	.BYTE 0x1
                 _twi_result:
0001f5           	.BYTE 0x1
                 ___ds18b20_scratch_pad:
0001f6           	.BYTE 0x9
                 _temp:
0001ff           	.BYTE 0x4
                 _slave_address_G100:
000203           	.BYTE 0x1
                 _twi_tx_buffer_G100:
000204           	.BYTE 0x2
                 _bytes_to_tx_G100:
000206           	.BYTE 0x1
                 _twi_rx_buffer_G100:
000207           	.BYTE 0x2
                 _bytes_to_rx_G100:
000209           	.BYTE 0x1
                 _twi_rx_buffer_size_G100:
00020a           	.BYTE 0x1
                 _twi_slave_rx_handler_G100:
00020b           	.BYTE 0x2
                 _twi_slave_tx_handler_G100:
00020d           	.BYTE 0x2
                 __seed_G105:
00020f           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x0:
                +
0004aa 81ae     +LDD R26 , Y + 6
0004ab 81bf     +LDD R27 , Y + 6 + 1
0004ac 8588     +LDD R24 , Y + 6 + 2
0004ad 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
0004ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0004af 01df      	MOVW R26,R30
0004b0 01cb      	MOVW R24,R22
0004b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0004b2 93ba      	ST   -Y,R27
0004b3 93aa      	ST   -Y,R26
0004b4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
0004b5 d2eb      	RCALL __GETD1S0
0004b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
                +
0004b7 e0a0     +LDI R26 , LOW ( 0x3F800000 )
0004b8 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0004b9 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0004ba e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0004bb d17f      	RCALL __SUBF12
0004bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x5:
                +
0004bd 81ee     +LDD R30 , Y + 6
0004be 81ff     +LDD R31 , Y + 6 + 1
0004bf 8568     +LDD R22 , Y + 6 + 2
0004c0 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
0004c1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x6:
                +
0004c2 83ee     +STD Y + 6 , R30
0004c3 83ff     +STD Y + 6 + 1 , R31
0004c4 8768     +STD Y + 6 + 2 , R22
0004c5 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
0004c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7:
0004c7 dffa      	RCALL SUBOPT_0x6
0004c8 dff4      	RCALL SUBOPT_0x5
0004c9 dfe0      	RCALL SUBOPT_0x0
0004ca d1c7      	RCALL __MULF12
                +
0004cb 83ea     +STD Y + 2 , R30
0004cc 83fb     +STD Y + 2 + 1 , R31
0004cd 836c     +STD Y + 2 + 2 , R22
0004ce 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0004cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
                +
0004d0 81ea     +LDD R30 , Y + 2
0004d1 81fb     +LDD R31 , Y + 2 + 1
0004d2 816c     +LDD R22 , Y + 2 + 2
0004d3 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
0004d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
0004d5 d281      	RCALL __CWD1
0004d6 d131      	RCALL __CDF1
0004d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xA:
                +
0004d8 85aa     +LDD R26 , Y + 10
0004d9 85bb     +LDD R27 , Y + 10 + 1
0004da 858c     +LDD R24 , Y + 10 + 2
0004db 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
0004dc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xB:
                +
0004dd e0e0     +LDI R30 , LOW ( 0x0 )
0004de e0f0     +LDI R31 , HIGH ( 0x0 )
0004df e060     +LDI R22 , BYTE3 ( 0x0 )
0004e0 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0004e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
                +
0004e2 e0e0     +LDI R30 , LOW ( 0x3F800000 )
0004e3 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0004e4 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0004e5 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0004e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xD:
                +
0004e7 85e8     +LDD R30 , Y + 8
0004e8 85f9     +LDD R31 , Y + 8 + 1
0004e9 856a     +LDD R22 , Y + 8 + 2
0004ea 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
0004eb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
                +
0004ec 85a8     +LDD R26 , Y + 8
0004ed 85b9     +LDD R27 , Y + 8 + 1
0004ee 858a     +LDD R24 , Y + 8 + 2
0004ef 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0004f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xF:
                +
0004f1 81ec     +LDD R30 , Y + 4
0004f2 81fd     +LDD R31 , Y + 4 + 1
0004f3 816e     +LDD R22 , Y + 4 + 2
0004f4 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
0004f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x10:
0004f6 ddfe      	RCALL _log
                +
0004f7 81ac     +LDD R26 , Y + 4
0004f8 81bd     +LDD R27 , Y + 4 + 1
0004f9 818e     +LDD R24 , Y + 4 + 2
0004fa 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0004fb d196      	RCALL __MULF12
0004fc dfb2      	RCALL SUBOPT_0x1
0004fd ce5c      	RJMP _exp
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
0004fe 81a9      	LDD  R26,Y+1
0004ff 81ba      	LDD  R27,Y+1+1
000500 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
000501 def8      	RCALL _ds18b20_select
000502 30e0      	CPI  R30,0
000503 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x13:
                +
000504 e0e0     +LDI R30 , LOW ( 0xC61C3C00 )
000505 e3fc     +LDI R31 , HIGH ( 0xC61C3C00 )
000506 e16c     +LDI R22 , BYTE3 ( 0xC61C3C00 )
000507 ec76     +LDI R23 , BYTE4 ( 0xC61C3C00 )
                 	__GETD1N 0xC61C3C00
000508 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x14:
000509 e0f0      	LDI  R31,0
00050a 0fee      	LSL  R30
00050b 1fff      	ROL  R31
00050c 0fea      	ADD  R30,R26
00050d 1ffb      	ADC  R31,R27
00050e 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00050f 9610      	adiw r26,0
000510 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000511 ed80     +LDI R24 , LOW ( 0x7D0 )
000512 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000513 9701     +SBIW R24 , 1
000514 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000515 95a8      	wdr
000516 9711      	sbiw r26,1
000517 f7c9      	brne __delay_ms0
                 __delay_ms1:
000518 9508      	ret
                 
                 	.equ __w1_port=0x15
                 	.equ __w1_bit=0x00
                 
                 _w1_init:
000519 27ee      	clr  r30
00051a 98a8      	cbi  __w1_port,__w1_bit
00051b 9aa0      	sbi  __w1_port-1,__w1_bit
                +
00051c ec80     +LDI R24 , LOW ( 0x3C0 )
00051d e093     +LDI R25 , HIGH ( 0x3C0 )
                +__DELAY_USW_LOOP :
00051e 9701     +SBIW R24 , 1
00051f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x3C0
000520 98a0      	cbi  __w1_port-1,__w1_bit
                +
000521 e285     +LDI R24 , LOW ( 0x25 )
                +__DELAY_USB_LOOP :
000522 958a     +DEC R24
000523 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x25
000524 9b98      	sbis __w1_port-2,__w1_bit
000525 9508      	ret
                +
000526 ec8b     +LDI R24 , LOW ( 0xCB )
                +__DELAY_USB_LOOP :
000527 958a     +DEC R24
000528 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0xCB
000529 9b98      	sbis __w1_port-2,__w1_bit
00052a e0e1      	ldi  r30,1
                +
00052b e08c     +LDI R24 , LOW ( 0x30C )
00052c e093     +LDI R25 , HIGH ( 0x30C )
                +__DELAY_USW_LOOP :
00052d 9701     +SBIW R24 , 1
00052e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x30C
00052f 9508      	ret
                 
                 __w1_read_bit:
000530 9aa0      	sbi  __w1_port-1,__w1_bit
                +
000531 e085     +LDI R24 , LOW ( 0x5 )
                +__DELAY_USB_LOOP :
000532 958a     +DEC R24
000533 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x5
000534 98a0      	cbi  __w1_port-1,__w1_bit
                +
000535 e18d     +LDI R24 , LOW ( 0x1D )
                +__DELAY_USB_LOOP :
000536 958a     +DEC R24
000537 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x1D
000538 9488      	clc
000539 9998      	sbic __w1_port-2,__w1_bit
00053a 9408      	sec
00053b 95e7      	ror  r30
                +
00053c ed85     +LDI R24 , LOW ( 0xD5 )
                +__DELAY_USB_LOOP :
00053d 958a     +DEC R24
00053e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0xD5
00053f 9508      	ret
                 
                 __w1_write_bit:
000540 94e8      	clt
000541 9aa0      	sbi  __w1_port-1,__w1_bit
                +
000542 e085     +LDI R24 , LOW ( 0x5 )
                +__DELAY_USB_LOOP :
000543 958a     +DEC R24
000544 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x5
000545 fd70      	sbrc r23,0
000546 98a0      	cbi  __w1_port-1,__w1_bit
                +
000547 e283     +LDI R24 , LOW ( 0x23 )
                +__DELAY_USB_LOOP :
000548 958a     +DEC R24
000549 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x23
00054a 9998      	sbic __w1_port-2,__w1_bit
00054b c003      	rjmp __w1_write_bit0
00054c ff70      	sbrs r23,0
00054d c003      	rjmp __w1_write_bit1
00054e 9508      	ret
                 __w1_write_bit0:
00054f ff70      	sbrs r23,0
000550 9508      	ret
                 __w1_write_bit1:
                +
000551 ec88     +LDI R24 , LOW ( 0xC8 )
                +__DELAY_USB_LOOP :
000552 958a     +DEC R24
000553 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0xC8
000554 98a0      	cbi  __w1_port-1,__w1_bit
                +
000555 e08d     +LDI R24 , LOW ( 0xD )
                +__DELAY_USB_LOOP :
000556 958a     +DEC R24
000557 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0xD
000558 9468      	set
000559 9508      	ret
                 
                 _w1_read:
00055a e068      	ldi  r22,8
                 	__w1_read0:
00055b dfd4      	rcall __w1_read_bit
00055c 956a      	dec  r22
00055d f7e9      	brne __w1_read0
00055e 9508      	ret
                 
                 _w1_write:
00055f 2f7a      	mov  r23,r26
000560 e068      	ldi  r22,8
000561 27ee      	clr  r30
                 __w1_write0:
000562 dfdd      	rcall __w1_write_bit
000563 f426      	brtc __w1_write1
000564 9577      	ror  r23
000565 956a      	dec  r22
000566 f7d9      	brne __w1_write0
000567 95e3      	inc  r30
                 __w1_write1:
000568 9508      	ret
                 
                 _w1_dow_crc8:
000569 27ee      	clr  r30
00056a 23aa      	tst  r26
00056b f089      	breq __w1_dow_crc83
00056c 2f8a      	mov  r24,r26
00056d e168      	ldi  r22,0x18
00056e 81a8      	ld   r26,y
00056f 81b9      	ldd  r27,y+1
                 __w1_dow_crc80:
000570 e098      	ldi  r25,8
000571 91fd      	ld   r31,x+
                 __w1_dow_crc81:
000572 2f7f      	mov  r23,r31
000573 277e      	eor  r23,r30
000574 9577      	ror  r23
000575 f408      	brcc __w1_dow_crc82
000576 27e6      	eor  r30,r22
                 __w1_dow_crc82:
000577 95e7      	ror  r30
000578 95f6      	lsr  r31
000579 959a      	dec  r25
00057a f7b9      	brne __w1_dow_crc81
00057b 958a      	dec  r24
00057c f799      	brne __w1_dow_crc80
                 __w1_dow_crc83:
00057d 9622      	adiw r28,2
00057e 9508      	ret
                 
                 _frexp:
00057f 91e9      	LD   R30,Y+
000580 91f9      	LD   R31,Y+
000581 9169      	LD   R22,Y+
000582 9179      	LD   R23,Y+
000583 fb77      	BST  R23,7
000584 0f66      	LSL  R22
000585 1f77      	ROL  R23
000586 2788      	CLR  R24
000587 577e      	SUBI R23,0x7E
000588 0b88      	SBC  R24,R24
000589 937d      	ST   X+,R23
00058a 938c      	ST   X,R24
00058b e77e      	LDI  R23,0x7E
00058c 9576      	LSR  R23
00058d 9567      	ROR  R22
00058e f06e      	BRTS __ANEGF1
00058f 9508      	RET
                 
                 _ldexp:
000590 91e9      	LD   R30,Y+
000591 91f9      	LD   R31,Y+
000592 9169      	LD   R22,Y+
000593 9179      	LD   R23,Y+
000594 fb77      	BST  R23,7
000595 0f66      	LSL  R22
000596 1f77      	ROL  R23
000597 0f7a      	ADD  R23,R26
000598 9576      	LSR  R23
000599 9567      	ROR  R22
00059a f00e      	BRTS __ANEGF1
00059b 9508      	RET
                 
                 __ANEGF1:
00059c 9730      	SBIW R30,0
00059d 4060      	SBCI R22,0
00059e 4070      	SBCI R23,0
00059f f009      	BREQ __ANEGF10
0005a0 5870      	SUBI R23,0x80
                 __ANEGF10:
0005a1 9508      	RET
                 
                 __ROUND_REPACK:
0005a2 2355      	TST  R21
0005a3 f442      	BRPL __REPACK
0005a4 3850      	CPI  R21,0x80
0005a5 f411      	BRNE __ROUND_REPACK0
0005a6 ffe0      	SBRS R30,0
0005a7 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0005a8 9631      	ADIW R30,1
0005a9 1f69      	ADC  R22,R25
0005aa 1f79      	ADC  R23,R25
0005ab f06b      	BRVS __REPACK1
                 
                 __REPACK:
0005ac e850      	LDI  R21,0x80
0005ad 2757      	EOR  R21,R23
0005ae f411      	BRNE __REPACK0
0005af 935f      	PUSH R21
0005b0 c0cf      	RJMP __ZERORES
                 __REPACK0:
0005b1 3f5f      	CPI  R21,0xFF
0005b2 f031      	BREQ __REPACK1
0005b3 0f66      	LSL  R22
0005b4 0c00      	LSL  R0
0005b5 9557      	ROR  R21
0005b6 9567      	ROR  R22
0005b7 2f75      	MOV  R23,R21
0005b8 9508      	RET
                 __REPACK1:
0005b9 935f      	PUSH R21
0005ba 2000      	TST  R0
0005bb f00a      	BRMI __REPACK2
0005bc c0cf      	RJMP __MAXRES
                 __REPACK2:
0005bd c0c8      	RJMP __MINRES
                 
                 __UNPACK:
0005be e850      	LDI  R21,0x80
0005bf 2e19      	MOV  R1,R25
0005c0 2215      	AND  R1,R21
0005c1 0f88      	LSL  R24
0005c2 1f99      	ROL  R25
0005c3 2795      	EOR  R25,R21
0005c4 0f55      	LSL  R21
0005c5 9587      	ROR  R24
                 
                 __UNPACK1:
0005c6 e850      	LDI  R21,0x80
0005c7 2e07      	MOV  R0,R23
0005c8 2205      	AND  R0,R21
0005c9 0f66      	LSL  R22
0005ca 1f77      	ROL  R23
0005cb 2775      	EOR  R23,R21
0005cc 0f55      	LSL  R21
0005cd 9567      	ROR  R22
0005ce 9508      	RET
                 
                 __CFD1U:
0005cf 9468      	SET
0005d0 c001      	RJMP __CFD1U0
                 __CFD1:
0005d1 94e8      	CLT
                 __CFD1U0:
0005d2 935f      	PUSH R21
0005d3 dff2      	RCALL __UNPACK1
0005d4 3870      	CPI  R23,0x80
0005d5 f018      	BRLO __CFD10
0005d6 3f7f      	CPI  R23,0xFF
0005d7 f408      	BRCC __CFD10
0005d8 c0a7      	RJMP __ZERORES
                 __CFD10:
0005d9 e156      	LDI  R21,22
0005da 1b57      	SUB  R21,R23
0005db f4aa      	BRPL __CFD11
0005dc 9551      	NEG  R21
0005dd 3058      	CPI  R21,8
0005de f40e      	BRTC __CFD19
0005df 3059      	CPI  R21,9
                 __CFD19:
0005e0 f030      	BRLO __CFD17
0005e1 efef      	SER  R30
0005e2 efff      	SER  R31
0005e3 ef6f      	SER  R22
0005e4 e77f      	LDI  R23,0x7F
0005e5 f977      	BLD  R23,7
0005e6 c01a      	RJMP __CFD15
                 __CFD17:
0005e7 2777      	CLR  R23
0005e8 2355      	TST  R21
0005e9 f0b9      	BREQ __CFD15
                 __CFD18:
0005ea 0fee      	LSL  R30
0005eb 1fff      	ROL  R31
0005ec 1f66      	ROL  R22
0005ed 1f77      	ROL  R23
0005ee 955a      	DEC  R21
0005ef f7d1      	BRNE __CFD18
0005f0 c010      	RJMP __CFD15
                 __CFD11:
0005f1 2777      	CLR  R23
                 __CFD12:
0005f2 3058      	CPI  R21,8
0005f3 f028      	BRLO __CFD13
0005f4 2fef      	MOV  R30,R31
0005f5 2ff6      	MOV  R31,R22
0005f6 2f67      	MOV  R22,R23
0005f7 5058      	SUBI R21,8
0005f8 cff9      	RJMP __CFD12
                 __CFD13:
0005f9 2355      	TST  R21
0005fa f031      	BREQ __CFD15
                 __CFD14:
0005fb 9576      	LSR  R23
0005fc 9567      	ROR  R22
0005fd 95f7      	ROR  R31
0005fe 95e7      	ROR  R30
0005ff 955a      	DEC  R21
000600 f7d1      	BRNE __CFD14
                 __CFD15:
000601 2000      	TST  R0
000602 f40a      	BRPL __CFD16
000603 d145      	RCALL __ANEGD1
                 __CFD16:
000604 915f      	POP  R21
000605 9508      	RET
                 
                 __CDF1U:
000606 9468      	SET
000607 c001      	RJMP __CDF1U0
                 __CDF1:
000608 94e8      	CLT
                 __CDF1U0:
000609 9730      	SBIW R30,0
00060a 4060      	SBCI R22,0
00060b 4070      	SBCI R23,0
00060c f0b1      	BREQ __CDF10
00060d 2400      	CLR  R0
00060e f026      	BRTS __CDF11
00060f 2377      	TST  R23
000610 f412      	BRPL __CDF11
000611 9400      	COM  R0
000612 d136      	RCALL __ANEGD1
                 __CDF11:
000613 2e17      	MOV  R1,R23
000614 e17e      	LDI  R23,30
000615 2011      	TST  R1
                 __CDF12:
000616 f032      	BRMI __CDF13
000617 957a      	DEC  R23
000618 0fee      	LSL  R30
000619 1fff      	ROL  R31
00061a 1f66      	ROL  R22
00061b 1c11      	ROL  R1
00061c cff9      	RJMP __CDF12
                 __CDF13:
00061d 2fef      	MOV  R30,R31
00061e 2ff6      	MOV  R31,R22
00061f 2d61      	MOV  R22,R1
000620 935f      	PUSH R21
000621 df8a      	RCALL __REPACK
000622 915f      	POP  R21
                 __CDF10:
000623 9508      	RET
                 
                 __SWAPACC:
000624 934f      	PUSH R20
000625 01af      	MOVW R20,R30
000626 01fd      	MOVW R30,R26
000627 01da      	MOVW R26,R20
000628 01ab      	MOVW R20,R22
000629 01bc      	MOVW R22,R24
00062a 01ca      	MOVW R24,R20
00062b 2d40      	MOV  R20,R0
00062c 2c01      	MOV  R0,R1
00062d 2e14      	MOV  R1,R20
00062e 914f      	POP  R20
00062f 9508      	RET
                 
                 __UADD12:
000630 0fea      	ADD  R30,R26
000631 1ffb      	ADC  R31,R27
000632 1f68      	ADC  R22,R24
000633 9508      	RET
                 
                 __NEGMAN1:
000634 95e0      	COM  R30
000635 95f0      	COM  R31
000636 9560      	COM  R22
000637 5fef      	SUBI R30,-1
000638 4fff      	SBCI R31,-1
000639 4f6f      	SBCI R22,-1
00063a 9508      	RET
                 
                 __SUBF12:
00063b 935f      	PUSH R21
00063c df81      	RCALL __UNPACK
00063d 3890      	CPI  R25,0x80
00063e f171      	BREQ __ADDF129
00063f e850      	LDI  R21,0x80
000640 2615      	EOR  R1,R21
                 
000641 c004      	RJMP __ADDF120
                 
                 __ADDF12:
000642 935f      	PUSH R21
000643 df7a      	RCALL __UNPACK
000644 3890      	CPI  R25,0x80
000645 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000646 3870      	CPI  R23,0x80
000647 f121      	BREQ __ADDF128
                 __ADDF121:
000648 2f57      	MOV  R21,R23
000649 1b59      	SUB  R21,R25
00064a f12b      	BRVS __ADDF1211
00064b f412      	BRPL __ADDF122
00064c dfd7      	RCALL __SWAPACC
00064d cffa      	RJMP __ADDF121
                 __ADDF122:
00064e 3158      	CPI  R21,24
00064f f018      	BRLO __ADDF123
000650 27aa      	CLR  R26
000651 27bb      	CLR  R27
000652 2788      	CLR  R24
                 __ADDF123:
000653 3058      	CPI  R21,8
000654 f028      	BRLO __ADDF124
000655 2fab      	MOV  R26,R27
000656 2fb8      	MOV  R27,R24
000657 2788      	CLR  R24
000658 5058      	SUBI R21,8
000659 cff9      	RJMP __ADDF123
                 __ADDF124:
00065a 2355      	TST  R21
00065b f029      	BREQ __ADDF126
                 __ADDF125:
00065c 9586      	LSR  R24
00065d 95b7      	ROR  R27
00065e 95a7      	ROR  R26
00065f 955a      	DEC  R21
000660 f7d9      	BRNE __ADDF125
                 __ADDF126:
000661 2d50      	MOV  R21,R0
000662 2551      	EOR  R21,R1
000663 f072      	BRMI __ADDF127
000664 dfcb      	RCALL __UADD12
000665 f438      	BRCC __ADDF129
000666 9567      	ROR  R22
000667 95f7      	ROR  R31
000668 95e7      	ROR  R30
000669 9573      	INC  R23
00066a f413      	BRVC __ADDF129
00066b c020      	RJMP __MAXRES
                 __ADDF128:
00066c dfb7      	RCALL __SWAPACC
                 __ADDF129:
00066d df3e      	RCALL __REPACK
00066e 915f      	POP  R21
00066f 9508      	RET
                 __ADDF1211:
000670 f7d8      	BRCC __ADDF128
000671 cffb      	RJMP __ADDF129
                 __ADDF127:
000672 1bea      	SUB  R30,R26
000673 0bfb      	SBC  R31,R27
000674 0b68      	SBC  R22,R24
000675 f051      	BREQ __ZERORES
000676 f410      	BRCC __ADDF1210
000677 9400      	COM  R0
000678 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000679 2366      	TST  R22
00067a f392      	BRMI __ADDF129
00067b 0fee      	LSL  R30
00067c 1fff      	ROL  R31
00067d 1f66      	ROL  R22
00067e 957a      	DEC  R23
00067f f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000680 27ee      	CLR  R30
000681 27ff      	CLR  R31
000682 2766      	CLR  R22
000683 2777      	CLR  R23
000684 915f      	POP  R21
000685 9508      	RET
                 
                 __MINRES:
000686 efef      	SER  R30
000687 efff      	SER  R31
000688 e76f      	LDI  R22,0x7F
000689 ef7f      	SER  R23
00068a 915f      	POP  R21
00068b 9508      	RET
                 
                 __MAXRES:
00068c efef      	SER  R30
00068d efff      	SER  R31
00068e e76f      	LDI  R22,0x7F
00068f e77f      	LDI  R23,0x7F
000690 915f      	POP  R21
000691 9508      	RET
                 
                 __MULF12:
000692 935f      	PUSH R21
000693 df2a      	RCALL __UNPACK
000694 3870      	CPI  R23,0x80
000695 f351      	BREQ __ZERORES
000696 3890      	CPI  R25,0x80
000697 f341      	BREQ __ZERORES
000698 2401      	EOR  R0,R1
000699 9408      	SEC
00069a 1f79      	ADC  R23,R25
00069b f423      	BRVC __MULF124
00069c f31c      	BRLT __ZERORES
                 __MULF125:
00069d 2000      	TST  R0
00069e f33a      	BRMI __MINRES
00069f cfec      	RJMP __MAXRES
                 __MULF124:
0006a0 920f      	PUSH R0
0006a1 931f      	PUSH R17
0006a2 932f      	PUSH R18
0006a3 933f      	PUSH R19
0006a4 934f      	PUSH R20
0006a5 2711      	CLR  R17
0006a6 2722      	CLR  R18
0006a7 2799      	CLR  R25
0006a8 9f68      	MUL  R22,R24
0006a9 01a0      	MOVW R20,R0
0006aa 9f8f      	MUL  R24,R31
0006ab 2d30      	MOV  R19,R0
0006ac 0d41      	ADD  R20,R1
0006ad 1f59      	ADC  R21,R25
0006ae 9f6b      	MUL  R22,R27
0006af 0d30      	ADD  R19,R0
0006b0 1d41      	ADC  R20,R1
0006b1 1f59      	ADC  R21,R25
0006b2 9f8e      	MUL  R24,R30
0006b3 d027      	RCALL __MULF126
0006b4 9fbf      	MUL  R27,R31
0006b5 d025      	RCALL __MULF126
0006b6 9f6a      	MUL  R22,R26
0006b7 d023      	RCALL __MULF126
0006b8 9fbe      	MUL  R27,R30
0006b9 d01d      	RCALL __MULF127
0006ba 9faf      	MUL  R26,R31
0006bb d01b      	RCALL __MULF127
0006bc 9fae      	MUL  R26,R30
0006bd 0d11      	ADD  R17,R1
0006be 1f29      	ADC  R18,R25
0006bf 1f39      	ADC  R19,R25
0006c0 1f49      	ADC  R20,R25
0006c1 1f59      	ADC  R21,R25
0006c2 2fe3      	MOV  R30,R19
0006c3 2ff4      	MOV  R31,R20
0006c4 2f65      	MOV  R22,R21
0006c5 2f52      	MOV  R21,R18
0006c6 914f      	POP  R20
0006c7 913f      	POP  R19
0006c8 912f      	POP  R18
0006c9 911f      	POP  R17
0006ca 900f      	POP  R0
0006cb 2366      	TST  R22
0006cc f02a      	BRMI __MULF122
0006cd 0f55      	LSL  R21
0006ce 1fee      	ROL  R30
0006cf 1fff      	ROL  R31
0006d0 1f66      	ROL  R22
0006d1 c002      	RJMP __MULF123
                 __MULF122:
0006d2 9573      	INC  R23
0006d3 f24b      	BRVS __MULF125
                 __MULF123:
0006d4 decd      	RCALL __ROUND_REPACK
0006d5 915f      	POP  R21
0006d6 9508      	RET
                 
                 __MULF127:
0006d7 0d10      	ADD  R17,R0
0006d8 1d21      	ADC  R18,R1
0006d9 1f39      	ADC  R19,R25
0006da c002      	RJMP __MULF128
                 __MULF126:
0006db 0d20      	ADD  R18,R0
0006dc 1d31      	ADC  R19,R1
                 __MULF128:
0006dd 1f49      	ADC  R20,R25
0006de 1f59      	ADC  R21,R25
0006df 9508      	RET
                 
                 __DIVF21:
0006e0 935f      	PUSH R21
0006e1 dedc      	RCALL __UNPACK
0006e2 3870      	CPI  R23,0x80
0006e3 f421      	BRNE __DIVF210
0006e4 2011      	TST  R1
                 __DIVF211:
0006e5 f40a      	BRPL __DIVF219
0006e6 cf9f      	RJMP __MINRES
                 __DIVF219:
0006e7 cfa4      	RJMP __MAXRES
                 __DIVF210:
0006e8 3890      	CPI  R25,0x80
0006e9 f409      	BRNE __DIVF218
                 __DIVF217:
0006ea cf95      	RJMP __ZERORES
                 __DIVF218:
0006eb 2401      	EOR  R0,R1
0006ec 9408      	SEC
0006ed 0b97      	SBC  R25,R23
0006ee f41b      	BRVC __DIVF216
0006ef f3d4      	BRLT __DIVF217
0006f0 2000      	TST  R0
0006f1 cff3      	RJMP __DIVF211
                 __DIVF216:
0006f2 2f79      	MOV  R23,R25
0006f3 931f      	PUSH R17
0006f4 932f      	PUSH R18
0006f5 933f      	PUSH R19
0006f6 934f      	PUSH R20
0006f7 2411      	CLR  R1
0006f8 2711      	CLR  R17
0006f9 2722      	CLR  R18
0006fa 2733      	CLR  R19
0006fb 2744      	CLR  R20
0006fc 2755      	CLR  R21
0006fd e290      	LDI  R25,32
                 __DIVF212:
0006fe 17ae      	CP   R26,R30
0006ff 07bf      	CPC  R27,R31
000700 0786      	CPC  R24,R22
000701 0741      	CPC  R20,R17
000702 f030      	BRLO __DIVF213
000703 1bae      	SUB  R26,R30
000704 0bbf      	SBC  R27,R31
000705 0b86      	SBC  R24,R22
000706 0b41      	SBC  R20,R17
000707 9408      	SEC
000708 c001      	RJMP __DIVF214
                 __DIVF213:
000709 9488      	CLC
                 __DIVF214:
00070a 1f55      	ROL  R21
00070b 1f22      	ROL  R18
00070c 1f33      	ROL  R19
00070d 1c11      	ROL  R1
00070e 1faa      	ROL  R26
00070f 1fbb      	ROL  R27
000710 1f88      	ROL  R24
000711 1f44      	ROL  R20
000712 959a      	DEC  R25
000713 f751      	BRNE __DIVF212
000714 01f9      	MOVW R30,R18
000715 2d61      	MOV  R22,R1
000716 914f      	POP  R20
000717 913f      	POP  R19
000718 912f      	POP  R18
000719 911f      	POP  R17
00071a 2366      	TST  R22
00071b f032      	BRMI __DIVF215
00071c 0f55      	LSL  R21
00071d 1fee      	ROL  R30
00071e 1fff      	ROL  R31
00071f 1f66      	ROL  R22
000720 957a      	DEC  R23
000721 f243      	BRVS __DIVF217
                 __DIVF215:
000722 de7f      	RCALL __ROUND_REPACK
000723 915f      	POP  R21
000724 9508      	RET
                 
                 __CMPF12:
000725 2399      	TST  R25
000726 f09a      	BRMI __CMPF120
000727 2377      	TST  R23
000728 f042      	BRMI __CMPF121
000729 1797      	CP   R25,R23
00072a f048      	BRLO __CMPF122
00072b f429      	BRNE __CMPF121
00072c 17ae      	CP   R26,R30
00072d 07bf      	CPC  R27,R31
00072e 0786      	CPC  R24,R22
00072f f020      	BRLO __CMPF122
000730 f031      	BREQ __CMPF123
                 __CMPF121:
000731 9498      	CLZ
000732 9488      	CLC
000733 9508      	RET
                 __CMPF122:
000734 9498      	CLZ
000735 9408      	SEC
000736 9508      	RET
                 __CMPF123:
000737 9418      	SEZ
000738 9488      	CLC
000739 9508      	RET
                 __CMPF120:
00073a 2377      	TST  R23
00073b f7c2      	BRPL __CMPF122
00073c 1797      	CP   R25,R23
00073d f398      	BRLO __CMPF121
00073e f7a9      	BRNE __CMPF122
00073f 17ea      	CP   R30,R26
000740 07fb      	CPC  R31,R27
000741 0768      	CPC  R22,R24
000742 f388      	BRLO __CMPF122
000743 f399      	BREQ __CMPF123
000744 cfec      	RJMP __CMPF121
                 
                 __ANEGW1:
000745 95f1      	NEG  R31
000746 95e1      	NEG  R30
000747 40f0      	SBCI R31,0
000748 9508      	RET
                 
                 __ANEGD1:
000749 95f0      	COM  R31
00074a 9560      	COM  R22
00074b 9570      	COM  R23
00074c 95e1      	NEG  R30
00074d 4fff      	SBCI R31,-1
00074e 4f6f      	SBCI R22,-1
00074f 4f7f      	SBCI R23,-1
000750 9508      	RET
                 
                 __CBD1:
000751 2ffe      	MOV  R31,R30
000752 0fff      	ADD  R31,R31
000753 0bff      	SBC  R31,R31
000754 2f6f      	MOV  R22,R31
000755 2f7f      	MOV  R23,R31
000756 9508      	RET
                 
                 __CWD1:
000757 2f6f      	MOV  R22,R31
000758 0f66      	ADD  R22,R22
000759 0b66      	SBC  R22,R22
00075a 2f76      	MOV  R23,R22
00075b 9508      	RET
                 
                 __LNEGB1:
00075c 23ee      	TST  R30
00075d e0e1      	LDI  R30,1
00075e f009      	BREQ __LNEGB1F
00075f 27ee      	CLR  R30
                 __LNEGB1F:
000760 9508      	RET
                 
                 __DIVW21U:
000761 2400      	CLR  R0
000762 2411      	CLR  R1
000763 e190      	LDI  R25,16
                 __DIVW21U1:
000764 0faa      	LSL  R26
000765 1fbb      	ROL  R27
000766 1c00      	ROL  R0
000767 1c11      	ROL  R1
000768 1a0e      	SUB  R0,R30
000769 0a1f      	SBC  R1,R31
00076a f418      	BRCC __DIVW21U2
00076b 0e0e      	ADD  R0,R30
00076c 1e1f      	ADC  R1,R31
00076d c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00076e 60a1      	SBR  R26,1
                 __DIVW21U3:
00076f 959a      	DEC  R25
000770 f799      	BRNE __DIVW21U1
000771 01fd      	MOVW R30,R26
000772 01d0      	MOVW R26,R0
000773 9508      	RET
                 
                 __DIVW21:
000774 d012      	RCALL __CHKSIGNW
000775 dfeb      	RCALL __DIVW21U
000776 f40e      	BRTC __DIVW211
000777 dfcd      	RCALL __ANEGW1
                 __DIVW211:
000778 9508      	RET
                 
                 __MODW21:
000779 94e8      	CLT
00077a ffb7      	SBRS R27,7
00077b c004      	RJMP __MODW211
00077c 95a0      	COM  R26
00077d 95b0      	COM  R27
00077e 9611      	ADIW R26,1
00077f 9468      	SET
                 __MODW211:
000780 fdf7      	SBRC R31,7
000781 dfc3      	RCALL __ANEGW1
000782 dfde      	RCALL __DIVW21U
000783 01fd      	MOVW R30,R26
000784 f40e      	BRTC __MODW212
000785 dfbf      	RCALL __ANEGW1
                 __MODW212:
000786 9508      	RET
                 
                 __CHKSIGNW:
000787 94e8      	CLT
000788 fff7      	SBRS R31,7
000789 c002      	RJMP __CHKSW1
00078a dfba      	RCALL __ANEGW1
00078b 9468      	SET
                 __CHKSW1:
00078c ffb7      	SBRS R27,7
00078d c006      	RJMP __CHKSW2
00078e 95a0      	COM  R26
00078f 95b0      	COM  R27
000790 9611      	ADIW R26,1
000791 f800      	BLD  R0,0
000792 9403      	INC  R0
000793 fa00      	BST  R0,0
                 __CHKSW2:
000794 9508      	RET
                 
                 __PUTDP1:
000795 93ed      	ST   X+,R30
000796 93fd      	ST   X+,R31
000797 936d      	ST   X+,R22
000798 937c      	ST   X,R23
000799 9508      	RET
                 
                 __GETW1PF:
00079a 9005      	LPM  R0,Z+
00079b 91f4      	LPM  R31,Z
00079c 2de0      	MOV  R30,R0
00079d 9508      	RET
                 
                 __GETW2PF:
00079e 91a5      	LPM  R26,Z+
00079f 91b4      	LPM  R27,Z
0007a0 9508      	RET
                 
                 __GETD1S0:
0007a1 81e8      	LD   R30,Y
0007a2 81f9      	LDD  R31,Y+1
0007a3 816a      	LDD  R22,Y+2
0007a4 817b      	LDD  R23,Y+3
0007a5 9508      	RET
                 
                 __GETD2S0:
0007a6 81a8      	LD   R26,Y
0007a7 81b9      	LDD  R27,Y+1
0007a8 818a      	LDD  R24,Y+2
0007a9 819b      	LDD  R25,Y+3
0007aa 9508      	RET
                 
                 __PUTD1S0:
0007ab 83e8      	ST   Y,R30
0007ac 83f9      	STD  Y+1,R31
0007ad 836a      	STD  Y+2,R22
0007ae 837b      	STD  Y+3,R23
0007af 9508      	RET
                 
                 __PUTPARD1:
0007b0 937a      	ST   -Y,R23
0007b1 936a      	ST   -Y,R22
0007b2 93fa      	ST   -Y,R31
0007b3 93ea      	ST   -Y,R30
0007b4 9508      	RET
                 
                 __PUTPARD2:
0007b5 939a      	ST   -Y,R25
0007b6 938a      	ST   -Y,R24
0007b7 93ba      	ST   -Y,R27
0007b8 93aa      	ST   -Y,R26
0007b9 9508      	RET
                 
                 __SWAPD12:
0007ba 2e18      	MOV  R1,R24
0007bb 2f86      	MOV  R24,R22
0007bc 2d61      	MOV  R22,R1
0007bd 2e19      	MOV  R1,R25
0007be 2f97      	MOV  R25,R23
0007bf 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0007c0 2e1b      	MOV  R1,R27
0007c1 2fbf      	MOV  R27,R31
0007c2 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0007c3 2e1a      	MOV  R1,R26
0007c4 2fae      	MOV  R26,R30
0007c5 2de1      	MOV  R30,R1
0007c6 9508      	RET
                 
                 __CPD10:
0007c7 9730      	SBIW R30,0
0007c8 4060      	SBCI R22,0
0007c9 4070      	SBCI R23,0
0007ca 9508      	RET
                 
                 __CPD02:
0007cb 2400      	CLR  R0
0007cc 160a      	CP   R0,R26
0007cd 060b      	CPC  R0,R27
0007ce 0608      	CPC  R0,R24
0007cf 0609      	CPC  R0,R25
0007d0 9508      	RET
                 
                 __CPD12:
0007d1 17ea      	CP   R30,R26
0007d2 07fb      	CPC  R31,R27
0007d3 0768      	CPC  R22,R24
0007d4 0779      	CPC  R23,R25
0007d5 9508      	RET
                 
                 __SAVELOCR6:
0007d6 935a      	ST   -Y,R21
                 __SAVELOCR5:
0007d7 934a      	ST   -Y,R20
                 __SAVELOCR4:
0007d8 933a      	ST   -Y,R19
                 __SAVELOCR3:
0007d9 932a      	ST   -Y,R18
                 __SAVELOCR2:
0007da 931a      	ST   -Y,R17
0007db 930a      	ST   -Y,R16
0007dc 9508      	RET
                 
                 __LOADLOCR6:
0007dd 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0007de 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0007df 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0007e0 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0007e1 8119      	LDD  R17,Y+1
0007e2 8108      	LD   R16,Y
0007e3 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8A register use summary:
r0 :  43 r1 :  36 r2 :  10 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  22 r17:  38 r18:  36 r19:  25 r20:  28 r21:  67 r22: 111 r23: 113 
r24:  94 r25:  74 r26: 141 r27:  83 r28:  16 r29:   1 r30: 327 r31: 121 
x  :  19 y  : 175 z  :  11 
Registers used: 23 out of 35 (65.7%)

ATmega8A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  22 add   :  14 
adiw  :  15 and   :   7 andi  :  20 asr   :   0 bclr  :   0 bld   :  10 
brbc  :   0 brbs  :   0 brcc  :   8 brcs  :   1 break :   0 breq  :  34 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   3 brmi  :   9 brne  :  72 brpl  :   7 brsh  :   8 brtc  :   5 
brts  :   3 brvc  :   4 brvs  :   4 bset  :   0 bst   :   5 cbi   :   5 
cbr   :   1 clc   :   4 clh   :   0 cli   :   1 cln   :   0 clr   :  40 
cls   :   0 clt   :   9 clv   :   0 clz   :   2 com   :  12 cp    :  18 
cpc   :  16 cpi   :  55 cpse  :   0 dec   :  24 des   :   0 eor   :   9 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   4 ijmp  :   0 in    :  22 
inc   :   4 ld    :  41 ldd   :  73 ldi   : 221 lds   :  43 lpm   :  13 
lsl   :  17 lsr   :   7 mov   :  61 movw  :  31 mul   :   9 muls  :   0 
mulsu :   0 neg   :   4 nop   :   0 or    :   0 ori   :  16 out   :  31 
pop   :  38 push  :  38 rcall : 224 ret   :  85 reti  :   1 rjmp  : 120 
rol   :  30 ror   :  21 sbc   :  10 sbci  :  14 sbi   :   3 sbic  :   3 
sbis  :   3 sbiw  :  19 sbr   :   3 sbrc  :   3 sbrs  :   9 sec   :   6 
seh   :   0 sei   :   0 sen   :   0 ser   :   8 ses   :   0 set   :   9 
sev   :   0 sez   :   1 sleep :   0 spm   :   0 st    :  54 std   :  26 
sts   :   9 sub   :   5 subi  :  19 swap  :   2 tst   :  19 wdr   :   1 

Instructions used: 79 out of 114 (69.3%)

ATmega8A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000fc8   3784    256   4040    8192  49.3%
[.dseg] 0x000060 0x000213      0    179    179    1024  17.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 7 warnings
